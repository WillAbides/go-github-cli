// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type OauthAuthorizationsCmd struct {
	CreateAuthorization                          OauthAuthorizationsCreateAuthorizationCmd                          `cmd:""`
	DeleteAuthorization                          OauthAuthorizationsDeleteAuthorizationCmd                          `cmd:""`
	DeleteGrant                                  OauthAuthorizationsDeleteGrantCmd                                  `cmd:""`
	GetAuthorization                             OauthAuthorizationsGetAuthorizationCmd                             `cmd:""`
	GetGrant                                     OauthAuthorizationsGetGrantCmd                                     `cmd:""`
	GetOrCreateAuthorizationForApp               OauthAuthorizationsGetOrCreateAuthorizationForAppCmd               `cmd:""`
	GetOrCreateAuthorizationForAppAndFingerprint OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCmd `cmd:""`
	ListAuthorizations                           OauthAuthorizationsListAuthorizationsCmd                           `cmd:""`
	ListGrants                                   OauthAuthorizationsListGrantsCmd                                   `cmd:""`
	UpdateAuthorization                          OauthAuthorizationsUpdateAuthorizationCmd                          `cmd:""`
}

type OauthAuthorizationsCreateAuthorizationCmd struct {
	ClientId     string   `name:"client_id"`
	ClientSecret string   `name:"client_secret"`
	Fingerprint  string   `name:"fingerprint"`
	Note         string   `name:"note"`
	NoteUrl      string   `name:"note_url"`
	Scopes       []string `name:"scopes"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsCreateAuthorizationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations")
	c.UpdateBody("client_id", c.ClientId)
	c.UpdateBody("client_secret", c.ClientSecret)
	c.UpdateBody("fingerprint", c.Fingerprint)
	c.UpdateBody("note", c.Note)
	c.UpdateBody("note_url", c.NoteUrl)
	c.UpdateBody("scopes", c.Scopes)
	return c.DoRequest("POST")
}

type OauthAuthorizationsDeleteAuthorizationCmd struct {
	AuthorizationId int64 `name:"authorization_id" required:"true"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsDeleteAuthorizationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations/{authorization_id}")
	c.UpdateURLPath("authorization_id", c.AuthorizationId)
	return c.DoRequest("DELETE")
}

type OauthAuthorizationsDeleteGrantCmd struct {
	GrantId int64 `name:"grant_id" required:"true"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsDeleteGrantCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/applications/grants/{grant_id}")
	c.UpdateURLPath("grant_id", c.GrantId)
	return c.DoRequest("DELETE")
}

type OauthAuthorizationsGetAuthorizationCmd struct {
	AuthorizationId int64 `name:"authorization_id" required:"true"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsGetAuthorizationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations/{authorization_id}")
	c.UpdateURLPath("authorization_id", c.AuthorizationId)
	return c.DoRequest("GET")
}

type OauthAuthorizationsGetGrantCmd struct {
	GrantId int64 `name:"grant_id" required:"true"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsGetGrantCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/applications/grants/{grant_id}")
	c.UpdateURLPath("grant_id", c.GrantId)
	return c.DoRequest("GET")
}

type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCmd struct {
	ClientId     string   `name:"client_id" required:"true"`
	Fingerprint  string   `name:"fingerprint" required:"true"`
	Note         string   `name:"note"`
	NoteUrl      string   `name:"note_url"`
	Scopes       []string `name:"scopes"`
	ClientSecret string   `name:"client_secret" required:"true"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations/clients/{client_id}/{fingerprint}")
	c.UpdateURLPath("client_id", c.ClientId)
	c.UpdateURLPath("fingerprint", c.Fingerprint)
	c.UpdateBody("client_secret", c.ClientSecret)
	c.UpdateBody("note", c.Note)
	c.UpdateBody("note_url", c.NoteUrl)
	c.UpdateBody("scopes", c.Scopes)
	return c.DoRequest("PUT")
}

type OauthAuthorizationsGetOrCreateAuthorizationForAppCmd struct {
	ClientId     string   `name:"client_id" required:"true"`
	Fingerprint  string   `name:"fingerprint"`
	Note         string   `name:"note"`
	NoteUrl      string   `name:"note_url"`
	Scopes       []string `name:"scopes"`
	ClientSecret string   `name:"client_secret" required:"true"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsGetOrCreateAuthorizationForAppCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations/clients/{client_id}")
	c.UpdateURLPath("client_id", c.ClientId)
	c.UpdateBody("client_secret", c.ClientSecret)
	c.UpdateBody("fingerprint", c.Fingerprint)
	c.UpdateBody("note", c.Note)
	c.UpdateBody("note_url", c.NoteUrl)
	c.UpdateBody("scopes", c.Scopes)
	return c.DoRequest("PUT")
}

type OauthAuthorizationsListAuthorizationsCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsListAuthorizationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OauthAuthorizationsListGrantsCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsListGrantsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/applications/grants")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OauthAuthorizationsUpdateAuthorizationCmd struct {
	AuthorizationId int64    `name:"authorization_id" required:"true"`
	AddScopes       []string `name:"add_scopes"`
	Fingerprint     string   `name:"fingerprint"`
	Note            string   `name:"note"`
	NoteUrl         string   `name:"note_url"`
	RemoveScopes    []string `name:"remove_scopes"`
	Scopes          []string `name:"scopes"`
	internal.BaseCmd
}

func (c *OauthAuthorizationsUpdateAuthorizationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/authorizations/{authorization_id}")
	c.UpdateURLPath("authorization_id", c.AuthorizationId)
	c.UpdateBody("add_scopes", c.AddScopes)
	c.UpdateBody("fingerprint", c.Fingerprint)
	c.UpdateBody("note", c.Note)
	c.UpdateBody("note_url", c.NoteUrl)
	c.UpdateBody("remove_scopes", c.RemoveScopes)
	c.UpdateBody("scopes", c.Scopes)
	return c.DoRequest("PATCH")
}
