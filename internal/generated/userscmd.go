// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type UsersCmd struct {
	AddEmailForAuthenticated                  UsersAddEmailForAuthenticatedCmd                  `cmd:""`
	Block                                     UsersBlockCmd                                     `cmd:""`
	CheckBlocked                              UsersCheckBlockedCmd                              `cmd:""`
	CheckFollowingForUser                     UsersCheckFollowingForUserCmd                     `cmd:""`
	CheckPersonIsFollowedByAuthenticated      UsersCheckPersonIsFollowedByAuthenticatedCmd      `cmd:""`
	CreateGpgKeyForAuthenticated              UsersCreateGpgKeyForAuthenticatedCmd              `cmd:""`
	CreatePublicSshKeyForAuthenticated        UsersCreatePublicSshKeyForAuthenticatedCmd        `cmd:""`
	DeleteEmailForAuthenticated               UsersDeleteEmailForAuthenticatedCmd               `cmd:""`
	DeleteGpgKeyForAuthenticated              UsersDeleteGpgKeyForAuthenticatedCmd              `cmd:""`
	DeletePublicSshKeyForAuthenticated        UsersDeletePublicSshKeyForAuthenticatedCmd        `cmd:""`
	Follow                                    UsersFollowCmd                                    `cmd:""`
	GetAuthenticated                          UsersGetAuthenticatedCmd                          `cmd:""`
	GetByUsername                             UsersGetByUsernameCmd                             `cmd:""`
	GetContextForUser                         UsersGetContextForUserCmd                         `cmd:""`
	GetGpgKeyForAuthenticated                 UsersGetGpgKeyForAuthenticatedCmd                 `cmd:""`
	GetPublicSshKeyForAuthenticated           UsersGetPublicSshKeyForAuthenticatedCmd           `cmd:""`
	List                                      UsersListCmd                                      `cmd:""`
	ListBlockedByAuthenticated                UsersListBlockedByAuthenticatedCmd                `cmd:""`
	ListEmailsForAuthenticated                UsersListEmailsForAuthenticatedCmd                `cmd:""`
	ListFollowedByAuthenticated               UsersListFollowedByAuthenticatedCmd               `cmd:""`
	ListFollowersForAuthenticatedUser         UsersListFollowersForAuthenticatedUserCmd         `cmd:""`
	ListFollowersForUser                      UsersListFollowersForUserCmd                      `cmd:""`
	ListFollowingForUser                      UsersListFollowingForUserCmd                      `cmd:""`
	ListGpgKeysForAuthenticated               UsersListGpgKeysForAuthenticatedCmd               `cmd:""`
	ListGpgKeysForUser                        UsersListGpgKeysForUserCmd                        `cmd:""`
	ListPublicEmailsForAuthenticated          UsersListPublicEmailsForAuthenticatedCmd          `cmd:""`
	ListPublicKeysForUser                     UsersListPublicKeysForUserCmd                     `cmd:""`
	ListPublicSshKeysForAuthenticated         UsersListPublicSshKeysForAuthenticatedCmd         `cmd:""`
	SetPrimaryEmailVisibilityForAuthenticated UsersSetPrimaryEmailVisibilityForAuthenticatedCmd `cmd:""`
	Unblock                                   UsersUnblockCmd                                   `cmd:""`
	Unfollow                                  UsersUnfollowCmd                                  `cmd:""`
	UpdateAuthenticated                       UsersUpdateAuthenticatedCmd                       `cmd:""`
}

type UsersAddEmailForAuthenticatedCmd struct {
	internal.BaseCmd
}

func (c *UsersAddEmailForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/emails")
	return c.DoRequest("POST")
}

type UsersBlockCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersBlockCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/blocks/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type UsersCheckBlockedCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersCheckBlockedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/blocks/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type UsersCheckFollowingForUserCmd struct {
	Username   string `name:"username" required:"true"`
	TargetUser string `name:"target_user" required:"true"`
	internal.BaseCmd
}

func (c *UsersCheckFollowingForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/following/{target_user}")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLPath("target_user", c.TargetUser)
	return c.DoRequest("GET")
}

type UsersCheckPersonIsFollowedByAuthenticatedCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersCheckPersonIsFollowedByAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/following/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type UsersCreateGpgKeyForAuthenticatedCmd struct {
	ArmoredPublicKey string `name:"armored_public_key" required:"true"`
	internal.BaseCmd
}

func (c *UsersCreateGpgKeyForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/gpg_keys")
	c.UpdateBody("armored_public_key", c.ArmoredPublicKey)
	return c.DoRequest("POST")
}

type UsersCreatePublicSshKeyForAuthenticatedCmd struct {
	Title string `name:"title"`
	Key   string `name:"key" required:"true"`
	internal.BaseCmd
}

func (c *UsersCreatePublicSshKeyForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/keys")
	c.UpdateBody("key", c.Key)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("POST")
}

type UsersDeleteEmailForAuthenticatedCmd struct {
	internal.BaseCmd
}

func (c *UsersDeleteEmailForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/emails")
	return c.DoRequest("DELETE")
}

type UsersDeleteGpgKeyForAuthenticatedCmd struct {
	GpgKeyId int64 `name:"gpg_key_id" required:"true"`
	internal.BaseCmd
}

func (c *UsersDeleteGpgKeyForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/gpg_keys/{gpg_key_id}")
	c.UpdateURLPath("gpg_key_id", c.GpgKeyId)
	return c.DoRequest("DELETE")
}

type UsersDeletePublicSshKeyForAuthenticatedCmd struct {
	KeyId int64 `name:"key_id" required:"true"`
	internal.BaseCmd
}

func (c *UsersDeletePublicSshKeyForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/keys/{key_id}")
	c.UpdateURLPath("key_id", c.KeyId)
	return c.DoRequest("DELETE")
}

type UsersFollowCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersFollowCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/following/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type UsersGetAuthenticatedCmd struct {
	internal.BaseCmd
}

func (c *UsersGetAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user")
	return c.DoRequest("GET")
}

type UsersGetByUsernameCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersGetByUsernameCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type UsersGetContextForUserCmd struct {
	Username    string `name:"username" required:"true"`
	SubjectId   string `name:"subject_id"`
	SubjectType string `name:"subject_type"`
	internal.BaseCmd
}

func (c *UsersGetContextForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/hovercard")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("subject_type", c.SubjectType)
	c.UpdateURLQuery("subject_id", c.SubjectId)
	return c.DoRequest("GET")
}

type UsersGetGpgKeyForAuthenticatedCmd struct {
	GpgKeyId int64 `name:"gpg_key_id" required:"true"`
	internal.BaseCmd
}

func (c *UsersGetGpgKeyForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/gpg_keys/{gpg_key_id}")
	c.UpdateURLPath("gpg_key_id", c.GpgKeyId)
	return c.DoRequest("GET")
}

type UsersGetPublicSshKeyForAuthenticatedCmd struct {
	KeyId int64 `name:"key_id" required:"true"`
	internal.BaseCmd
}

func (c *UsersGetPublicSshKeyForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/keys/{key_id}")
	c.UpdateURLPath("key_id", c.KeyId)
	return c.DoRequest("GET")
}

type UsersListBlockedByAuthenticatedCmd struct {
	internal.BaseCmd
}

func (c *UsersListBlockedByAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/blocks")
	return c.DoRequest("GET")
}

type UsersListCmd struct {
	PerPage int64  `name:"per_page"`
	Since   string `name:"since"`
	internal.BaseCmd
}

func (c *UsersListCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users")
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("per_page", c.PerPage)
	return c.DoRequest("GET")
}

type UsersListEmailsForAuthenticatedCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListEmailsForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/emails")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListFollowedByAuthenticatedCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListFollowedByAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/following")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListFollowersForAuthenticatedUserCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListFollowersForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/followers")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListFollowersForUserCmd struct {
	Username string `name:"username" required:"true"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListFollowersForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/followers")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListFollowingForUserCmd struct {
	Username string `name:"username" required:"true"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListFollowingForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/following")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListGpgKeysForAuthenticatedCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListGpgKeysForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/gpg_keys")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListGpgKeysForUserCmd struct {
	Username string `name:"username" required:"true"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListGpgKeysForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/gpg_keys")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListPublicEmailsForAuthenticatedCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListPublicEmailsForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/public_emails")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListPublicKeysForUserCmd struct {
	Username string `name:"username" required:"true"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListPublicKeysForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/keys")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersListPublicSshKeysForAuthenticatedCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *UsersListPublicSshKeysForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/keys")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedCmd struct {
	Email      string `name:"email" required:"true"`
	Visibility string `name:"visibility" required:"true"`
	internal.BaseCmd
}

func (c *UsersSetPrimaryEmailVisibilityForAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/email/visibility")
	c.UpdateBody("email", c.Email)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("PATCH")
}

type UsersUnblockCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersUnblockCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/blocks/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type UsersUnfollowCmd struct {
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *UsersUnfollowCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/following/{username}")
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type UsersUpdateAuthenticatedCmd struct {
	Bio             string `name:"bio"`
	Blog            string `name:"blog"`
	Company         string `name:"company"`
	Email           string `name:"email"`
	Hireable        bool   `name:"hireable"`
	Location        string `name:"location"`
	Name            string `name:"name"`
	TwitterUsername string `name:"twitter_username"`
	internal.BaseCmd
}

func (c *UsersUpdateAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user")
	c.UpdateBody("bio", c.Bio)
	c.UpdateBody("blog", c.Blog)
	c.UpdateBody("company", c.Company)
	c.UpdateBody("email", c.Email)
	c.UpdateBody("hireable", c.Hireable)
	c.UpdateBody("location", c.Location)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("twitter_username", c.TwitterUsername)
	return c.DoRequest("PATCH")
}
