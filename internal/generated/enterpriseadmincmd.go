// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type EnterpriseAdminCmd struct {
	DeleteScimGroupFromEnterprise                EnterpriseAdminDeleteScimGroupFromEnterpriseCmd                `cmd:""`
	DeleteUserFromEnterprise                     EnterpriseAdminDeleteUserFromEnterpriseCmd                     `cmd:""`
	GetProvisioningInformationForEnterpriseGroup EnterpriseAdminGetProvisioningInformationForEnterpriseGroupCmd `cmd:""`
	GetProvisioningInformationForEnterpriseUser  EnterpriseAdminGetProvisioningInformationForEnterpriseUserCmd  `cmd:""`
	ListProvisionedGroupsEnterprise              EnterpriseAdminListProvisionedGroupsEnterpriseCmd              `cmd:""`
	ListProvisionedIdentitiesEnterprise          EnterpriseAdminListProvisionedIdentitiesEnterpriseCmd          `cmd:""`
	ProvisionAndInviteEnterpriseGroup            EnterpriseAdminProvisionAndInviteEnterpriseGroupCmd            `cmd:""`
	ProvisionAndInviteEnterpriseUser             EnterpriseAdminProvisionAndInviteEnterpriseUserCmd             `cmd:""`
	SetInformationForProvisionedEnterpriseGroup  EnterpriseAdminSetInformationForProvisionedEnterpriseGroupCmd  `cmd:""`
	SetInformationForProvisionedEnterpriseUser   EnterpriseAdminSetInformationForProvisionedEnterpriseUserCmd   `cmd:""`
	UpdateAttributeForEnterpriseGroup            EnterpriseAdminUpdateAttributeForEnterpriseGroupCmd            `cmd:""`
	UpdateAttributeForEnterpriseUser             EnterpriseAdminUpdateAttributeForEnterpriseUserCmd             `cmd:""`
}

type EnterpriseAdminDeleteScimGroupFromEnterpriseCmd struct {
	Enterprise  string `name:"enterprise" required:"true"`
	ScimGroupId string `name:"scim_group_id" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminDeleteScimGroupFromEnterpriseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_group_id", c.ScimGroupId)
	return c.DoRequest("DELETE")
}

type EnterpriseAdminDeleteUserFromEnterpriseCmd struct {
	Enterprise string `name:"enterprise" required:"true"`
	ScimUserId string `name:"scim_user_id" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminDeleteUserFromEnterpriseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	return c.DoRequest("DELETE")
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupCmd struct {
	Enterprise  string `name:"enterprise" required:"true"`
	ScimGroupId string `name:"scim_group_id" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminGetProvisioningInformationForEnterpriseGroupCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_group_id", c.ScimGroupId)
	return c.DoRequest("GET")
}

type EnterpriseAdminGetProvisioningInformationForEnterpriseUserCmd struct {
	Enterprise string `name:"enterprise" required:"true"`
	ScimUserId string `name:"scim_user_id" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminGetProvisioningInformationForEnterpriseUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	return c.DoRequest("GET")
}

type EnterpriseAdminListProvisionedGroupsEnterpriseCmd struct {
	Enterprise string `name:"enterprise" required:"true"`
	Count      int64  `name:"count"`
	StartIndex int64  `name:"startIndex"`
	internal.BaseCmd
}

func (c *EnterpriseAdminListProvisionedGroupsEnterpriseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Groups")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLQuery("startIndex", c.StartIndex)
	c.UpdateURLQuery("count", c.Count)
	return c.DoRequest("GET")
}

type EnterpriseAdminListProvisionedIdentitiesEnterpriseCmd struct {
	Enterprise string `name:"enterprise" required:"true"`
	Count      int64  `name:"count"`
	StartIndex int64  `name:"startIndex"`
	internal.BaseCmd
}

func (c *EnterpriseAdminListProvisionedIdentitiesEnterpriseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Users")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLQuery("startIndex", c.StartIndex)
	c.UpdateURLQuery("count", c.Count)
	return c.DoRequest("GET")
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupCmd struct {
	Enterprise  string                `name:"enterprise" required:"true"`
	Members     []internal.JSONObject `name:"members"`
	DisplayName string                `name:"displayName" required:"true"`
	Schemas     []string              `name:"schemas" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminProvisionAndInviteEnterpriseGroupCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Groups")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateBody("displayName", c.DisplayName)
	c.UpdateBody("members", c.Members)
	c.UpdateBody("schemas", c.Schemas)
	return c.DoRequest("POST")
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserCmd struct {
	Enterprise     string                `name:"enterprise" required:"true"`
	Groups         []internal.JSONObject `name:"groups"`
	Emails         []internal.JSONObject `name:"emails" required:"true"`
	NameFamilyName string                `name:"name.familyName" required:"true"`
	NameGivenName  string                `name:"name.givenName" required:"true"`
	Schemas        []string              `name:"schemas" required:"true"`
	UserName       string                `name:"userName" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminProvisionAndInviteEnterpriseUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Users")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateBody("emails", c.Emails)
	c.UpdateBody("groups", c.Groups)
	c.UpdateBody("name.familyName", c.NameFamilyName)
	c.UpdateBody("name.givenName", c.NameGivenName)
	c.UpdateBody("schemas", c.Schemas)
	c.UpdateBody("userName", c.UserName)
	return c.DoRequest("POST")
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupCmd struct {
	Enterprise  string                `name:"enterprise" required:"true"`
	ScimGroupId string                `name:"scim_group_id" required:"true"`
	Members     []internal.JSONObject `name:"members"`
	DisplayName string                `name:"displayName" required:"true"`
	Schemas     []string              `name:"schemas" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_group_id", c.ScimGroupId)
	c.UpdateBody("displayName", c.DisplayName)
	c.UpdateBody("members", c.Members)
	c.UpdateBody("schemas", c.Schemas)
	return c.DoRequest("PUT")
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserCmd struct {
	Enterprise     string                `name:"enterprise" required:"true"`
	ScimUserId     string                `name:"scim_user_id" required:"true"`
	Groups         []internal.JSONObject `name:"groups"`
	Emails         []internal.JSONObject `name:"emails" required:"true"`
	NameFamilyName string                `name:"name.familyName" required:"true"`
	NameGivenName  string                `name:"name.givenName" required:"true"`
	Schemas        []string              `name:"schemas" required:"true"`
	UserName       string                `name:"userName" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminSetInformationForProvisionedEnterpriseUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	c.UpdateBody("emails", c.Emails)
	c.UpdateBody("groups", c.Groups)
	c.UpdateBody("name.familyName", c.NameFamilyName)
	c.UpdateBody("name.givenName", c.NameGivenName)
	c.UpdateBody("schemas", c.Schemas)
	c.UpdateBody("userName", c.UserName)
	return c.DoRequest("PUT")
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupCmd struct {
	Enterprise  string                `name:"enterprise" required:"true"`
	ScimGroupId string                `name:"scim_group_id" required:"true"`
	Operations  []internal.JSONObject `name:"Operations" required:"true"`
	Schemas     []string              `name:"schemas" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminUpdateAttributeForEnterpriseGroupCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_group_id", c.ScimGroupId)
	c.UpdateBody("Operations", c.Operations)
	c.UpdateBody("schemas", c.Schemas)
	return c.DoRequest("PATCH")
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserCmd struct {
	Enterprise string                `name:"enterprise" required:"true"`
	ScimUserId string                `name:"scim_user_id" required:"true"`
	Operations []internal.JSONObject `name:"Operations" required:"true"`
	Schemas    []string              `name:"schemas" required:"true"`
	internal.BaseCmd
}

func (c *EnterpriseAdminUpdateAttributeForEnterpriseUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}")
	c.UpdateURLPath("enterprise", c.Enterprise)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	c.UpdateBody("Operations", c.Operations)
	c.UpdateBody("schemas", c.Schemas)
	return c.DoRequest("PATCH")
}
