// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import (
	"github.com/octo-cli/octo-cli/internal"
)

type TeamsCmd struct {
	AddMemberLegacy                         TeamsAddMemberLegacyCmd                         `cmd:""`
	AddOrUpdateMembershipInOrg              TeamsAddOrUpdateMembershipInOrgCmd              `cmd:""`
	AddOrUpdateMembershipLegacy             TeamsAddOrUpdateMembershipLegacyCmd             `cmd:""`
	AddOrUpdateProjectInOrg                 TeamsAddOrUpdateProjectInOrgCmd                 `cmd:""`
	AddOrUpdateProjectLegacy                TeamsAddOrUpdateProjectLegacyCmd                `cmd:""`
	AddOrUpdateRepoInOrg                    TeamsAddOrUpdateRepoInOrgCmd                    `cmd:""`
	AddOrUpdateRepoLegacy                   TeamsAddOrUpdateRepoLegacyCmd                   `cmd:""`
	CheckManagesRepoInOrg                   TeamsCheckManagesRepoInOrgCmd                   `cmd:""`
	CheckManagesRepoLegacy                  TeamsCheckManagesRepoLegacyCmd                  `cmd:""`
	Create                                  TeamsCreateCmd                                  `cmd:""`
	CreateDiscussionCommentInOrg            TeamsCreateDiscussionCommentInOrgCmd            `cmd:""`
	CreateDiscussionCommentLegacy           TeamsCreateDiscussionCommentLegacyCmd           `cmd:""`
	CreateDiscussionInOrg                   TeamsCreateDiscussionInOrgCmd                   `cmd:""`
	CreateDiscussionLegacy                  TeamsCreateDiscussionLegacyCmd                  `cmd:""`
	CreateOrUpdateIdPGroupConnectionsInOrg  TeamsCreateOrUpdateIdPGroupConnectionsInOrgCmd  `cmd:""`
	CreateOrUpdateIdPGroupConnectionsLegacy TeamsCreateOrUpdateIdPGroupConnectionsLegacyCmd `cmd:""`
	DeleteDiscussionCommentInOrg            TeamsDeleteDiscussionCommentInOrgCmd            `cmd:""`
	DeleteDiscussionCommentLegacy           TeamsDeleteDiscussionCommentLegacyCmd           `cmd:""`
	DeleteDiscussionInOrg                   TeamsDeleteDiscussionInOrgCmd                   `cmd:""`
	DeleteDiscussionLegacy                  TeamsDeleteDiscussionLegacyCmd                  `cmd:""`
	DeleteInOrg                             TeamsDeleteInOrgCmd                             `cmd:""`
	DeleteLegacy                            TeamsDeleteLegacyCmd                            `cmd:""`
	GetByName                               TeamsGetByNameCmd                               `cmd:""`
	GetDiscussionCommentInOrg               TeamsGetDiscussionCommentInOrgCmd               `cmd:""`
	GetDiscussionCommentLegacy              TeamsGetDiscussionCommentLegacyCmd              `cmd:""`
	GetDiscussionInOrg                      TeamsGetDiscussionInOrgCmd                      `cmd:""`
	GetDiscussionLegacy                     TeamsGetDiscussionLegacyCmd                     `cmd:""`
	GetLegacy                               TeamsGetLegacyCmd                               `cmd:""`
	GetMemberLegacy                         TeamsGetMemberLegacyCmd                         `cmd:""`
	GetMembershipInOrg                      TeamsGetMembershipInOrgCmd                      `cmd:""`
	GetMembershipLegacy                     TeamsGetMembershipLegacyCmd                     `cmd:""`
	List                                    TeamsListCmd                                    `cmd:""`
	ListChildInOrg                          TeamsListChildInOrgCmd                          `cmd:""`
	ListChildLegacy                         TeamsListChildLegacyCmd                         `cmd:""`
	ListDiscussionCommentsInOrg             TeamsListDiscussionCommentsInOrgCmd             `cmd:""`
	ListDiscussionCommentsLegacy            TeamsListDiscussionCommentsLegacyCmd            `cmd:""`
	ListDiscussionsInOrg                    TeamsListDiscussionsInOrgCmd                    `cmd:""`
	ListDiscussionsLegacy                   TeamsListDiscussionsLegacyCmd                   `cmd:""`
	ListForAuthenticatedUser                TeamsListForAuthenticatedUserCmd                `cmd:""`
	ListIdPGroupsForLegacy                  TeamsListIdPGroupsForLegacyCmd                  `cmd:""`
	ListIdPGroupsForOrg                     TeamsListIdPGroupsForOrgCmd                     `cmd:""`
	ListIdPGroupsInOrg                      TeamsListIdPGroupsInOrgCmd                      `cmd:""`
	ListMembersInOrg                        TeamsListMembersInOrgCmd                        `cmd:""`
	ListMembersLegacy                       TeamsListMembersLegacyCmd                       `cmd:""`
	ListPendingInvitationsInOrg             TeamsListPendingInvitationsInOrgCmd             `cmd:""`
	ListPendingInvitationsLegacy            TeamsListPendingInvitationsLegacyCmd            `cmd:""`
	ListProjectsInOrg                       TeamsListProjectsInOrgCmd                       `cmd:""`
	ListProjectsLegacy                      TeamsListProjectsLegacyCmd                      `cmd:""`
	ListReposInOrg                          TeamsListReposInOrgCmd                          `cmd:""`
	ListReposLegacy                         TeamsListReposLegacyCmd                         `cmd:""`
	RemoveMemberLegacy                      TeamsRemoveMemberLegacyCmd                      `cmd:""`
	RemoveMembershipInOrg                   TeamsRemoveMembershipInOrgCmd                   `cmd:""`
	RemoveMembershipLegacy                  TeamsRemoveMembershipLegacyCmd                  `cmd:""`
	RemoveProjectInOrg                      TeamsRemoveProjectInOrgCmd                      `cmd:""`
	RemoveProjectLegacy                     TeamsRemoveProjectLegacyCmd                     `cmd:""`
	RemoveRepoInOrg                         TeamsRemoveRepoInOrgCmd                         `cmd:""`
	RemoveRepoLegacy                        TeamsRemoveRepoLegacyCmd                        `cmd:""`
	ReviewProjectInOrg                      TeamsReviewProjectInOrgCmd                      `cmd:""`
	ReviewProjectLegacy                     TeamsReviewProjectLegacyCmd                     `cmd:""`
	UpdateDiscussionCommentInOrg            TeamsUpdateDiscussionCommentInOrgCmd            `cmd:""`
	UpdateDiscussionCommentLegacy           TeamsUpdateDiscussionCommentLegacyCmd           `cmd:""`
	UpdateDiscussionInOrg                   TeamsUpdateDiscussionInOrgCmd                   `cmd:""`
	UpdateDiscussionLegacy                  TeamsUpdateDiscussionLegacyCmd                  `cmd:""`
	UpdateInOrg                             TeamsUpdateInOrgCmd                             `cmd:""`
	UpdateLegacy                            TeamsUpdateLegacyCmd                            `cmd:""`
}

type TeamsAddMemberLegacyCmd struct {
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsAddMemberLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/members/{username}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type TeamsAddOrUpdateMembershipInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Role     string `name:"role"`
	TeamSlug string `required:"" name:"team_slug"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsAddOrUpdateMembershipInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/memberships/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("username", c.Username)
	c.UpdateBody("role", c.Role)
	return c.DoRequest("PUT")
}

type TeamsAddOrUpdateMembershipLegacyCmd struct {
	Role     string `name:"role"`
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsAddOrUpdateMembershipLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/memberships/{username}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	c.UpdateBody("role", c.Role)
	return c.DoRequest("PUT")
}

type TeamsAddOrUpdateProjectInOrgCmd struct {
	Inertia    bool   `required:"" name:"inertia-preview"`
	Org        string `required:"" name:"org"`
	Permission string `name:"permission"`
	ProjectId  int64  `required:"" name:"project_id"`
	TeamSlug   string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsAddOrUpdateProjectInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type TeamsAddOrUpdateProjectLegacyCmd struct {
	Inertia    bool   `required:"" name:"inertia-preview"`
	Permission string `name:"permission"`
	ProjectId  int64  `required:"" name:"project_id"`
	TeamId     int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsAddOrUpdateProjectLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/projects/{project_id}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type TeamsAddOrUpdateRepoInOrgCmd struct {
	Org        string `required:"" name:"org"`
	Permission string `name:"permission"`
	Repo       string `required:"" name:"repo"`
	TeamSlug   string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsAddOrUpdateRepoInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/repos/{repo}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type TeamsAddOrUpdateRepoLegacyCmd struct {
	Permission string `name:"permission"`
	Repo       string `required:"" name:"repo"`
	TeamId     int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsAddOrUpdateRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/repos/{repo}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type TeamsCheckManagesRepoInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Repo     string `required:"" name:"repo"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsCheckManagesRepoInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/repos/{repo}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type TeamsCheckManagesRepoLegacyCmd struct {
	Repo   string `required:"" name:"repo"`
	TeamId int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsCheckManagesRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/repos/{repo}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type TeamsCreateCmd struct {
	Description  string   `name:"description"`
	Maintainers  []string `name:"maintainers"`
	Name         string   `required:"" name:"name"`
	Org          string   `required:"" name:"org"`
	ParentTeamId int64    `name:"parent_team_id"`
	Permission   string   `name:"permission"`
	Privacy      string   `name:"privacy"`
	RepoNames    []string `name:"repo_names"`
	internal.BaseCmd
}

func (c *TeamsCreateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams")
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("maintainers", c.Maintainers)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("parent_team_id", c.ParentTeamId)
	c.UpdateBody("permission", c.Permission)
	c.UpdateBody("privacy", c.Privacy)
	c.UpdateBody("repo_names", c.RepoNames)
	return c.DoRequest("POST")
}

type TeamsCreateDiscussionCommentInOrgCmd struct {
	Body             string `required:"" name:"body"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsCreateDiscussionCommentInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("POST")
}

type TeamsCreateDiscussionCommentLegacyCmd struct {
	Body             string `required:"" name:"body"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsCreateDiscussionCommentLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("POST")
}

type TeamsCreateDiscussionInOrgCmd struct {
	Body         string `required:"" name:"body"`
	Org          string `required:"" name:"org"`
	Private      bool   `name:"private"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	TeamSlug     string `required:"" name:"team_slug"`
	Title        string `required:"" name:"title"`
	internal.BaseCmd
}

func (c *TeamsCreateDiscussionInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("POST")
}

type TeamsCreateDiscussionLegacyCmd struct {
	Body         string `required:"" name:"body"`
	Private      bool   `name:"private"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	TeamId       int64  `required:"" name:"team_id"`
	Title        string `required:"" name:"title"`
	internal.BaseCmd
}

func (c *TeamsCreateDiscussionLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("POST")
}

type TeamsCreateOrUpdateIdPGroupConnectionsInOrgCmd struct {
	Groups   []internal.JSONObject `required:"" name:"groups"`
	Org      string                `required:"" name:"org"`
	TeamSlug string                `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsCreateOrUpdateIdPGroupConnectionsInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/team-sync/group-mappings")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateBody("groups", c.Groups)
	return c.DoRequest("PATCH")
}

type TeamsCreateOrUpdateIdPGroupConnectionsLegacyCmd struct {
	Groups []internal.JSONObject `required:"" name:"groups"`
	TeamId int64                 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsCreateOrUpdateIdPGroupConnectionsLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/team-sync/group-mappings")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateBody("groups", c.Groups)
	return c.DoRequest("PATCH")
}

type TeamsDeleteDiscussionCommentInOrgCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsDeleteDiscussionCommentInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	return c.DoRequest("DELETE")
}

type TeamsDeleteDiscussionCommentLegacyCmd struct {
	CommentNumber    int64 `required:"" name:"comment_number"`
	DiscussionNumber int64 `required:"" name:"discussion_number"`
	TeamId           int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsDeleteDiscussionCommentLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	return c.DoRequest("DELETE")
}

type TeamsDeleteDiscussionInOrgCmd struct {
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsDeleteDiscussionInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	return c.DoRequest("DELETE")
}

type TeamsDeleteDiscussionLegacyCmd struct {
	DiscussionNumber int64 `required:"" name:"discussion_number"`
	TeamId           int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsDeleteDiscussionLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	return c.DoRequest("DELETE")
}

type TeamsDeleteInOrgCmd struct {
	Org      string `required:"" name:"org"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsDeleteInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	return c.DoRequest("DELETE")
}

type TeamsDeleteLegacyCmd struct {
	TeamId int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsDeleteLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}")
	c.UpdateURLPath("team_id", c.TeamId)
	return c.DoRequest("DELETE")
}

type TeamsGetByNameCmd struct {
	Org      string `required:"" name:"org"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsGetByNameCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	return c.DoRequest("GET")
}

type TeamsGetDiscussionCommentInOrgCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsGetDiscussionCommentInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsGetDiscussionCommentLegacyCmd struct {
	CommentNumber    int64 `required:"" name:"comment_number"`
	DiscussionNumber int64 `required:"" name:"discussion_number"`
	SquirrelGirl     bool  `name:"squirrel-girl-preview"`
	TeamId           int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsGetDiscussionCommentLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsGetDiscussionInOrgCmd struct {
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsGetDiscussionInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsGetDiscussionLegacyCmd struct {
	DiscussionNumber int64 `required:"" name:"discussion_number"`
	SquirrelGirl     bool  `name:"squirrel-girl-preview"`
	TeamId           int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsGetDiscussionLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsGetLegacyCmd struct {
	TeamId int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsGetLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}")
	c.UpdateURLPath("team_id", c.TeamId)
	return c.DoRequest("GET")
}

type TeamsGetMemberLegacyCmd struct {
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsGetMemberLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/members/{username}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type TeamsGetMembershipInOrgCmd struct {
	Org      string `required:"" name:"org"`
	TeamSlug string `required:"" name:"team_slug"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsGetMembershipInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/memberships/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type TeamsGetMembershipLegacyCmd struct {
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsGetMembershipLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/memberships/{username}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type TeamsListChildInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListChildInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/teams")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListChildLegacyCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	TeamId  int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListChildLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/teams")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListCmd struct {
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *TeamsListCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListDiscussionCommentsInOrgCmd struct {
	Direction        string `name:"direction"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	Page             int64  `name:"page"`
	PerPage          int64  `name:"per_page"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListDiscussionCommentsInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsListDiscussionCommentsLegacyCmd struct {
	Direction        string `name:"direction"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Page             int64  `name:"page"`
	PerPage          int64  `name:"per_page"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListDiscussionCommentsLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsListDiscussionsInOrgCmd struct {
	Direction    string `name:"direction"`
	Org          string `required:"" name:"org"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	TeamSlug     string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListDiscussionsInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsListDiscussionsLegacyCmd struct {
	Direction    string `name:"direction"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	TeamId       int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListDiscussionsLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type TeamsListForAuthenticatedUserCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *TeamsListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/teams")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListIdPGroupsForLegacyCmd struct {
	TeamId int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListIdPGroupsForLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/team-sync/group-mappings")
	c.UpdateURLPath("team_id", c.TeamId)
	return c.DoRequest("GET")
}

type TeamsListIdPGroupsForOrgCmd struct {
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *TeamsListIdPGroupsForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/team-sync/groups")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListIdPGroupsInOrgCmd struct {
	Org      string `required:"" name:"org"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListIdPGroupsInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/team-sync/group-mappings")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	return c.DoRequest("GET")
}

type TeamsListMembersInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Role     string `name:"role"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListMembersInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/members")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLQuery("role", c.Role)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListMembersLegacyCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Role    string `name:"role"`
	TeamId  int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListMembersLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/members")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("role", c.Role)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListPendingInvitationsInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListPendingInvitationsInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/invitations")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListPendingInvitationsLegacyCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	TeamId  int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListPendingInvitationsLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/invitations")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListProjectsInOrgCmd struct {
	Inertia  bool   `required:"" name:"inertia-preview"`
	Org      string `required:"" name:"org"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListProjectsInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/projects")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type TeamsListProjectsLegacyCmd struct {
	Inertia bool  `required:"" name:"inertia-preview"`
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	TeamId  int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListProjectsLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/projects")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type TeamsListReposInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsListReposInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/repos")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListReposLegacyCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	TeamId  int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsListReposLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/repos")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsRemoveMemberLegacyCmd struct {
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsRemoveMemberLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/members/{username}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type TeamsRemoveMembershipInOrgCmd struct {
	Org      string `required:"" name:"org"`
	TeamSlug string `required:"" name:"team_slug"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsRemoveMembershipInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/memberships/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type TeamsRemoveMembershipLegacyCmd struct {
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *TeamsRemoveMembershipLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/memberships/{username}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type TeamsRemoveProjectInOrgCmd struct {
	Org       string `required:"" name:"org"`
	ProjectId int64  `required:"" name:"project_id"`
	TeamSlug  string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsRemoveProjectInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("project_id", c.ProjectId)
	return c.DoRequest("DELETE")
}

type TeamsRemoveProjectLegacyCmd struct {
	ProjectId int64 `required:"" name:"project_id"`
	TeamId    int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsRemoveProjectLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/projects/{project_id}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("project_id", c.ProjectId)
	return c.DoRequest("DELETE")
}

type TeamsRemoveRepoInOrgCmd struct {
	Org      string `required:"" name:"org"`
	Repo     string `required:"" name:"repo"`
	TeamSlug string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsRemoveRepoInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/repos/{repo}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type TeamsRemoveRepoLegacyCmd struct {
	Repo   string `required:"" name:"repo"`
	TeamId int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsRemoveRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/repos/{repo}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type TeamsReviewProjectInOrgCmd struct {
	Inertia   bool   `required:"" name:"inertia-preview"`
	Org       string `required:"" name:"org"`
	ProjectId int64  `required:"" name:"project_id"`
	TeamSlug  string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsReviewProjectInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type TeamsReviewProjectLegacyCmd struct {
	Inertia   bool  `required:"" name:"inertia-preview"`
	ProjectId int64 `required:"" name:"project_id"`
	TeamId    int64 `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsReviewProjectLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/projects/{project_id}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type TeamsUpdateDiscussionCommentInOrgCmd struct {
	Body             string `required:"" name:"body"`
	CommentNumber    int64  `required:"" name:"comment_number"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsUpdateDiscussionCommentInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type TeamsUpdateDiscussionCommentLegacyCmd struct {
	Body             string `required:"" name:"body"`
	CommentNumber    int64  `required:"" name:"comment_number"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsUpdateDiscussionCommentLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type TeamsUpdateDiscussionInOrgCmd struct {
	Body             string `name:"body"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	Title            string `name:"title"`
	internal.BaseCmd
}

func (c *TeamsUpdateDiscussionInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("PATCH")
}

type TeamsUpdateDiscussionLegacyCmd struct {
	Body             string `name:"body"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	SquirrelGirl     bool   `name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	Title            string `name:"title"`
	internal.BaseCmd
}

func (c *TeamsUpdateDiscussionLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("PATCH")
}

type TeamsUpdateInOrgCmd struct {
	Description  string `name:"description"`
	Name         string `required:"" name:"name"`
	Org          string `required:"" name:"org"`
	ParentTeamId int64  `name:"parent_team_id"`
	Permission   string `name:"permission"`
	Privacy      string `name:"privacy"`
	TeamSlug     string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *TeamsUpdateInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("parent_team_id", c.ParentTeamId)
	c.UpdateBody("permission", c.Permission)
	c.UpdateBody("privacy", c.Privacy)
	return c.DoRequest("PATCH")
}

type TeamsUpdateLegacyCmd struct {
	Description  string `name:"description"`
	Name         string `required:"" name:"name"`
	ParentTeamId int64  `name:"parent_team_id"`
	Permission   string `name:"permission"`
	Privacy      string `name:"privacy"`
	TeamId       int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *TeamsUpdateLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("parent_team_id", c.ParentTeamId)
	c.UpdateBody("permission", c.Permission)
	c.UpdateBody("privacy", c.Privacy)
	return c.DoRequest("PATCH")
}
