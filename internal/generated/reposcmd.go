// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import (
	"github.com/octo-cli/octo-cli/internal"
)

type ReposCmd struct {
	AcceptInvitation                                   ReposAcceptInvitationCmd                                   `cmd:""`
	AddCollaborator                                    ReposAddCollaboratorCmd                                    `cmd:""`
	AddDeployKey                                       ReposAddDeployKeyCmd                                       `cmd:""`
	AddProtectedBranchAdminEnforcement                 ReposAddProtectedBranchAdminEnforcementCmd                 `cmd:""`
	AddProtectedBranchAppRestrictions                  ReposAddProtectedBranchAppRestrictionsCmd                  `cmd:""`
	AddProtectedBranchRequiredSignatures               ReposAddProtectedBranchRequiredSignaturesCmd               `cmd:""`
	AddProtectedBranchRequiredStatusChecksContexts     ReposAddProtectedBranchRequiredStatusChecksContextsCmd     `cmd:""`
	AddProtectedBranchTeamRestrictions                 ReposAddProtectedBranchTeamRestrictionsCmd                 `cmd:""`
	AddProtectedBranchUserRestrictions                 ReposAddProtectedBranchUserRestrictionsCmd                 `cmd:""`
	CheckCollaborator                                  ReposCheckCollaboratorCmd                                  `cmd:""`
	CheckVulnerabilityAlerts                           ReposCheckVulnerabilityAlertsCmd                           `cmd:""`
	CompareCommits                                     ReposCompareCommitsCmd                                     `cmd:""`
	CreateCommitComment                                ReposCreateCommitCommentCmd                                `cmd:""`
	CreateDeployment                                   ReposCreateDeploymentCmd                                   `cmd:""`
	CreateDeploymentStatus                             ReposCreateDeploymentStatusCmd                             `cmd:""`
	CreateDispatchEvent                                ReposCreateDispatchEventCmd                                `cmd:""`
	CreateForAuthenticatedUser                         ReposCreateForAuthenticatedUserCmd                         `cmd:""`
	CreateFork                                         ReposCreateForkCmd                                         `cmd:""`
	CreateHook                                         ReposCreateHookCmd                                         `cmd:""`
	CreateInOrg                                        ReposCreateInOrgCmd                                        `cmd:""`
	CreateOrUpdateFile                                 ReposCreateOrUpdateFileCmd                                 `cmd:""`
	CreateRelease                                      ReposCreateReleaseCmd                                      `cmd:""`
	CreateStatus                                       ReposCreateStatusCmd                                       `cmd:""`
	CreateUsingTemplate                                ReposCreateUsingTemplateCmd                                `cmd:""`
	DeclineInvitation                                  ReposDeclineInvitationCmd                                  `cmd:""`
	Delete                                             ReposDeleteCmd                                             `cmd:""`
	DeleteCommitComment                                ReposDeleteCommitCommentCmd                                `cmd:""`
	DeleteDeployment                                   ReposDeleteDeploymentCmd                                   `cmd:""`
	DeleteDownload                                     ReposDeleteDownloadCmd                                     `cmd:""`
	DeleteFile                                         ReposDeleteFileCmd                                         `cmd:""`
	DeleteHook                                         ReposDeleteHookCmd                                         `cmd:""`
	DeleteInvitation                                   ReposDeleteInvitationCmd                                   `cmd:""`
	DeleteRelease                                      ReposDeleteReleaseCmd                                      `cmd:""`
	DeleteReleaseAsset                                 ReposDeleteReleaseAssetCmd                                 `cmd:""`
	DisableAutomatedSecurityFixes                      ReposDisableAutomatedSecurityFixesCmd                      `cmd:""`
	DisablePagesSite                                   ReposDisablePagesSiteCmd                                   `cmd:""`
	DisableVulnerabilityAlerts                         ReposDisableVulnerabilityAlertsCmd                         `cmd:""`
	EnableAutomatedSecurityFixes                       ReposEnableAutomatedSecurityFixesCmd                       `cmd:""`
	EnablePagesSite                                    ReposEnablePagesSiteCmd                                    `cmd:""`
	EnableVulnerabilityAlerts                          ReposEnableVulnerabilityAlertsCmd                          `cmd:""`
	Get                                                ReposGetCmd                                                `cmd:""`
	GetAllTopics                                       ReposGetAllTopicsCmd                                       `cmd:""`
	GetAppsWithAccessToProtectedBranch                 ReposGetAppsWithAccessToProtectedBranchCmd                 `cmd:""`
	GetArchiveLink                                     ReposGetArchiveLinkCmd                                     `cmd:""`
	GetBranch                                          ReposGetBranchCmd                                          `cmd:""`
	GetBranchProtection                                ReposGetBranchProtectionCmd                                `cmd:""`
	GetClones                                          ReposGetClonesCmd                                          `cmd:""`
	GetCodeFrequencyStats                              ReposGetCodeFrequencyStatsCmd                              `cmd:""`
	GetCollaboratorPermissionLevel                     ReposGetCollaboratorPermissionLevelCmd                     `cmd:""`
	GetCombinedStatusForRef                            ReposGetCombinedStatusForRefCmd                            `cmd:""`
	GetCommit                                          ReposGetCommitCmd                                          `cmd:""`
	GetCommitActivityStats                             ReposGetCommitActivityStatsCmd                             `cmd:""`
	GetCommitComment                                   ReposGetCommitCommentCmd                                   `cmd:""`
	GetContents                                        ReposGetContentsCmd                                        `cmd:""`
	GetContributorsStats                               ReposGetContributorsStatsCmd                               `cmd:""`
	GetDeployKey                                       ReposGetDeployKeyCmd                                       `cmd:""`
	GetDeployment                                      ReposGetDeploymentCmd                                      `cmd:""`
	GetDeploymentStatus                                ReposGetDeploymentStatusCmd                                `cmd:""`
	GetDownload                                        ReposGetDownloadCmd                                        `cmd:""`
	GetHook                                            ReposGetHookCmd                                            `cmd:""`
	GetLatestPagesBuild                                ReposGetLatestPagesBuildCmd                                `cmd:""`
	GetLatestRelease                                   ReposGetLatestReleaseCmd                                   `cmd:""`
	GetPages                                           ReposGetPagesCmd                                           `cmd:""`
	GetPagesBuild                                      ReposGetPagesBuildCmd                                      `cmd:""`
	GetParticipationStats                              ReposGetParticipationStatsCmd                              `cmd:""`
	GetProtectedBranchAdminEnforcement                 ReposGetProtectedBranchAdminEnforcementCmd                 `cmd:""`
	GetProtectedBranchPullRequestReviewEnforcement     ReposGetProtectedBranchPullRequestReviewEnforcementCmd     `cmd:""`
	GetProtectedBranchRequiredSignatures               ReposGetProtectedBranchRequiredSignaturesCmd               `cmd:""`
	GetProtectedBranchRequiredStatusChecks             ReposGetProtectedBranchRequiredStatusChecksCmd             `cmd:""`
	GetProtectedBranchRestrictions                     ReposGetProtectedBranchRestrictionsCmd                     `cmd:""`
	GetPunchCardStats                                  ReposGetPunchCardStatsCmd                                  `cmd:""`
	GetReadme                                          ReposGetReadmeCmd                                          `cmd:""`
	GetRelease                                         ReposGetReleaseCmd                                         `cmd:""`
	GetReleaseAsset                                    ReposGetReleaseAssetCmd                                    `cmd:""`
	GetReleaseByTag                                    ReposGetReleaseByTagCmd                                    `cmd:""`
	GetTeamsWithAccessToProtectedBranch                ReposGetTeamsWithAccessToProtectedBranchCmd                `cmd:""`
	GetTopPaths                                        ReposGetTopPathsCmd                                        `cmd:""`
	GetTopReferrers                                    ReposGetTopReferrersCmd                                    `cmd:""`
	GetUsersWithAccessToProtectedBranch                ReposGetUsersWithAccessToProtectedBranchCmd                `cmd:""`
	GetViews                                           ReposGetViewsCmd                                           `cmd:""`
	ListAssetsForRelease                               ReposListAssetsForReleaseCmd                               `cmd:""`
	ListBranches                                       ReposListBranchesCmd                                       `cmd:""`
	ListBranchesForHeadCommit                          ReposListBranchesForHeadCommitCmd                          `cmd:""`
	ListCollaborators                                  ReposListCollaboratorsCmd                                  `cmd:""`
	ListCommentsForCommit                              ReposListCommentsForCommitCmd                              `cmd:""`
	ListCommitComments                                 ReposListCommitCommentsCmd                                 `cmd:""`
	ListCommits                                        ReposListCommitsCmd                                        `cmd:""`
	ListContributors                                   ReposListContributorsCmd                                   `cmd:""`
	ListDeployKeys                                     ReposListDeployKeysCmd                                     `cmd:""`
	ListDeploymentStatuses                             ReposListDeploymentStatusesCmd                             `cmd:""`
	ListDeployments                                    ReposListDeploymentsCmd                                    `cmd:""`
	ListDownloads                                      ReposListDownloadsCmd                                      `cmd:""`
	ListForAuthenticatedUser                           ReposListForAuthenticatedUserCmd                           `cmd:""`
	ListForOrg                                         ReposListForOrgCmd                                         `cmd:""`
	ListForUser                                        ReposListForUserCmd                                        `cmd:""`
	ListForks                                          ReposListForksCmd                                          `cmd:""`
	ListHooks                                          ReposListHooksCmd                                          `cmd:""`
	ListInvitations                                    ReposListInvitationsCmd                                    `cmd:""`
	ListInvitationsForAuthenticatedUser                ReposListInvitationsForAuthenticatedUserCmd                `cmd:""`
	ListLanguages                                      ReposListLanguagesCmd                                      `cmd:""`
	ListPagesBuilds                                    ReposListPagesBuildsCmd                                    `cmd:""`
	ListProtectedBranchRequiredStatusChecksContexts    ReposListProtectedBranchRequiredStatusChecksContextsCmd    `cmd:""`
	ListPublic                                         ReposListPublicCmd                                         `cmd:""`
	ListPullRequestsAssociatedWithCommit               ReposListPullRequestsAssociatedWithCommitCmd               `cmd:""`
	ListReleases                                       ReposListReleasesCmd                                       `cmd:""`
	ListStatusesForRef                                 ReposListStatusesForRefCmd                                 `cmd:""`
	ListTags                                           ReposListTagsCmd                                           `cmd:""`
	ListTeams                                          ReposListTeamsCmd                                          `cmd:""`
	Merge                                              ReposMergeCmd                                              `cmd:""`
	PingHook                                           ReposPingHookCmd                                           `cmd:""`
	RemoveBranchProtection                             ReposRemoveBranchProtectionCmd                             `cmd:""`
	RemoveCollaborator                                 ReposRemoveCollaboratorCmd                                 `cmd:""`
	RemoveDeployKey                                    ReposRemoveDeployKeyCmd                                    `cmd:""`
	RemoveProtectedBranchAdminEnforcement              ReposRemoveProtectedBranchAdminEnforcementCmd              `cmd:""`
	RemoveProtectedBranchAppRestrictions               ReposRemoveProtectedBranchAppRestrictionsCmd               `cmd:""`
	RemoveProtectedBranchPullRequestReviewEnforcement  ReposRemoveProtectedBranchPullRequestReviewEnforcementCmd  `cmd:""`
	RemoveProtectedBranchRequiredSignatures            ReposRemoveProtectedBranchRequiredSignaturesCmd            `cmd:""`
	RemoveProtectedBranchRequiredStatusChecks          ReposRemoveProtectedBranchRequiredStatusChecksCmd          `cmd:""`
	RemoveProtectedBranchRequiredStatusChecksContexts  ReposRemoveProtectedBranchRequiredStatusChecksContextsCmd  `cmd:""`
	RemoveProtectedBranchRestrictions                  ReposRemoveProtectedBranchRestrictionsCmd                  `cmd:""`
	RemoveProtectedBranchTeamRestrictions              ReposRemoveProtectedBranchTeamRestrictionsCmd              `cmd:""`
	RemoveProtectedBranchUserRestrictions              ReposRemoveProtectedBranchUserRestrictionsCmd              `cmd:""`
	ReplaceAllTopics                                   ReposReplaceAllTopicsCmd                                   `cmd:""`
	ReplaceProtectedBranchAppRestrictions              ReposReplaceProtectedBranchAppRestrictionsCmd              `cmd:""`
	ReplaceProtectedBranchRequiredStatusChecksContexts ReposReplaceProtectedBranchRequiredStatusChecksContextsCmd `cmd:""`
	ReplaceProtectedBranchTeamRestrictions             ReposReplaceProtectedBranchTeamRestrictionsCmd             `cmd:""`
	ReplaceProtectedBranchUserRestrictions             ReposReplaceProtectedBranchUserRestrictionsCmd             `cmd:""`
	RequestPageBuild                                   ReposRequestPageBuildCmd                                   `cmd:""`
	RetrieveCommunityProfileMetrics                    ReposRetrieveCommunityProfileMetricsCmd                    `cmd:""`
	TestPushHook                                       ReposTestPushHookCmd                                       `cmd:""`
	Transfer                                           ReposTransferCmd                                           `cmd:""`
	Update                                             ReposUpdateCmd                                             `cmd:""`
	UpdateBranchProtection                             ReposUpdateBranchProtectionCmd                             `cmd:""`
	UpdateCommitComment                                ReposUpdateCommitCommentCmd                                `cmd:""`
	UpdateHook                                         ReposUpdateHookCmd                                         `cmd:""`
	UpdateInformationAboutPagesSite                    ReposUpdateInformationAboutPagesSiteCmd                    `cmd:""`
	UpdateInvitation                                   ReposUpdateInvitationCmd                                   `cmd:""`
	UpdateProtectedBranchPullRequestReviewEnforcement  ReposUpdateProtectedBranchPullRequestReviewEnforcementCmd  `cmd:""`
	UpdateProtectedBranchRequiredStatusChecks          ReposUpdateProtectedBranchRequiredStatusChecksCmd          `cmd:""`
	UpdateRelease                                      ReposUpdateReleaseCmd                                      `cmd:""`
	UpdateReleaseAsset                                 ReposUpdateReleaseAssetCmd                                 `cmd:""`
	UploadReleaseAsset                                 ReposUploadReleaseAssetCmd                                 `cmd:""`
}

type ReposAcceptInvitationCmd struct {
	InvitationId int64 `required:"" name:"invitation_id"`
	internal.BaseCmd
}

func (c *ReposAcceptInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations/{invitation_id}")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("PATCH")
}

type ReposAddCollaboratorCmd struct {
	Permission string `name:"permission"`
	Repo       string `required:"" name:"repo"`
	Username   string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ReposAddCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type ReposAddDeployKeyCmd struct {
	Key      string `required:"" name:"key"`
	ReadOnly bool   `name:"read_only"`
	Repo     string `required:"" name:"repo"`
	Title    string `name:"title"`
	internal.BaseCmd
}

func (c *ReposAddDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("key", c.Key)
	c.UpdateBody("read_only", c.ReadOnly)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchAdminEnforcementCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposAddProtectedBranchAdminEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/enforce_admins")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchAppRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposAddProtectedBranchAppRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchRequiredSignaturesCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	Zzzax  bool   `required:"" name:"zzzax-preview"`
	internal.BaseCmd
}

func (c *ReposAddProtectedBranchRequiredSignaturesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_signatures")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchRequiredStatusChecksContextsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposAddProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchTeamRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposAddProtectedBranchTeamRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchUserRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposAddProtectedBranchUserRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposCheckCollaboratorCmd struct {
	Repo     string `required:"" name:"repo"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ReposCheckCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposCheckVulnerabilityAlertsCmd struct {
	Dorian bool   `required:"" name:"dorian-preview"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposCheckVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/vulnerability-alerts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("dorian", c.Dorian)
	return c.DoRequest("GET")
}

type ReposCompareCommitsCmd struct {
	Base string `required:"" name:"base"`
	Head string `required:"" name:"head"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposCompareCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/compare/{base}...{head}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("base", c.Base)
	c.UpdateURLPath("head", c.Head)
	return c.DoRequest("GET")
}

type ReposCreateCommitCommentCmd struct {
	Body      string `required:"" name:"body"`
	CommitSha string `required:"" name:"commit_sha"`
	Line      int64  `name:"line"`
	Path      string `name:"path"`
	Position  int64  `name:"position"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposCreateCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/comments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("line", c.Line)
	c.UpdateBody("path", c.Path)
	c.UpdateBody("position", c.Position)
	return c.DoRequest("POST")
}

type ReposCreateDeploymentCmd struct {
	AntMan                bool     `name:"ant-man-preview"`
	AutoMerge             bool     `name:"auto_merge"`
	Description           string   `name:"description"`
	Environment           string   `name:"environment"`
	Payload               string   `name:"payload"`
	ProductionEnvironment bool     `name:"production_environment"`
	Ref                   string   `required:"" name:"ref"`
	Repo                  string   `required:"" name:"repo"`
	RequiredContexts      []string `name:"required_contexts"`
	Task                  string   `name:"task"`
	TransientEnvironment  bool     `name:"transient_environment"`
	internal.BaseCmd
}

func (c *ReposCreateDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateBody("auto_merge", c.AutoMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("environment", c.Environment)
	c.UpdateBody("payload", c.Payload)
	c.UpdateBody("production_environment", c.ProductionEnvironment)
	c.UpdateBody("ref", c.Ref)
	c.UpdateBody("required_contexts", c.RequiredContexts)
	c.UpdateBody("task", c.Task)
	c.UpdateBody("transient_environment", c.TransientEnvironment)
	return c.DoRequest("POST")
}

type ReposCreateDeploymentStatusCmd struct {
	AntMan         bool   `name:"ant-man-preview"`
	AutoInactive   bool   `name:"auto_inactive"`
	DeploymentId   int64  `required:"" name:"deployment_id"`
	Description    string `name:"description"`
	Environment    string `name:"environment"`
	EnvironmentUrl string `name:"environment_url"`
	Flash          bool   `name:"flash-preview"`
	LogUrl         string `name:"log_url"`
	Repo           string `required:"" name:"repo"`
	State          string `required:"" name:"state"`
	TargetUrl      string `name:"target_url"`
	internal.BaseCmd
}

func (c *ReposCreateDeploymentStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}/statuses")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateBody("auto_inactive", c.AutoInactive)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("environment", c.Environment)
	c.UpdateBody("environment_url", c.EnvironmentUrl)
	c.UpdateBody("log_url", c.LogUrl)
	c.UpdateBody("state", c.State)
	c.UpdateBody("target_url", c.TargetUrl)
	return c.DoRequest("POST")
}

type ReposCreateDispatchEventCmd struct {
	ClientPayload internal.JSONObject `name:"client_payload"`
	EventType     string              `name:"event_type"`
	Repo          string              `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposCreateDispatchEventCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/dispatches")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("client_payload", c.ClientPayload)
	c.UpdateBody("event_type", c.EventType)
	return c.DoRequest("POST")
}

type ReposCreateForAuthenticatedUserCmd struct {
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	AutoInit            bool   `name:"auto_init"`
	Baptiste            bool   `name:"baptiste-preview"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	GitignoreTemplate   string `name:"gitignore_template"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	LicenseTemplate     string `name:"license_template"`
	Name                string `required:"" name:"name"`
	Nebula              bool   `name:"nebula-preview"`
	Private             bool   `name:"private"`
	TeamId              int64  `name:"team_id"`
	Visibility          string `name:"visibility"`
	internal.BaseCmd
}

func (c *ReposCreateForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repos")
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("auto_init", c.AutoInit)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("gitignore_template", c.GitignoreTemplate)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("license_template", c.LicenseTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("team_id", c.TeamId)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("POST")
}

type ReposCreateForkCmd struct {
	Organization string `name:"organization"`
	Repo         string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposCreateForkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/forks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("organization", c.Organization)
	return c.DoRequest("POST")
}

type ReposCreateHookCmd struct {
	Active            bool     `name:"active"`
	ConfigContentType string   `name:"config.content_type"`
	ConfigInsecureSsl string   `name:"config.insecure_ssl"`
	ConfigSecret      string   `name:"config.secret"`
	ConfigUrl         string   `required:"" name:"config.url"`
	Events            []string `name:"events"`
	Name              string   `name:"name"`
	Repo              string   `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposCreateHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("config.content_type", c.ConfigContentType)
	c.UpdateBody("config.insecure_ssl", c.ConfigInsecureSsl)
	c.UpdateBody("config.secret", c.ConfigSecret)
	c.UpdateBody("config.url", c.ConfigUrl)
	c.UpdateBody("events", c.Events)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type ReposCreateInOrgCmd struct {
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	AutoInit            bool   `name:"auto_init"`
	Baptiste            bool   `name:"baptiste-preview"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	GitignoreTemplate   string `name:"gitignore_template"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	LicenseTemplate     string `name:"license_template"`
	Name                string `required:"" name:"name"`
	Nebula              bool   `name:"nebula-preview"`
	Org                 string `required:"" name:"org"`
	Private             bool   `name:"private"`
	TeamId              int64  `name:"team_id"`
	Visibility          string `name:"visibility"`
	internal.BaseCmd
}

func (c *ReposCreateInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/repos")
	c.UpdateURLPath("org", c.Org)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("auto_init", c.AutoInit)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("gitignore_template", c.GitignoreTemplate)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("license_template", c.LicenseTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("team_id", c.TeamId)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("POST")
}

type ReposCreateOrUpdateFileCmd struct {
	AuthorEmail    string `name:"author.email"`
	AuthorName     string `name:"author.name"`
	Branch         string `name:"branch"`
	CommitterEmail string `name:"committer.email"`
	CommitterName  string `name:"committer.name"`
	Content        string `required:"" name:"content"`
	Message        string `required:"" name:"message"`
	Path           string `required:"" name:"path"`
	Repo           string `required:"" name:"repo"`
	Sha            string `name:"sha"`
	internal.BaseCmd
}

func (c *ReposCreateOrUpdateFileCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contents/{path}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("path", c.Path)
	c.UpdateBody("author.email", c.AuthorEmail)
	c.UpdateBody("author.name", c.AuthorName)
	c.UpdateBody("branch", c.Branch)
	c.UpdateBody("committer.email", c.CommitterEmail)
	c.UpdateBody("committer.name", c.CommitterName)
	c.UpdateBody("content", c.Content)
	c.UpdateBody("message", c.Message)
	c.UpdateBody("sha", c.Sha)
	return c.DoRequest("PUT")
}

type ReposCreateReleaseCmd struct {
	Body            string `name:"body"`
	Draft           bool   `name:"draft"`
	Name            string `name:"name"`
	Prerelease      bool   `name:"prerelease"`
	Repo            string `required:"" name:"repo"`
	TagName         string `required:"" name:"tag_name"`
	TargetCommitish string `name:"target_commitish"`
	internal.BaseCmd
}

func (c *ReposCreateReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("draft", c.Draft)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("prerelease", c.Prerelease)
	c.UpdateBody("tag_name", c.TagName)
	c.UpdateBody("target_commitish", c.TargetCommitish)
	return c.DoRequest("POST")
}

type ReposCreateStatusCmd struct {
	Context     string `name:"context"`
	Description string `name:"description"`
	Repo        string `required:"" name:"repo"`
	Sha         string `required:"" name:"sha"`
	State       string `required:"" name:"state"`
	TargetUrl   string `name:"target_url"`
	internal.BaseCmd
}

func (c *ReposCreateStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/statuses/{sha}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("sha", c.Sha)
	c.UpdateBody("context", c.Context)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("state", c.State)
	c.UpdateBody("target_url", c.TargetUrl)
	return c.DoRequest("POST")
}

type ReposCreateUsingTemplateCmd struct {
	Baptiste      bool   `required:"" name:"baptiste-preview"`
	Description   string `name:"description"`
	Name          string `required:"" name:"name"`
	Owner         string `name:"owner"`
	Private       bool   `name:"private"`
	TemplateOwner string `required:"" name:"template_owner"`
	TemplateRepo  string `required:"" name:"template_repo"`
	internal.BaseCmd
}

func (c *ReposCreateUsingTemplateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{template_owner}/{template_repo}/generate")
	c.UpdateURLPath("template_owner", c.TemplateOwner)
	c.UpdateURLPath("template_repo", c.TemplateRepo)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("owner", c.Owner)
	c.UpdateBody("private", c.Private)
	return c.DoRequest("POST")
}

type ReposDeclineInvitationCmd struct {
	InvitationId int64 `required:"" name:"invitation_id"`
	internal.BaseCmd
}

func (c *ReposDeclineInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations/{invitation_id}")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("DELETE")
}

type ReposDeleteCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteCommitCommentCmd struct {
	CommentId int64  `required:"" name:"comment_id"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	return c.DoRequest("DELETE")
}

type ReposDeleteDeploymentCmd struct {
	DeploymentId int64  `required:"" name:"deployment_id"`
	Repo         string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	return c.DoRequest("DELETE")
}

type ReposDeleteDownloadCmd struct {
	DownloadId int64  `required:"" name:"download_id"`
	Repo       string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteDownloadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/downloads/{download_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("download_id", c.DownloadId)
	return c.DoRequest("DELETE")
}

type ReposDeleteFileCmd struct {
	AuthorEmail    string `name:"author.email"`
	AuthorName     string `name:"author.name"`
	Branch         string `name:"branch"`
	CommitterEmail string `name:"committer.email"`
	CommitterName  string `name:"committer.name"`
	Message        string `required:"" name:"message"`
	Path           string `required:"" name:"path"`
	Repo           string `required:"" name:"repo"`
	Sha            string `required:"" name:"sha"`
	internal.BaseCmd
}

func (c *ReposDeleteFileCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contents/{path}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("path", c.Path)
	c.UpdateBody("author.email", c.AuthorEmail)
	c.UpdateBody("author.name", c.AuthorName)
	c.UpdateBody("branch", c.Branch)
	c.UpdateBody("committer.email", c.CommitterEmail)
	c.UpdateBody("committer.name", c.CommitterName)
	c.UpdateBody("message", c.Message)
	c.UpdateBody("sha", c.Sha)
	return c.DoRequest("DELETE")
}

type ReposDeleteHookCmd struct {
	HookId int64  `required:"" name:"hook_id"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("DELETE")
}

type ReposDeleteInvitationCmd struct {
	InvitationId int64  `required:"" name:"invitation_id"`
	Repo         string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/invitations/{invitation_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("DELETE")
}

type ReposDeleteReleaseAssetCmd struct {
	AssetId int64  `required:"" name:"asset_id"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/assets/{asset_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("asset_id", c.AssetId)
	return c.DoRequest("DELETE")
}

type ReposDeleteReleaseCmd struct {
	ReleaseId int64  `required:"" name:"release_id"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDeleteReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	return c.DoRequest("DELETE")
}

type ReposDisableAutomatedSecurityFixesCmd struct {
	London bool   `required:"" name:"london-preview"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDisableAutomatedSecurityFixesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/automated-security-fixes")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("london", c.London)
	return c.DoRequest("DELETE")
}

type ReposDisablePagesSiteCmd struct {
	Repo       string `required:"" name:"repo"`
	Switcheroo bool   `required:"" name:"switcheroo-preview"`
	internal.BaseCmd
}

func (c *ReposDisablePagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("switcheroo", c.Switcheroo)
	return c.DoRequest("DELETE")
}

type ReposDisableVulnerabilityAlertsCmd struct {
	Dorian bool   `required:"" name:"dorian-preview"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposDisableVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/vulnerability-alerts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("dorian", c.Dorian)
	return c.DoRequest("DELETE")
}

type ReposEnableAutomatedSecurityFixesCmd struct {
	London bool   `required:"" name:"london-preview"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposEnableAutomatedSecurityFixesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/automated-security-fixes")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("london", c.London)
	return c.DoRequest("PUT")
}

type ReposEnablePagesSiteCmd struct {
	Repo         string `required:"" name:"repo"`
	SourceBranch string `name:"source.branch"`
	SourcePath   string `name:"source.path"`
	Switcheroo   bool   `required:"" name:"switcheroo-preview"`
	internal.BaseCmd
}

func (c *ReposEnablePagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("switcheroo", c.Switcheroo)
	c.UpdateBody("source.branch", c.SourceBranch)
	c.UpdateBody("source.path", c.SourcePath)
	return c.DoRequest("POST")
}

type ReposEnableVulnerabilityAlertsCmd struct {
	Dorian bool   `required:"" name:"dorian-preview"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposEnableVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/vulnerability-alerts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("dorian", c.Dorian)
	return c.DoRequest("PUT")
}

type ReposGetAllTopicsCmd struct {
	Mercy bool   `required:"" name:"mercy-preview"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetAllTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/topics")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("mercy", c.Mercy)
	return c.DoRequest("GET")
}

type ReposGetAppsWithAccessToProtectedBranchCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetAppsWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetArchiveLinkCmd struct {
	ArchiveFormat string `required:"" name:"archive_format"`
	Ref           string `required:"" name:"ref"`
	Repo          string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetArchiveLinkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/{archive_format}/{ref}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("archive_format", c.ArchiveFormat)
	c.UpdateURLPath("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetBranchCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetBranchProtectionCmd struct {
	Branch   string `required:"" name:"branch"`
	LukeCage bool   `name:"luke-cage-preview"`
	Repo     string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	return c.DoRequest("GET")
}

type ReposGetClonesCmd struct {
	Per  string `name:"per"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetClonesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/clones")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per", c.Per)
	return c.DoRequest("GET")
}

type ReposGetCmd struct {
	Nebula       bool   `name:"nebula-preview"`
	Repo         string `required:"" name:"repo"`
	ScarletWitch bool   `name:"scarlet-witch-preview"`
	internal.BaseCmd
}

func (c *ReposGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("scarlet-witch", c.ScarletWitch)
	return c.DoRequest("GET")
}

type ReposGetCodeFrequencyStatsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetCodeFrequencyStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/code_frequency")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCollaboratorPermissionLevelCmd struct {
	Repo     string `required:"" name:"repo"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ReposGetCollaboratorPermissionLevelCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}/permission")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposGetCombinedStatusForRefCmd struct {
	Ref  string `required:"" name:"ref"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetCombinedStatusForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{ref}/status")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetCommitActivityStatsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetCommitActivityStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/commit_activity")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCommitCmd struct {
	Ref  string `required:"" name:"ref"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{ref}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetCommitCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReposGetCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposGetContentsCmd struct {
	Path string `required:"" name:"path"`
	Ref  string `name:"ref"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetContentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contents/{path}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("path", c.Path)
	c.UpdateURLQuery("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetContributorsStatsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetContributorsStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/contributors")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetDeployKeyCmd struct {
	KeyId int64  `required:"" name:"key_id"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys/{key_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("key_id", c.KeyId)
	return c.DoRequest("GET")
}

type ReposGetDeploymentCmd struct {
	AntMan       bool   `name:"ant-man-preview"`
	DeploymentId int64  `required:"" name:"deployment_id"`
	MachineMan   bool   `name:"machine-man-preview"`
	Repo         string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposGetDeploymentStatusCmd struct {
	AntMan       bool   `name:"ant-man-preview"`
	DeploymentId int64  `required:"" name:"deployment_id"`
	Flash        bool   `name:"flash-preview"`
	MachineMan   bool   `name:"machine-man-preview"`
	Repo         string `required:"" name:"repo"`
	StatusId     int64  `required:"" name:"status_id"`
	internal.BaseCmd
}

func (c *ReposGetDeploymentStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}/statuses/{status_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdateURLPath("status_id", c.StatusId)
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposGetDownloadCmd struct {
	DownloadId int64  `required:"" name:"download_id"`
	Repo       string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetDownloadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/downloads/{download_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("download_id", c.DownloadId)
	return c.DoRequest("GET")
}

type ReposGetHookCmd struct {
	HookId int64  `required:"" name:"hook_id"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("GET")
}

type ReposGetLatestPagesBuildCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetLatestPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds/latest")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetLatestReleaseCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetLatestReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/latest")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetPagesBuildCmd struct {
	BuildId int64  `required:"" name:"build_id"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds/{build_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("build_id", c.BuildId)
	return c.DoRequest("GET")
}

type ReposGetPagesCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetPagesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetParticipationStatsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetParticipationStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/participation")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchAdminEnforcementCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetProtectedBranchAdminEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/enforce_admins")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchPullRequestReviewEnforcementCmd struct {
	Branch   string `required:"" name:"branch"`
	LukeCage bool   `name:"luke-cage-preview"`
	Repo     string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetProtectedBranchPullRequestReviewEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_pull_request_reviews")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchRequiredSignaturesCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	Zzzax  bool   `required:"" name:"zzzax-preview"`
	internal.BaseCmd
}

func (c *ReposGetProtectedBranchRequiredSignaturesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_signatures")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchRequiredStatusChecksCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetProtectedBranchRequiredStatusChecksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetProtectedBranchRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetPunchCardStatsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetPunchCardStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/punch_card")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetReadmeCmd struct {
	Ref  string `name:"ref"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetReadmeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/readme")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetReleaseAssetCmd struct {
	AssetId int64  `required:"" name:"asset_id"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/assets/{asset_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("asset_id", c.AssetId)
	return c.DoRequest("GET")
}

type ReposGetReleaseByTagCmd struct {
	Repo string `required:"" name:"repo"`
	Tag  string `required:"" name:"tag"`
	internal.BaseCmd
}

func (c *ReposGetReleaseByTagCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/tags/{tag}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("tag", c.Tag)
	return c.DoRequest("GET")
}

type ReposGetReleaseCmd struct {
	ReleaseId int64  `required:"" name:"release_id"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	return c.DoRequest("GET")
}

type ReposGetTeamsWithAccessToProtectedBranchCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetTeamsWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetTopPathsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetTopPathsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/popular/paths")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetTopReferrersCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetTopReferrersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/popular/referrers")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetUsersWithAccessToProtectedBranchCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetUsersWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetViewsCmd struct {
	Per  string `name:"per"`
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposGetViewsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/views")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per", c.Per)
	return c.DoRequest("GET")
}

type ReposListAssetsForReleaseCmd struct {
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	ReleaseId int64  `required:"" name:"release_id"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListAssetsForReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}/assets")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListBranchesCmd struct {
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Protected bool   `name:"protected"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListBranchesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("protected", c.Protected)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListBranchesForHeadCommitCmd struct {
	CommitSha string `required:"" name:"commit_sha"`
	Groot     bool   `required:"" name:"groot-preview"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListBranchesForHeadCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/branches-where-head")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdatePreview("groot", c.Groot)
	return c.DoRequest("GET")
}

type ReposListCollaboratorsCmd struct {
	Affiliation string `name:"affiliation"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Repo        string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListCollaboratorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListCommentsForCommitCmd struct {
	CommitSha    string `required:"" name:"commit_sha"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReposListCommentsForCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/comments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposListCommitCommentsCmd struct {
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReposListCommitCommentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposListCommitsCmd struct {
	Author  string `name:"author"`
	Page    int64  `name:"page"`
	Path    string `name:"path"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	Sha     string `name:"sha"`
	Since   string `name:"since"`
	Until   string `name:"until"`
	internal.BaseCmd
}

func (c *ReposListCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sha", c.Sha)
	c.UpdateURLQuery("path", c.Path)
	c.UpdateURLQuery("author", c.Author)
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("until", c.Until)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListContributorsCmd struct {
	Anon    string `name:"anon"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListContributorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contributors")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("anon", c.Anon)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListDeployKeysCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListDeployKeysCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListDeploymentStatusesCmd struct {
	AntMan       bool   `name:"ant-man-preview"`
	DeploymentId int64  `required:"" name:"deployment_id"`
	Flash        bool   `name:"flash-preview"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListDeploymentStatusesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}/statuses")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposListDeploymentsCmd struct {
	AntMan      bool   `name:"ant-man-preview"`
	Environment string `name:"environment"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Ref         string `name:"ref"`
	Repo        string `required:"" name:"repo"`
	Sha         string `name:"sha"`
	Task        string `name:"task"`
	internal.BaseCmd
}

func (c *ReposListDeploymentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sha", c.Sha)
	c.UpdateURLQuery("ref", c.Ref)
	c.UpdateURLQuery("task", c.Task)
	c.UpdateURLQuery("environment", c.Environment)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposListDownloadsCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListDownloadsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/downloads")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListForAuthenticatedUserCmd struct {
	Affiliation string `name:"affiliation"`
	Direction   string `name:"direction"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Sort        string `name:"sort"`
	Type        string `name:"type"`
	Visibility  string `name:"visibility"`
	internal.BaseCmd
}

func (c *ReposListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repos")
	c.UpdateURLQuery("visibility", c.Visibility)
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListForOrgCmd struct {
	Baptiste  bool   `name:"baptiste-preview"`
	Direction string `name:"direction"`
	Nebula    bool   `name:"nebula-preview"`
	Org       string `required:"" name:"org"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Type      string `name:"type"`
	internal.BaseCmd
}

func (c *ReposListForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/repos")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	return c.DoRequest("GET")
}

type ReposListForUserCmd struct {
	Direction string `name:"direction"`
	Nebula    bool   `name:"nebula-preview"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Type      string `name:"type"`
	Username  string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ReposListForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/repos")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("nebula", c.Nebula)
	return c.DoRequest("GET")
}

type ReposListForksCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	Sort    string `name:"sort"`
	internal.BaseCmd
}

func (c *ReposListForksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/forks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListHooksCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListHooksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListInvitationsCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListInvitationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/invitations")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListInvitationsForAuthenticatedUserCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListInvitationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListLanguagesCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListLanguagesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/languages")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListPagesBuildsCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListPagesBuildsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListProtectedBranchRequiredStatusChecksContextsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposListPublicCmd struct {
	Since int64 `name:"since"`
	internal.BaseCmd
}

func (c *ReposListPublicCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repositories")
	c.UpdateURLQuery("since", c.Since)
	return c.DoRequest("GET")
}

type ReposListPullRequestsAssociatedWithCommitCmd struct {
	CommitSha string `required:"" name:"commit_sha"`
	Groot     bool   `required:"" name:"groot-preview"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListPullRequestsAssociatedWithCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/pulls")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("groot", c.Groot)
	return c.DoRequest("GET")
}

type ReposListReleasesCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListReleasesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListStatusesForRefCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Ref     string `required:"" name:"ref"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListStatusesForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{ref}/statuses")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListTagsCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListTagsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/tags")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListTeamsCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposListTeamsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposMergeCmd struct {
	Base          string `required:"" name:"base"`
	CommitMessage string `name:"commit_message"`
	Head          string `required:"" name:"head"`
	Repo          string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposMergeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/merges")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("base", c.Base)
	c.UpdateBody("commit_message", c.CommitMessage)
	c.UpdateBody("head", c.Head)
	return c.DoRequest("POST")
}

type ReposPingHookCmd struct {
	HookId int64  `required:"" name:"hook_id"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposPingHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}/pings")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("POST")
}

type ReposRemoveBranchProtectionCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveCollaboratorCmd struct {
	Repo     string `required:"" name:"repo"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ReposRemoveCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type ReposRemoveDeployKeyCmd struct {
	KeyId int64  `required:"" name:"key_id"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys/{key_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("key_id", c.KeyId)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchAdminEnforcementCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchAdminEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/enforce_admins")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchAppRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchAppRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchPullRequestReviewEnforcementCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchPullRequestReviewEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_pull_request_reviews")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRequiredSignaturesCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	Zzzax  bool   `required:"" name:"zzzax-preview"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchRequiredSignaturesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_signatures")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRequiredStatusChecksCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchRequiredStatusChecksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRequiredStatusChecksContextsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchTeamRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchTeamRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchUserRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRemoveProtectedBranchUserRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposReplaceAllTopicsCmd struct {
	Mercy bool     `required:"" name:"mercy-preview"`
	Names []string `required:"" name:"names"`
	Repo  string   `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposReplaceAllTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/topics")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("mercy", c.Mercy)
	c.UpdateBody("names", c.Names)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchAppRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposReplaceProtectedBranchAppRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchRequiredStatusChecksContextsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposReplaceProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchTeamRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposReplaceProtectedBranchTeamRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchUserRestrictionsCmd struct {
	Branch string `required:"" name:"branch"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposReplaceProtectedBranchUserRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposRequestPageBuildCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRequestPageBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposRetrieveCommunityProfileMetricsCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposRetrieveCommunityProfileMetricsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/community/profile")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposTestPushHookCmd struct {
	HookId int64  `required:"" name:"hook_id"`
	Repo   string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposTestPushHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}/tests")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("POST")
}

type ReposTransferCmd struct {
	NewOwner string  `name:"new_owner"`
	Repo     string  `required:"" name:"repo"`
	TeamIds  []int64 `name:"team_ids"`
	internal.BaseCmd
}

func (c *ReposTransferCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/transfer")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("new_owner", c.NewOwner)
	c.UpdateBody("team_ids", c.TeamIds)
	return c.DoRequest("POST")
}

type ReposUpdateBranchProtectionCmd struct {
	AllowDeletions                                         bool     `name:"allow_deletions"`
	AllowForcePushes                                       bool     `name:"allow_force_pushes"`
	Branch                                                 string   `required:"" name:"branch"`
	EnforceAdmins                                          bool     `required:"" name:"enforce_admins"`
	LukeCage                                               bool     `name:"luke-cage-preview"`
	Repo                                                   string   `required:"" name:"repo"`
	RequiredLinearHistory                                  bool     `name:"required_linear_history"`
	RequiredPullRequestReviewsDismissStaleReviews          bool     `name:"required_pull_request_reviews.dismiss_stale_reviews"`
	RequiredPullRequestReviewsDismissalRestrictionsTeams   []string `name:"required_pull_request_reviews.dismissal_restrictions.teams"`
	RequiredPullRequestReviewsDismissalRestrictionsUsers   []string `name:"required_pull_request_reviews.dismissal_restrictions.users"`
	RequiredPullRequestReviewsRequireCodeOwnerReviews      bool     `name:"required_pull_request_reviews.require_code_owner_reviews"`
	RequiredPullRequestReviewsRequiredApprovingReviewCount int64    `name:"required_pull_request_reviews.required_approving_review_count"`
	RequiredStatusChecksContexts                           []string `required:"" name:"required_status_checks.contexts"`
	RequiredStatusChecksStrict                             bool     `required:"" name:"required_status_checks.strict"`
	RestrictionsApps                                       []string `name:"restrictions.apps"`
	RestrictionsTeams                                      []string `required:"" name:"restrictions.teams"`
	RestrictionsUsers                                      []string `required:"" name:"restrictions.users"`
	internal.BaseCmd
}

func (c *ReposUpdateBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	c.UpdateBody("allow_deletions", c.AllowDeletions)
	c.UpdateBody("allow_force_pushes", c.AllowForcePushes)
	c.UpdateBody("enforce_admins", c.EnforceAdmins)
	c.UpdateBody("required_linear_history", c.RequiredLinearHistory)
	c.UpdateBody("required_pull_request_reviews.dismiss_stale_reviews", c.RequiredPullRequestReviewsDismissStaleReviews)
	c.UpdateBody("required_pull_request_reviews.dismissal_restrictions.teams", c.RequiredPullRequestReviewsDismissalRestrictionsTeams)
	c.UpdateBody("required_pull_request_reviews.dismissal_restrictions.users", c.RequiredPullRequestReviewsDismissalRestrictionsUsers)
	c.UpdateBody("required_pull_request_reviews.require_code_owner_reviews", c.RequiredPullRequestReviewsRequireCodeOwnerReviews)
	c.UpdateBody("required_pull_request_reviews.required_approving_review_count", c.RequiredPullRequestReviewsRequiredApprovingReviewCount)
	c.UpdateBody("required_status_checks.contexts", c.RequiredStatusChecksContexts)
	c.UpdateBody("required_status_checks.strict", c.RequiredStatusChecksStrict)
	c.UpdateBody("restrictions.apps", c.RestrictionsApps)
	c.UpdateBody("restrictions.teams", c.RestrictionsTeams)
	c.UpdateBody("restrictions.users", c.RestrictionsUsers)
	return c.DoRequest("PUT")
}

type ReposUpdateCmd struct {
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	Archived            bool   `name:"archived"`
	Baptiste            bool   `name:"baptiste-preview"`
	DefaultBranch       string `name:"default_branch"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	Name                string `name:"name"`
	Nebula              bool   `name:"nebula-preview"`
	Private             bool   `name:"private"`
	Repo                string `required:"" name:"repo"`
	Visibility          string `name:"visibility"`
	internal.BaseCmd
}

func (c *ReposUpdateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("archived", c.Archived)
	c.UpdateBody("default_branch", c.DefaultBranch)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("PATCH")
}

type ReposUpdateCommitCommentCmd struct {
	Body      string `required:"" name:"body"`
	CommentId int64  `required:"" name:"comment_id"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposUpdateCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type ReposUpdateHookCmd struct {
	Active            bool     `name:"active"`
	AddEvents         []string `name:"add_events"`
	ConfigContentType string   `name:"config.content_type"`
	ConfigInsecureSsl string   `name:"config.insecure_ssl"`
	ConfigSecret      string   `name:"config.secret"`
	ConfigUrl         string   `name:"config.url"`
	Events            []string `name:"events"`
	HookId            int64    `required:"" name:"hook_id"`
	RemoveEvents      []string `name:"remove_events"`
	Repo              string   `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposUpdateHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("add_events", c.AddEvents)
	c.UpdateBody("config.content_type", c.ConfigContentType)
	c.UpdateBody("config.insecure_ssl", c.ConfigInsecureSsl)
	c.UpdateBody("config.secret", c.ConfigSecret)
	c.UpdateBody("config.url", c.ConfigUrl)
	c.UpdateBody("events", c.Events)
	c.UpdateBody("remove_events", c.RemoveEvents)
	return c.DoRequest("PATCH")
}

type ReposUpdateInformationAboutPagesSiteCmd struct {
	Cname  string `name:"cname"`
	Repo   string `required:"" name:"repo"`
	Source string `name:"source"`
	internal.BaseCmd
}

func (c *ReposUpdateInformationAboutPagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("cname", c.Cname)
	c.UpdateBody("source", c.Source)
	return c.DoRequest("PUT")
}

type ReposUpdateInvitationCmd struct {
	InvitationId int64  `required:"" name:"invitation_id"`
	Permissions  string `name:"permissions"`
	Repo         string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposUpdateInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/invitations/{invitation_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("invitation_id", c.InvitationId)
	c.UpdateBody("permissions", c.Permissions)
	return c.DoRequest("PATCH")
}

type ReposUpdateProtectedBranchPullRequestReviewEnforcementCmd struct {
	Branch                       string   `required:"" name:"branch"`
	DismissStaleReviews          bool     `name:"dismiss_stale_reviews"`
	DismissalRestrictionsTeams   []string `name:"dismissal_restrictions.teams"`
	DismissalRestrictionsUsers   []string `name:"dismissal_restrictions.users"`
	LukeCage                     bool     `name:"luke-cage-preview"`
	Repo                         string   `required:"" name:"repo"`
	RequireCodeOwnerReviews      bool     `name:"require_code_owner_reviews"`
	RequiredApprovingReviewCount int64    `name:"required_approving_review_count"`
	internal.BaseCmd
}

func (c *ReposUpdateProtectedBranchPullRequestReviewEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_pull_request_reviews")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	c.UpdateBody("dismiss_stale_reviews", c.DismissStaleReviews)
	c.UpdateBody("dismissal_restrictions.teams", c.DismissalRestrictionsTeams)
	c.UpdateBody("dismissal_restrictions.users", c.DismissalRestrictionsUsers)
	c.UpdateBody("require_code_owner_reviews", c.RequireCodeOwnerReviews)
	c.UpdateBody("required_approving_review_count", c.RequiredApprovingReviewCount)
	return c.DoRequest("PATCH")
}

type ReposUpdateProtectedBranchRequiredStatusChecksCmd struct {
	Branch   string   `required:"" name:"branch"`
	Contexts []string `name:"contexts"`
	Repo     string   `required:"" name:"repo"`
	Strict   bool     `name:"strict"`
	internal.BaseCmd
}

func (c *ReposUpdateProtectedBranchRequiredStatusChecksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateBody("contexts", c.Contexts)
	c.UpdateBody("strict", c.Strict)
	return c.DoRequest("PATCH")
}

type ReposUpdateReleaseAssetCmd struct {
	AssetId int64  `required:"" name:"asset_id"`
	Label   string `name:"label"`
	Name    string `name:"name"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposUpdateReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/assets/{asset_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("asset_id", c.AssetId)
	c.UpdateBody("label", c.Label)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("PATCH")
}

type ReposUpdateReleaseCmd struct {
	Body            string `name:"body"`
	Draft           bool   `name:"draft"`
	Name            string `name:"name"`
	Prerelease      bool   `name:"prerelease"`
	ReleaseId       int64  `required:"" name:"release_id"`
	Repo            string `required:"" name:"repo"`
	TagName         string `name:"tag_name"`
	TargetCommitish string `name:"target_commitish"`
	internal.BaseCmd
}

func (c *ReposUpdateReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("draft", c.Draft)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("prerelease", c.Prerelease)
	c.UpdateBody("tag_name", c.TagName)
	c.UpdateBody("target_commitish", c.TargetCommitish)
	return c.DoRequest("PATCH")
}

type ReposUploadReleaseAssetCmd struct {
	ContentLength string `name:"content-length" hidden:""`
	ContentType   string `name:"content-type"`
	File          string `required:"" name:"file" type:"existingfile"`
	Label         string `name:"label"`
	Name          string `name:"name"`
	ReleaseId     int64  `required:"" name:"release_id"`
	Repo          string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ReposUploadReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}/assets")
	internal.ReposUploadReleaseAssetOverride(&c.BaseCmd, c.File)
	c.AddRequestHeader("content-length", c.ContentLength)
	c.AddRequestHeader("content-type", c.ContentType)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLQuery("name", c.Name)
	c.UpdateURLQuery("label", c.Label)
	return c.DoRequest("POST")
}
