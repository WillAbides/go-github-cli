// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type ReposCmd struct {
	AcceptInvitation                     ReposAcceptInvitationCmd                     `cmd:""`
	AddAppAccessRestrictions             ReposAddAppAccessRestrictionsCmd             `cmd:""`
	AddCollaborator                      ReposAddCollaboratorCmd                      `cmd:""`
	AddStatusCheckContexts               ReposAddStatusCheckContextsCmd               `cmd:""`
	AddTeamAccessRestrictions            ReposAddTeamAccessRestrictionsCmd            `cmd:""`
	AddUserAccessRestrictions            ReposAddUserAccessRestrictionsCmd            `cmd:""`
	CheckCollaborator                    ReposCheckCollaboratorCmd                    `cmd:""`
	CheckVulnerabilityAlerts             ReposCheckVulnerabilityAlertsCmd             `cmd:""`
	CompareCommits                       ReposCompareCommitsCmd                       `cmd:""`
	CreateCommitComment                  ReposCreateCommitCommentCmd                  `cmd:""`
	CreateCommitSignatureProtection      ReposCreateCommitSignatureProtectionCmd      `cmd:""`
	CreateCommitStatus                   ReposCreateCommitStatusCmd                   `cmd:""`
	CreateDeployKey                      ReposCreateDeployKeyCmd                      `cmd:""`
	CreateDeployment                     ReposCreateDeploymentCmd                     `cmd:""`
	CreateDeploymentStatus               ReposCreateDeploymentStatusCmd               `cmd:""`
	CreateDispatchEvent                  ReposCreateDispatchEventCmd                  `cmd:""`
	CreateForAuthenticatedUser           ReposCreateForAuthenticatedUserCmd           `cmd:""`
	CreateFork                           ReposCreateForkCmd                           `cmd:""`
	CreateInOrg                          ReposCreateInOrgCmd                          `cmd:""`
	CreateOrUpdateFileContents           ReposCreateOrUpdateFileContentsCmd           `cmd:""`
	CreatePagesSite                      ReposCreatePagesSiteCmd                      `cmd:""`
	CreateRelease                        ReposCreateReleaseCmd                        `cmd:""`
	CreateUsingTemplate                  ReposCreateUsingTemplateCmd                  `cmd:""`
	CreateWebhook                        ReposCreateWebhookCmd                        `cmd:""`
	DeclineInvitation                    ReposDeclineInvitationCmd                    `cmd:""`
	Delete                               ReposDeleteCmd                               `cmd:""`
	DeleteAccessRestrictions             ReposDeleteAccessRestrictionsCmd             `cmd:""`
	DeleteAdminBranchProtection          ReposDeleteAdminBranchProtectionCmd          `cmd:""`
	DeleteBranchProtection               ReposDeleteBranchProtectionCmd               `cmd:""`
	DeleteCommitComment                  ReposDeleteCommitCommentCmd                  `cmd:""`
	DeleteCommitSignatureProtection      ReposDeleteCommitSignatureProtectionCmd      `cmd:""`
	DeleteDeployKey                      ReposDeleteDeployKeyCmd                      `cmd:""`
	DeleteDeployment                     ReposDeleteDeploymentCmd                     `cmd:""`
	DeleteFile                           ReposDeleteFileCmd                           `cmd:""`
	DeleteInvitation                     ReposDeleteInvitationCmd                     `cmd:""`
	DeletePagesSite                      ReposDeletePagesSiteCmd                      `cmd:""`
	DeletePullRequestReviewProtection    ReposDeletePullRequestReviewProtectionCmd    `cmd:""`
	DeleteRelease                        ReposDeleteReleaseCmd                        `cmd:""`
	DeleteReleaseAsset                   ReposDeleteReleaseAssetCmd                   `cmd:""`
	DeleteWebhook                        ReposDeleteWebhookCmd                        `cmd:""`
	DisableAutomatedSecurityFixes        ReposDisableAutomatedSecurityFixesCmd        `cmd:""`
	DisableVulnerabilityAlerts           ReposDisableVulnerabilityAlertsCmd           `cmd:""`
	DownloadArchive                      ReposDownloadArchiveCmd                      `cmd:""`
	EnableAutomatedSecurityFixes         ReposEnableAutomatedSecurityFixesCmd         `cmd:""`
	EnableVulnerabilityAlerts            ReposEnableVulnerabilityAlertsCmd            `cmd:""`
	Get                                  ReposGetCmd                                  `cmd:""`
	GetAccessRestrictions                ReposGetAccessRestrictionsCmd                `cmd:""`
	GetAdminBranchProtection             ReposGetAdminBranchProtectionCmd             `cmd:""`
	GetAllStatusCheckContexts            ReposGetAllStatusCheckContextsCmd            `cmd:""`
	GetAllTopics                         ReposGetAllTopicsCmd                         `cmd:""`
	GetAppsWithAccessToProtectedBranch   ReposGetAppsWithAccessToProtectedBranchCmd   `cmd:""`
	GetBranch                            ReposGetBranchCmd                            `cmd:""`
	GetBranchProtection                  ReposGetBranchProtectionCmd                  `cmd:""`
	GetClones                            ReposGetClonesCmd                            `cmd:""`
	GetCodeFrequencyStats                ReposGetCodeFrequencyStatsCmd                `cmd:""`
	GetCollaboratorPermissionLevel       ReposGetCollaboratorPermissionLevelCmd       `cmd:""`
	GetCombinedStatusForRef              ReposGetCombinedStatusForRefCmd              `cmd:""`
	GetCommit                            ReposGetCommitCmd                            `cmd:""`
	GetCommitActivityStats               ReposGetCommitActivityStatsCmd               `cmd:""`
	GetCommitComment                     ReposGetCommitCommentCmd                     `cmd:""`
	GetCommitSignatureProtection         ReposGetCommitSignatureProtectionCmd         `cmd:""`
	GetCommunityProfileMetrics           ReposGetCommunityProfileMetricsCmd           `cmd:""`
	GetContent                           ReposGetContentCmd                           `cmd:""`
	GetContributorsStats                 ReposGetContributorsStatsCmd                 `cmd:""`
	GetDeployKey                         ReposGetDeployKeyCmd                         `cmd:""`
	GetDeployment                        ReposGetDeploymentCmd                        `cmd:""`
	GetDeploymentStatus                  ReposGetDeploymentStatusCmd                  `cmd:""`
	GetLatestPagesBuild                  ReposGetLatestPagesBuildCmd                  `cmd:""`
	GetLatestRelease                     ReposGetLatestReleaseCmd                     `cmd:""`
	GetPages                             ReposGetPagesCmd                             `cmd:""`
	GetPagesBuild                        ReposGetPagesBuildCmd                        `cmd:""`
	GetParticipationStats                ReposGetParticipationStatsCmd                `cmd:""`
	GetPullRequestReviewProtection       ReposGetPullRequestReviewProtectionCmd       `cmd:""`
	GetPunchCardStats                    ReposGetPunchCardStatsCmd                    `cmd:""`
	GetReadme                            ReposGetReadmeCmd                            `cmd:""`
	GetRelease                           ReposGetReleaseCmd                           `cmd:""`
	GetReleaseAsset                      ReposGetReleaseAssetCmd                      `cmd:""`
	GetReleaseByTag                      ReposGetReleaseByTagCmd                      `cmd:""`
	GetStatusChecksProtection            ReposGetStatusChecksProtectionCmd            `cmd:""`
	GetTeamsWithAccessToProtectedBranch  ReposGetTeamsWithAccessToProtectedBranchCmd  `cmd:""`
	GetTopPaths                          ReposGetTopPathsCmd                          `cmd:""`
	GetTopReferrers                      ReposGetTopReferrersCmd                      `cmd:""`
	GetUsersWithAccessToProtectedBranch  ReposGetUsersWithAccessToProtectedBranchCmd  `cmd:""`
	GetViews                             ReposGetViewsCmd                             `cmd:""`
	GetWebhook                           ReposGetWebhookCmd                           `cmd:""`
	ListBranches                         ReposListBranchesCmd                         `cmd:""`
	ListBranchesForHeadCommit            ReposListBranchesForHeadCommitCmd            `cmd:""`
	ListCollaborators                    ReposListCollaboratorsCmd                    `cmd:""`
	ListCommentsForCommit                ReposListCommentsForCommitCmd                `cmd:""`
	ListCommitCommentsForRepo            ReposListCommitCommentsForRepoCmd            `cmd:""`
	ListCommitStatusesForRef             ReposListCommitStatusesForRefCmd             `cmd:""`
	ListCommits                          ReposListCommitsCmd                          `cmd:""`
	ListContributors                     ReposListContributorsCmd                     `cmd:""`
	ListDeployKeys                       ReposListDeployKeysCmd                       `cmd:""`
	ListDeploymentStatuses               ReposListDeploymentStatusesCmd               `cmd:""`
	ListDeployments                      ReposListDeploymentsCmd                      `cmd:""`
	ListForAuthenticatedUser             ReposListForAuthenticatedUserCmd             `cmd:""`
	ListForOrg                           ReposListForOrgCmd                           `cmd:""`
	ListForUser                          ReposListForUserCmd                          `cmd:""`
	ListForks                            ReposListForksCmd                            `cmd:""`
	ListInvitations                      ReposListInvitationsCmd                      `cmd:""`
	ListInvitationsForAuthenticatedUser  ReposListInvitationsForAuthenticatedUserCmd  `cmd:""`
	ListLanguages                        ReposListLanguagesCmd                        `cmd:""`
	ListPagesBuilds                      ReposListPagesBuildsCmd                      `cmd:""`
	ListPublic                           ReposListPublicCmd                           `cmd:""`
	ListPullRequestsAssociatedWithCommit ReposListPullRequestsAssociatedWithCommitCmd `cmd:""`
	ListReleaseAssets                    ReposListReleaseAssetsCmd                    `cmd:""`
	ListReleases                         ReposListReleasesCmd                         `cmd:""`
	ListTags                             ReposListTagsCmd                             `cmd:""`
	ListTeams                            ReposListTeamsCmd                            `cmd:""`
	ListWebhooks                         ReposListWebhooksCmd                         `cmd:""`
	Merge                                ReposMergeCmd                                `cmd:""`
	PingWebhook                          ReposPingWebhookCmd                          `cmd:""`
	RemoveAppAccessRestrictions          ReposRemoveAppAccessRestrictionsCmd          `cmd:""`
	RemoveCollaborator                   ReposRemoveCollaboratorCmd                   `cmd:""`
	RemoveStatusCheckContexts            ReposRemoveStatusCheckContextsCmd            `cmd:""`
	RemoveStatusCheckProtection          ReposRemoveStatusCheckProtectionCmd          `cmd:""`
	RemoveTeamAccessRestrictions         ReposRemoveTeamAccessRestrictionsCmd         `cmd:""`
	RemoveUserAccessRestrictions         ReposRemoveUserAccessRestrictionsCmd         `cmd:""`
	ReplaceAllTopics                     ReposReplaceAllTopicsCmd                     `cmd:""`
	RequestPagesBuild                    ReposRequestPagesBuildCmd                    `cmd:""`
	SetAdminBranchProtection             ReposSetAdminBranchProtectionCmd             `cmd:""`
	SetAppAccessRestrictions             ReposSetAppAccessRestrictionsCmd             `cmd:""`
	SetStatusCheckContexts               ReposSetStatusCheckContextsCmd               `cmd:""`
	SetTeamAccessRestrictions            ReposSetTeamAccessRestrictionsCmd            `cmd:""`
	SetUserAccessRestrictions            ReposSetUserAccessRestrictionsCmd            `cmd:""`
	TestPushWebhook                      ReposTestPushWebhookCmd                      `cmd:""`
	Transfer                             ReposTransferCmd                             `cmd:""`
	Update                               ReposUpdateCmd                               `cmd:""`
	UpdateBranchProtection               ReposUpdateBranchProtectionCmd               `cmd:""`
	UpdateCommitComment                  ReposUpdateCommitCommentCmd                  `cmd:""`
	UpdateInformationAboutPagesSite      ReposUpdateInformationAboutPagesSiteCmd      `cmd:""`
	UpdateInvitation                     ReposUpdateInvitationCmd                     `cmd:""`
	UpdatePullRequestReviewProtection    ReposUpdatePullRequestReviewProtectionCmd    `cmd:""`
	UpdateRelease                        ReposUpdateReleaseCmd                        `cmd:""`
	UpdateReleaseAsset                   ReposUpdateReleaseAssetCmd                   `cmd:""`
	UpdateStatusCheckPotection           ReposUpdateStatusCheckPotectionCmd           `cmd:""`
	UpdateWebhook                        ReposUpdateWebhookCmd                        `cmd:""`
	UploadReleaseAsset                   ReposUploadReleaseAssetCmd                   `cmd:""`
}

type ReposAcceptInvitationCmd struct {
	InvitationId int64 `name:"invitation_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposAcceptInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations/{invitation_id}")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("PATCH")
}

type ReposAddAppAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposAddAppAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddCollaboratorCmd struct {
	Repo       string `name:"repo" required:"true"`
	Username   string `name:"username" required:"true"`
	Permission string `name:"permission"`
	internal.BaseCmd
}

func (c *ReposAddCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type ReposAddStatusCheckContextsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposAddStatusCheckContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddTeamAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposAddTeamAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposAddUserAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposAddUserAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposCheckCollaboratorCmd struct {
	Repo     string `name:"repo" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *ReposCheckCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposCheckVulnerabilityAlertsCmd struct {
	Dorian bool   `name:"dorian-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposCheckVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/vulnerability-alerts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("dorian", c.Dorian)
	return c.DoRequest("GET")
}

type ReposCompareCommitsCmd struct {
	Repo string `name:"repo" required:"true"`
	Base string `name:"base" required:"true"`
	Head string `name:"head" required:"true"`
	internal.BaseCmd
}

func (c *ReposCompareCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/compare/{base}...{head}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("base", c.Base)
	c.UpdateURLPath("head", c.Head)
	return c.DoRequest("GET")
}

type ReposCreateCommitCommentCmd struct {
	Repo      string `name:"repo" required:"true"`
	CommitSha string `name:"commit_sha" required:"true"`
	Line      int64  `name:"line"`
	Path      string `name:"path"`
	Position  int64  `name:"position"`
	Body      string `name:"body" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/comments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("line", c.Line)
	c.UpdateBody("path", c.Path)
	c.UpdateBody("position", c.Position)
	return c.DoRequest("POST")
}

type ReposCreateCommitSignatureProtectionCmd struct {
	Zzzax  bool   `name:"zzzax-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateCommitSignatureProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_signatures")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("POST")
}

type ReposCreateCommitStatusCmd struct {
	Repo        string `name:"repo" required:"true"`
	Sha         string `name:"sha" required:"true"`
	Context     string `name:"context"`
	Description string `name:"description"`
	TargetUrl   string `name:"target_url"`
	State       string `name:"state" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateCommitStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/statuses/{sha}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("sha", c.Sha)
	c.UpdateBody("context", c.Context)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("state", c.State)
	c.UpdateBody("target_url", c.TargetUrl)
	return c.DoRequest("POST")
}

type ReposCreateDeployKeyCmd struct {
	Repo     string `name:"repo" required:"true"`
	ReadOnly bool   `name:"read_only"`
	Title    string `name:"title"`
	Key      string `name:"key" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("key", c.Key)
	c.UpdateBody("read_only", c.ReadOnly)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("POST")
}

type ReposCreateDeploymentCmd struct {
	AntMan                bool     `name:"ant-man-preview"`
	Repo                  string   `name:"repo" required:"true"`
	AutoMerge             bool     `name:"auto_merge"`
	Description           string   `name:"description"`
	Environment           string   `name:"environment"`
	Payload               string   `name:"payload"`
	ProductionEnvironment bool     `name:"production_environment"`
	RequiredContexts      []string `name:"required_contexts"`
	Task                  string   `name:"task"`
	TransientEnvironment  bool     `name:"transient_environment"`
	Ref                   string   `name:"ref" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateBody("auto_merge", c.AutoMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("environment", c.Environment)
	c.UpdateBody("payload", c.Payload)
	c.UpdateBody("production_environment", c.ProductionEnvironment)
	c.UpdateBody("ref", c.Ref)
	c.UpdateBody("required_contexts", c.RequiredContexts)
	c.UpdateBody("task", c.Task)
	c.UpdateBody("transient_environment", c.TransientEnvironment)
	return c.DoRequest("POST")
}

type ReposCreateDeploymentStatusCmd struct {
	AntMan         bool   `name:"ant-man-preview"`
	Flash          bool   `name:"flash-preview"`
	Repo           string `name:"repo" required:"true"`
	DeploymentId   int64  `name:"deployment_id" required:"true"`
	AutoInactive   bool   `name:"auto_inactive"`
	Description    string `name:"description"`
	Environment    string `name:"environment"`
	EnvironmentUrl string `name:"environment_url"`
	LogUrl         string `name:"log_url"`
	TargetUrl      string `name:"target_url"`
	State          string `name:"state" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateDeploymentStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}/statuses")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateBody("auto_inactive", c.AutoInactive)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("environment", c.Environment)
	c.UpdateBody("environment_url", c.EnvironmentUrl)
	c.UpdateBody("log_url", c.LogUrl)
	c.UpdateBody("state", c.State)
	c.UpdateBody("target_url", c.TargetUrl)
	return c.DoRequest("POST")
}

type ReposCreateDispatchEventCmd struct {
	Repo          string              `name:"repo" required:"true"`
	ClientPayload internal.JSONObject `name:"client_payload"`
	EventType     string              `name:"event_type" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateDispatchEventCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/dispatches")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("client_payload", c.ClientPayload)
	c.UpdateBody("event_type", c.EventType)
	return c.DoRequest("POST")
}

type ReposCreateForAuthenticatedUserCmd struct {
	Baptiste            bool   `name:"baptiste-preview"`
	Nebula              bool   `name:"nebula-preview"`
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	AutoInit            bool   `name:"auto_init"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	GitignoreTemplate   string `name:"gitignore_template"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	LicenseTemplate     string `name:"license_template"`
	Private             bool   `name:"private"`
	TeamId              int64  `name:"team_id"`
	Visibility          string `name:"visibility"`
	Name                string `name:"name" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repos")
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("auto_init", c.AutoInit)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("gitignore_template", c.GitignoreTemplate)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("license_template", c.LicenseTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("team_id", c.TeamId)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("POST")
}

type ReposCreateForkCmd struct {
	Repo         string `name:"repo" required:"true"`
	Organization string `name:"organization"`
	internal.BaseCmd
}

func (c *ReposCreateForkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/forks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("organization", c.Organization)
	return c.DoRequest("POST")
}

type ReposCreateInOrgCmd struct {
	Baptiste            bool   `name:"baptiste-preview"`
	Nebula              bool   `name:"nebula-preview"`
	Org                 string `name:"org" required:"true"`
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	AutoInit            bool   `name:"auto_init"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	GitignoreTemplate   string `name:"gitignore_template"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	LicenseTemplate     string `name:"license_template"`
	Private             bool   `name:"private"`
	TeamId              int64  `name:"team_id"`
	Visibility          string `name:"visibility"`
	Name                string `name:"name" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/repos")
	c.UpdateURLPath("org", c.Org)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("auto_init", c.AutoInit)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("gitignore_template", c.GitignoreTemplate)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("license_template", c.LicenseTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("team_id", c.TeamId)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("POST")
}

type ReposCreateOrUpdateFileContentsCmd struct {
	Repo           string `name:"repo" required:"true"`
	Path           string `name:"path" required:"true"`
	AuthorEmail    string `name:"author.email"`
	AuthorName     string `name:"author.name"`
	Branch         string `name:"branch"`
	CommitterEmail string `name:"committer.email"`
	CommitterName  string `name:"committer.name"`
	Sha            string `name:"sha"`
	Content        string `name:"content" required:"true"`
	Message        string `name:"message" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateOrUpdateFileContentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contents/{path}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("path", c.Path)
	c.UpdateBody("author.email", c.AuthorEmail)
	c.UpdateBody("author.name", c.AuthorName)
	c.UpdateBody("branch", c.Branch)
	c.UpdateBody("committer.email", c.CommitterEmail)
	c.UpdateBody("committer.name", c.CommitterName)
	c.UpdateBody("content", c.Content)
	c.UpdateBody("message", c.Message)
	c.UpdateBody("sha", c.Sha)
	return c.DoRequest("PUT")
}

type ReposCreatePagesSiteCmd struct {
	Switcheroo   bool   `name:"switcheroo-preview" required:"true"`
	Repo         string `name:"repo" required:"true"`
	SourceBranch string `name:"source.branch"`
	SourcePath   string `name:"source.path"`
	internal.BaseCmd
}

func (c *ReposCreatePagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("switcheroo", c.Switcheroo)
	c.UpdateBody("source.branch", c.SourceBranch)
	c.UpdateBody("source.path", c.SourcePath)
	return c.DoRequest("POST")
}

type ReposCreateReleaseCmd struct {
	Repo            string `name:"repo" required:"true"`
	Body            string `name:"body"`
	Draft           bool   `name:"draft"`
	Name            string `name:"name"`
	Prerelease      bool   `name:"prerelease"`
	TargetCommitish string `name:"target_commitish"`
	TagName         string `name:"tag_name" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("draft", c.Draft)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("prerelease", c.Prerelease)
	c.UpdateBody("tag_name", c.TagName)
	c.UpdateBody("target_commitish", c.TargetCommitish)
	return c.DoRequest("POST")
}

type ReposCreateUsingTemplateCmd struct {
	Baptiste      bool   `name:"baptiste-preview" required:"true"`
	TemplateOwner string `name:"template_owner" required:"true"`
	TemplateRepo  string `name:"template_repo" required:"true"`
	Description   string `name:"description"`
	Owner         string `name:"owner"`
	Private       bool   `name:"private"`
	Name          string `name:"name" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateUsingTemplateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{template_owner}/{template_repo}/generate")
	c.UpdateURLPath("template_owner", c.TemplateOwner)
	c.UpdateURLPath("template_repo", c.TemplateRepo)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("owner", c.Owner)
	c.UpdateBody("private", c.Private)
	return c.DoRequest("POST")
}

type ReposCreateWebhookCmd struct {
	Repo              string   `name:"repo" required:"true"`
	Active            bool     `name:"active"`
	ConfigContentType string   `name:"config.content_type"`
	ConfigInsecureSsl string   `name:"config.insecure_ssl"`
	ConfigSecret      string   `name:"config.secret"`
	Events            []string `name:"events"`
	Name              string   `name:"name"`
	ConfigUrl         string   `name:"config.url" required:"true"`
	internal.BaseCmd
}

func (c *ReposCreateWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("config.content_type", c.ConfigContentType)
	c.UpdateBody("config.insecure_ssl", c.ConfigInsecureSsl)
	c.UpdateBody("config.secret", c.ConfigSecret)
	c.UpdateBody("config.url", c.ConfigUrl)
	c.UpdateBody("events", c.Events)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type ReposDeclineInvitationCmd struct {
	InvitationId int64 `name:"invitation_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeclineInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations/{invitation_id}")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("DELETE")
}

type ReposDeleteAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposDeleteAdminBranchProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteAdminBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/enforce_admins")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposDeleteBranchProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposDeleteCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteCommitCommentCmd struct {
	Repo      string `name:"repo" required:"true"`
	CommentId int64  `name:"comment_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	return c.DoRequest("DELETE")
}

type ReposDeleteCommitSignatureProtectionCmd struct {
	Zzzax  bool   `name:"zzzax-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteCommitSignatureProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_signatures")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("DELETE")
}

type ReposDeleteDeployKeyCmd struct {
	Repo  string `name:"repo" required:"true"`
	KeyId int64  `name:"key_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys/{key_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("key_id", c.KeyId)
	return c.DoRequest("DELETE")
}

type ReposDeleteDeploymentCmd struct {
	Repo         string `name:"repo" required:"true"`
	DeploymentId int64  `name:"deployment_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	return c.DoRequest("DELETE")
}

type ReposDeleteFileCmd struct {
	Repo           string `name:"repo" required:"true"`
	Path           string `name:"path" required:"true"`
	AuthorEmail    string `name:"author.email"`
	AuthorName     string `name:"author.name"`
	Branch         string `name:"branch"`
	CommitterEmail string `name:"committer.email"`
	CommitterName  string `name:"committer.name"`
	Message        string `name:"message" required:"true"`
	Sha            string `name:"sha" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteFileCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contents/{path}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("path", c.Path)
	c.UpdateBody("author.email", c.AuthorEmail)
	c.UpdateBody("author.name", c.AuthorName)
	c.UpdateBody("branch", c.Branch)
	c.UpdateBody("committer.email", c.CommitterEmail)
	c.UpdateBody("committer.name", c.CommitterName)
	c.UpdateBody("message", c.Message)
	c.UpdateBody("sha", c.Sha)
	return c.DoRequest("DELETE")
}

type ReposDeleteInvitationCmd struct {
	Repo         string `name:"repo" required:"true"`
	InvitationId int64  `name:"invitation_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/invitations/{invitation_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("DELETE")
}

type ReposDeletePagesSiteCmd struct {
	Switcheroo bool   `name:"switcheroo-preview" required:"true"`
	Repo       string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeletePagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("switcheroo", c.Switcheroo)
	return c.DoRequest("DELETE")
}

type ReposDeletePullRequestReviewProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeletePullRequestReviewProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_pull_request_reviews")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposDeleteReleaseAssetCmd struct {
	Repo    string `name:"repo" required:"true"`
	AssetId int64  `name:"asset_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/assets/{asset_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("asset_id", c.AssetId)
	return c.DoRequest("DELETE")
}

type ReposDeleteReleaseCmd struct {
	Repo      string `name:"repo" required:"true"`
	ReleaseId int64  `name:"release_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	return c.DoRequest("DELETE")
}

type ReposDeleteWebhookCmd struct {
	Repo   string `name:"repo" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposDeleteWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("DELETE")
}

type ReposDisableAutomatedSecurityFixesCmd struct {
	London bool   `name:"london-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposDisableAutomatedSecurityFixesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/automated-security-fixes")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("london", c.London)
	return c.DoRequest("DELETE")
}

type ReposDisableVulnerabilityAlertsCmd struct {
	Dorian bool   `name:"dorian-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposDisableVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/vulnerability-alerts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("dorian", c.Dorian)
	return c.DoRequest("DELETE")
}

type ReposDownloadArchiveCmd struct {
	Repo          string `name:"repo" required:"true"`
	ArchiveFormat string `name:"archive_format" required:"true"`
	Ref           string `name:"ref" required:"true"`
	internal.BaseCmd
}

func (c *ReposDownloadArchiveCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/{archive_format}/{ref}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("archive_format", c.ArchiveFormat)
	c.UpdateURLPath("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposEnableAutomatedSecurityFixesCmd struct {
	London bool   `name:"london-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposEnableAutomatedSecurityFixesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/automated-security-fixes")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("london", c.London)
	return c.DoRequest("PUT")
}

type ReposEnableVulnerabilityAlertsCmd struct {
	Dorian bool   `name:"dorian-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposEnableVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/vulnerability-alerts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("dorian", c.Dorian)
	return c.DoRequest("PUT")
}

type ReposGetAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetAdminBranchProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetAdminBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/enforce_admins")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetAllStatusCheckContextsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetAllStatusCheckContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetAllTopicsCmd struct {
	Mercy bool   `name:"mercy-preview" required:"true"`
	Repo  string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetAllTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/topics")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("mercy", c.Mercy)
	return c.DoRequest("GET")
}

type ReposGetAppsWithAccessToProtectedBranchCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetAppsWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetBranchCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetBranchProtectionCmd struct {
	LukeCage bool   `name:"luke-cage-preview"`
	Repo     string `name:"repo" required:"true"`
	Branch   string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	return c.DoRequest("GET")
}

type ReposGetClonesCmd struct {
	Repo string `name:"repo" required:"true"`
	Per  string `name:"per"`
	internal.BaseCmd
}

func (c *ReposGetClonesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/clones")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per", c.Per)
	return c.DoRequest("GET")
}

type ReposGetCmd struct {
	Nebula       bool   `name:"nebula-preview"`
	ScarletWitch bool   `name:"scarlet-witch-preview"`
	Repo         string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("scarlet-witch", c.ScarletWitch)
	return c.DoRequest("GET")
}

type ReposGetCodeFrequencyStatsCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCodeFrequencyStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/code_frequency")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCollaboratorPermissionLevelCmd struct {
	Repo     string `name:"repo" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCollaboratorPermissionLevelCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}/permission")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposGetCombinedStatusForRefCmd struct {
	Repo string `name:"repo" required:"true"`
	Ref  string `name:"ref" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCombinedStatusForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{ref}/status")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetCommitActivityStatsCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCommitActivityStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/commit_activity")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCommitCmd struct {
	Repo string `name:"repo" required:"true"`
	Ref  string `name:"ref" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{ref}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetCommitCommentCmd struct {
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	Repo         string `name:"repo" required:"true"`
	CommentId    int64  `name:"comment_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposGetCommitSignatureProtectionCmd struct {
	Zzzax  bool   `name:"zzzax-preview" required:"true"`
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCommitSignatureProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_signatures")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("GET")
}

type ReposGetCommunityProfileMetricsCmd struct {
	BlackPanther bool   `name:"black-panther-preview" required:"true"`
	Repo         string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetCommunityProfileMetricsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/community/profile")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("black-panther", c.BlackPanther)
	return c.DoRequest("GET")
}

type ReposGetContentCmd struct {
	Repo string `name:"repo" required:"true"`
	Path string `name:"path" required:"true"`
	Ref  string `name:"ref"`
	internal.BaseCmd
}

func (c *ReposGetContentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contents/{path}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("path", c.Path)
	c.UpdateURLQuery("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetContributorsStatsCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetContributorsStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/contributors")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetDeployKeyCmd struct {
	Repo  string `name:"repo" required:"true"`
	KeyId int64  `name:"key_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys/{key_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("key_id", c.KeyId)
	return c.DoRequest("GET")
}

type ReposGetDeploymentCmd struct {
	AntMan       bool   `name:"ant-man-preview"`
	MachineMan   bool   `name:"machine-man-preview"`
	Repo         string `name:"repo" required:"true"`
	DeploymentId int64  `name:"deployment_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposGetDeploymentStatusCmd struct {
	AntMan       bool   `name:"ant-man-preview"`
	Flash        bool   `name:"flash-preview"`
	MachineMan   bool   `name:"machine-man-preview"`
	Repo         string `name:"repo" required:"true"`
	DeploymentId int64  `name:"deployment_id" required:"true"`
	StatusId     int64  `name:"status_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetDeploymentStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}/statuses/{status_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdateURLPath("status_id", c.StatusId)
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposGetLatestPagesBuildCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetLatestPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds/latest")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetLatestReleaseCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetLatestReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/latest")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetPagesBuildCmd struct {
	Repo    string `name:"repo" required:"true"`
	BuildId int64  `name:"build_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds/{build_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("build_id", c.BuildId)
	return c.DoRequest("GET")
}

type ReposGetPagesCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetPagesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetParticipationStatsCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetParticipationStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/participation")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetPullRequestReviewProtectionCmd struct {
	LukeCage bool   `name:"luke-cage-preview"`
	Repo     string `name:"repo" required:"true"`
	Branch   string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetPullRequestReviewProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_pull_request_reviews")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	return c.DoRequest("GET")
}

type ReposGetPunchCardStatsCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetPunchCardStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/stats/punch_card")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetReadmeCmd struct {
	Repo string `name:"repo" required:"true"`
	Ref  string `name:"ref"`
	internal.BaseCmd
}

func (c *ReposGetReadmeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/readme")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("ref", c.Ref)
	return c.DoRequest("GET")
}

type ReposGetReleaseAssetCmd struct {
	Repo    string `name:"repo" required:"true"`
	AssetId int64  `name:"asset_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/assets/{asset_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("asset_id", c.AssetId)
	return c.DoRequest("GET")
}

type ReposGetReleaseByTagCmd struct {
	Repo string `name:"repo" required:"true"`
	Tag  string `name:"tag" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetReleaseByTagCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/tags/{tag}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("tag", c.Tag)
	return c.DoRequest("GET")
}

type ReposGetReleaseCmd struct {
	Repo      string `name:"repo" required:"true"`
	ReleaseId int64  `name:"release_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	return c.DoRequest("GET")
}

type ReposGetStatusChecksProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetStatusChecksProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetTeamsWithAccessToProtectedBranchCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetTeamsWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetTopPathsCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetTopPathsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/popular/paths")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetTopReferrersCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetTopReferrersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/popular/referrers")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetUsersWithAccessToProtectedBranchCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetUsersWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("GET")
}

type ReposGetViewsCmd struct {
	Repo string `name:"repo" required:"true"`
	Per  string `name:"per"`
	internal.BaseCmd
}

func (c *ReposGetViewsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/traffic/views")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per", c.Per)
	return c.DoRequest("GET")
}

type ReposGetWebhookCmd struct {
	Repo   string `name:"repo" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposGetWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("GET")
}

type ReposListBranchesCmd struct {
	Repo      string `name:"repo" required:"true"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Protected bool   `name:"protected"`
	internal.BaseCmd
}

func (c *ReposListBranchesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("protected", c.Protected)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListBranchesForHeadCommitCmd struct {
	Groot     bool   `name:"groot-preview" required:"true"`
	Repo      string `name:"repo" required:"true"`
	CommitSha string `name:"commit_sha" required:"true"`
	internal.BaseCmd
}

func (c *ReposListBranchesForHeadCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/branches-where-head")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdatePreview("groot", c.Groot)
	return c.DoRequest("GET")
}

type ReposListCollaboratorsCmd struct {
	Repo        string `name:"repo" required:"true"`
	Affiliation string `name:"affiliation"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListCollaboratorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListCommentsForCommitCmd struct {
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	Repo         string `name:"repo" required:"true"`
	CommitSha    string `name:"commit_sha" required:"true"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListCommentsForCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/comments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposListCommitCommentsForRepoCmd struct {
	SquirrelGirl bool   `name:"squirrel-girl-preview"`
	Repo         string `name:"repo" required:"true"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListCommitCommentsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposListCommitStatusesForRefCmd struct {
	Repo    string `name:"repo" required:"true"`
	Ref     string `name:"ref" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListCommitStatusesForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{ref}/statuses")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListCommitsCmd struct {
	Repo    string `name:"repo" required:"true"`
	Author  string `name:"author"`
	Page    int64  `name:"page"`
	Path    string `name:"path"`
	PerPage int64  `name:"per_page"`
	Sha     string `name:"sha"`
	Since   string `name:"since"`
	Until   string `name:"until"`
	internal.BaseCmd
}

func (c *ReposListCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sha", c.Sha)
	c.UpdateURLQuery("path", c.Path)
	c.UpdateURLQuery("author", c.Author)
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("until", c.Until)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListContributorsCmd struct {
	Repo    string `name:"repo" required:"true"`
	Anon    string `name:"anon"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListContributorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/contributors")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("anon", c.Anon)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListDeployKeysCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListDeployKeysCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/keys")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListDeploymentStatusesCmd struct {
	AntMan       bool   `name:"ant-man-preview"`
	Flash        bool   `name:"flash-preview"`
	Repo         string `name:"repo" required:"true"`
	DeploymentId int64  `name:"deployment_id" required:"true"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListDeploymentStatusesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments/{deployment_id}/statuses")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposListDeploymentsCmd struct {
	AntMan      bool   `name:"ant-man-preview"`
	Repo        string `name:"repo" required:"true"`
	Environment string `name:"environment"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Ref         string `name:"ref"`
	Sha         string `name:"sha"`
	Task        string `name:"task"`
	internal.BaseCmd
}

func (c *ReposListDeploymentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/deployments")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sha", c.Sha)
	c.UpdateURLQuery("ref", c.Ref)
	c.UpdateURLQuery("task", c.Task)
	c.UpdateURLQuery("environment", c.Environment)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("ant-man", c.AntMan)
	return c.DoRequest("GET")
}

type ReposListForAuthenticatedUserCmd struct {
	Affiliation string `name:"affiliation"`
	Direction   string `name:"direction"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Sort        string `name:"sort"`
	Type        string `name:"type"`
	Visibility  string `name:"visibility"`
	internal.BaseCmd
}

func (c *ReposListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repos")
	c.UpdateURLQuery("visibility", c.Visibility)
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListForOrgCmd struct {
	Baptiste  bool   `name:"baptiste-preview"`
	Nebula    bool   `name:"nebula-preview"`
	Org       string `name:"org" required:"true"`
	Direction string `name:"direction"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Type      string `name:"type"`
	internal.BaseCmd
}

func (c *ReposListForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/repos")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	return c.DoRequest("GET")
}

type ReposListForUserCmd struct {
	Nebula    bool   `name:"nebula-preview"`
	Username  string `name:"username" required:"true"`
	Direction string `name:"direction"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Type      string `name:"type"`
	internal.BaseCmd
}

func (c *ReposListForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/repos")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("nebula", c.Nebula)
	return c.DoRequest("GET")
}

type ReposListForksCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Sort    string `name:"sort"`
	internal.BaseCmd
}

func (c *ReposListForksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/forks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListInvitationsCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListInvitationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/invitations")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListInvitationsForAuthenticatedUserCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListInvitationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListLanguagesCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposListLanguagesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/languages")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListPagesBuildsCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListPagesBuildsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListPublicCmd struct {
	Since int64 `name:"since"`
	internal.BaseCmd
}

func (c *ReposListPublicCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repositories")
	c.UpdateURLQuery("since", c.Since)
	return c.DoRequest("GET")
}

type ReposListPullRequestsAssociatedWithCommitCmd struct {
	Groot     bool   `name:"groot-preview" required:"true"`
	Repo      string `name:"repo" required:"true"`
	CommitSha string `name:"commit_sha" required:"true"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListPullRequestsAssociatedWithCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/commits/{commit_sha}/pulls")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("groot", c.Groot)
	return c.DoRequest("GET")
}

type ReposListReleaseAssetsCmd struct {
	Repo      string `name:"repo" required:"true"`
	ReleaseId int64  `name:"release_id" required:"true"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListReleaseAssetsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}/assets")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListReleasesCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListReleasesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListTagsCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListTagsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/tags")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListTeamsCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListTeamsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposListWebhooksCmd struct {
	Repo    string `name:"repo" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ReposListWebhooksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ReposMergeCmd struct {
	Repo          string `name:"repo" required:"true"`
	CommitMessage string `name:"commit_message"`
	Base          string `name:"base" required:"true"`
	Head          string `name:"head" required:"true"`
	internal.BaseCmd
}

func (c *ReposMergeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/merges")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("base", c.Base)
	c.UpdateBody("commit_message", c.CommitMessage)
	c.UpdateBody("head", c.Head)
	return c.DoRequest("POST")
}

type ReposPingWebhookCmd struct {
	Repo   string `name:"repo" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposPingWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}/pings")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("POST")
}

type ReposRemoveAppAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposRemoveAppAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveCollaboratorCmd struct {
	Repo     string `name:"repo" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *ReposRemoveCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/collaborators/{username}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type ReposRemoveStatusCheckContextsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposRemoveStatusCheckContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveStatusCheckProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposRemoveStatusCheckProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveTeamAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposRemoveTeamAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposRemoveUserAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposRemoveUserAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("DELETE")
}

type ReposReplaceAllTopicsCmd struct {
	Mercy bool     `name:"mercy-preview" required:"true"`
	Repo  string   `name:"repo" required:"true"`
	Names []string `name:"names" required:"true"`
	internal.BaseCmd
}

func (c *ReposReplaceAllTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/topics")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("mercy", c.Mercy)
	c.UpdateBody("names", c.Names)
	return c.DoRequest("PUT")
}

type ReposRequestPagesBuildCmd struct {
	Repo string `name:"repo" required:"true"`
	internal.BaseCmd
}

func (c *ReposRequestPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages/builds")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposSetAdminBranchProtectionCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposSetAdminBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/enforce_admins")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("POST")
}

type ReposSetAppAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposSetAppAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/apps")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposSetStatusCheckContextsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposSetStatusCheckContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks/contexts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposSetTeamAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposSetTeamAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/teams")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposSetUserAccessRestrictionsCmd struct {
	Repo   string `name:"repo" required:"true"`
	Branch string `name:"branch" required:"true"`
	internal.BaseCmd
}

func (c *ReposSetUserAccessRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/restrictions/users")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	return c.DoRequest("PUT")
}

type ReposTestPushWebhookCmd struct {
	Repo   string `name:"repo" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *ReposTestPushWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}/tests")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("POST")
}

type ReposTransferCmd struct {
	Repo     string  `name:"repo" required:"true"`
	NewOwner string  `name:"new_owner"`
	TeamIds  []int64 `name:"team_ids"`
	internal.BaseCmd
}

func (c *ReposTransferCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/transfer")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("new_owner", c.NewOwner)
	c.UpdateBody("team_ids", c.TeamIds)
	return c.DoRequest("POST")
}

type ReposUpdateBranchProtectionCmd struct {
	LukeCage                                               bool     `name:"luke-cage-preview"`
	Repo                                                   string   `name:"repo" required:"true"`
	Branch                                                 string   `name:"branch" required:"true"`
	AllowDeletions                                         bool     `name:"allow_deletions"`
	AllowForcePushes                                       bool     `name:"allow_force_pushes"`
	RequiredLinearHistory                                  bool     `name:"required_linear_history"`
	RequiredPullRequestReviewsDismissStaleReviews          bool     `name:"required_pull_request_reviews.dismiss_stale_reviews"`
	RequiredPullRequestReviewsDismissalRestrictionsTeams   []string `name:"required_pull_request_reviews.dismissal_restrictions.teams"`
	RequiredPullRequestReviewsDismissalRestrictionsUsers   []string `name:"required_pull_request_reviews.dismissal_restrictions.users"`
	RequiredPullRequestReviewsRequireCodeOwnerReviews      bool     `name:"required_pull_request_reviews.require_code_owner_reviews"`
	RequiredPullRequestReviewsRequiredApprovingReviewCount int64    `name:"required_pull_request_reviews.required_approving_review_count"`
	RestrictionsApps                                       []string `name:"restrictions.apps"`
	EnforceAdmins                                          bool     `name:"enforce_admins" required:"true"`
	RequiredStatusChecksContexts                           []string `name:"required_status_checks.contexts" required:"true"`
	RequiredStatusChecksStrict                             bool     `name:"required_status_checks.strict" required:"true"`
	RestrictionsTeams                                      []string `name:"restrictions.teams" required:"true"`
	RestrictionsUsers                                      []string `name:"restrictions.users" required:"true"`
	internal.BaseCmd
}

func (c *ReposUpdateBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	c.UpdateBody("allow_deletions", c.AllowDeletions)
	c.UpdateBody("allow_force_pushes", c.AllowForcePushes)
	c.UpdateBody("enforce_admins", c.EnforceAdmins)
	c.UpdateBody("required_linear_history", c.RequiredLinearHistory)
	c.UpdateBody("required_pull_request_reviews.dismiss_stale_reviews", c.RequiredPullRequestReviewsDismissStaleReviews)
	c.UpdateBody("required_pull_request_reviews.dismissal_restrictions.teams", c.RequiredPullRequestReviewsDismissalRestrictionsTeams)
	c.UpdateBody("required_pull_request_reviews.dismissal_restrictions.users", c.RequiredPullRequestReviewsDismissalRestrictionsUsers)
	c.UpdateBody("required_pull_request_reviews.require_code_owner_reviews", c.RequiredPullRequestReviewsRequireCodeOwnerReviews)
	c.UpdateBody("required_pull_request_reviews.required_approving_review_count", c.RequiredPullRequestReviewsRequiredApprovingReviewCount)
	c.UpdateBody("required_status_checks.contexts", c.RequiredStatusChecksContexts)
	c.UpdateBody("required_status_checks.strict", c.RequiredStatusChecksStrict)
	c.UpdateBody("restrictions.apps", c.RestrictionsApps)
	c.UpdateBody("restrictions.teams", c.RestrictionsTeams)
	c.UpdateBody("restrictions.users", c.RestrictionsUsers)
	return c.DoRequest("PUT")
}

type ReposUpdateCmd struct {
	Baptiste            bool   `name:"baptiste-preview"`
	Nebula              bool   `name:"nebula-preview"`
	Repo                string `name:"repo" required:"true"`
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	Archived            bool   `name:"archived"`
	DefaultBranch       string `name:"default_branch"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	Name                string `name:"name"`
	Private             bool   `name:"private"`
	Visibility          string `name:"visibility"`
	internal.BaseCmd
}

func (c *ReposUpdateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("archived", c.Archived)
	c.UpdateBody("default_branch", c.DefaultBranch)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("PATCH")
}

type ReposUpdateCommitCommentCmd struct {
	Repo      string `name:"repo" required:"true"`
	CommentId int64  `name:"comment_id" required:"true"`
	Body      string `name:"body" required:"true"`
	internal.BaseCmd
}

func (c *ReposUpdateCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type ReposUpdateInformationAboutPagesSiteCmd struct {
	Repo   string `name:"repo" required:"true"`
	Cname  string `name:"cname"`
	Source string `name:"source"`
	internal.BaseCmd
}

func (c *ReposUpdateInformationAboutPagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pages")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("cname", c.Cname)
	c.UpdateBody("source", c.Source)
	return c.DoRequest("PUT")
}

type ReposUpdateInvitationCmd struct {
	Repo         string `name:"repo" required:"true"`
	InvitationId int64  `name:"invitation_id" required:"true"`
	Permissions  string `name:"permissions"`
	internal.BaseCmd
}

func (c *ReposUpdateInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/invitations/{invitation_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("invitation_id", c.InvitationId)
	c.UpdateBody("permissions", c.Permissions)
	return c.DoRequest("PATCH")
}

type ReposUpdatePullRequestReviewProtectionCmd struct {
	LukeCage                     bool     `name:"luke-cage-preview"`
	Repo                         string   `name:"repo" required:"true"`
	Branch                       string   `name:"branch" required:"true"`
	DismissStaleReviews          bool     `name:"dismiss_stale_reviews"`
	DismissalRestrictionsTeams   []string `name:"dismissal_restrictions.teams"`
	DismissalRestrictionsUsers   []string `name:"dismissal_restrictions.users"`
	RequireCodeOwnerReviews      bool     `name:"require_code_owner_reviews"`
	RequiredApprovingReviewCount int64    `name:"required_approving_review_count"`
	internal.BaseCmd
}

func (c *ReposUpdatePullRequestReviewProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_pull_request_reviews")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	c.UpdateBody("dismiss_stale_reviews", c.DismissStaleReviews)
	c.UpdateBody("dismissal_restrictions.teams", c.DismissalRestrictionsTeams)
	c.UpdateBody("dismissal_restrictions.users", c.DismissalRestrictionsUsers)
	c.UpdateBody("require_code_owner_reviews", c.RequireCodeOwnerReviews)
	c.UpdateBody("required_approving_review_count", c.RequiredApprovingReviewCount)
	return c.DoRequest("PATCH")
}

type ReposUpdateReleaseAssetCmd struct {
	Repo    string `name:"repo" required:"true"`
	AssetId int64  `name:"asset_id" required:"true"`
	Label   string `name:"label"`
	Name    string `name:"name"`
	internal.BaseCmd
}

func (c *ReposUpdateReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/assets/{asset_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("asset_id", c.AssetId)
	c.UpdateBody("label", c.Label)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("PATCH")
}

type ReposUpdateReleaseCmd struct {
	Repo            string `name:"repo" required:"true"`
	ReleaseId       int64  `name:"release_id" required:"true"`
	Body            string `name:"body"`
	Draft           bool   `name:"draft"`
	Name            string `name:"name"`
	Prerelease      bool   `name:"prerelease"`
	TagName         string `name:"tag_name"`
	TargetCommitish string `name:"target_commitish"`
	internal.BaseCmd
}

func (c *ReposUpdateReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("draft", c.Draft)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("prerelease", c.Prerelease)
	c.UpdateBody("tag_name", c.TagName)
	c.UpdateBody("target_commitish", c.TargetCommitish)
	return c.DoRequest("PATCH")
}

type ReposUpdateStatusCheckPotectionCmd struct {
	Repo     string   `name:"repo" required:"true"`
	Branch   string   `name:"branch" required:"true"`
	Contexts []string `name:"contexts"`
	Strict   bool     `name:"strict"`
	internal.BaseCmd
}

func (c *ReposUpdateStatusCheckPotectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/branches/{branch}/protection/required_status_checks")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateBody("contexts", c.Contexts)
	c.UpdateBody("strict", c.Strict)
	return c.DoRequest("PATCH")
}

type ReposUpdateWebhookCmd struct {
	Repo              string   `name:"repo" required:"true"`
	HookId            int64    `name:"hook_id" required:"true"`
	Active            bool     `name:"active"`
	AddEvents         []string `name:"add_events"`
	ConfigContentType string   `name:"config.content_type"`
	ConfigInsecureSsl string   `name:"config.insecure_ssl"`
	ConfigSecret      string   `name:"config.secret"`
	ConfigUrl         string   `name:"config.url"`
	Events            []string `name:"events"`
	RemoveEvents      []string `name:"remove_events"`
	internal.BaseCmd
}

func (c *ReposUpdateWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/hooks/{hook_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("add_events", c.AddEvents)
	c.UpdateBody("config.content_type", c.ConfigContentType)
	c.UpdateBody("config.insecure_ssl", c.ConfigInsecureSsl)
	c.UpdateBody("config.secret", c.ConfigSecret)
	c.UpdateBody("config.url", c.ConfigUrl)
	c.UpdateBody("events", c.Events)
	c.UpdateBody("remove_events", c.RemoveEvents)
	return c.DoRequest("PATCH")
}

type ReposUploadReleaseAssetCmd struct {
	Repo          string `name:"repo" required:"true"`
	ReleaseId     int64  `name:"release_id" required:"true"`
	Label         string `name:"label"`
	Name          string `name:"name"`
	ContentLength string `hidden:"" name:"content-length"`
	ContentType   string `name:"content-type"`
	File          string `name:"file" required:"true" type:"existingfile"`
	internal.BaseCmd
}

func (c *ReposUploadReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/releases/{release_id}/assets")
	internal.ReposUploadReleaseAssetOverride(&c.BaseCmd, c.File)
	c.AddRequestHeader("content-length", c.ContentLength)
	c.AddRequestHeader("content-type", c.ContentType)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLQuery("name", c.Name)
	c.UpdateURLQuery("label", c.Label)
	return c.DoRequest("POST")
}
