// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import (
	"github.com/octo-cli/octo-cli/internal"
)

type ProjectsCmd struct {
	AddCollaborator            ProjectsAddCollaboratorCmd            `cmd:""`
	CreateCard                 ProjectsCreateCardCmd                 `cmd:""`
	CreateColumn               ProjectsCreateColumnCmd               `cmd:""`
	CreateForAuthenticatedUser ProjectsCreateForAuthenticatedUserCmd `cmd:""`
	CreateForOrg               ProjectsCreateForOrgCmd               `cmd:""`
	CreateForRepo              ProjectsCreateForRepoCmd              `cmd:""`
	Delete                     ProjectsDeleteCmd                     `cmd:""`
	DeleteCard                 ProjectsDeleteCardCmd                 `cmd:""`
	DeleteColumn               ProjectsDeleteColumnCmd               `cmd:""`
	Get                        ProjectsGetCmd                        `cmd:""`
	GetCard                    ProjectsGetCardCmd                    `cmd:""`
	GetColumn                  ProjectsGetColumnCmd                  `cmd:""`
	ListCards                  ProjectsListCardsCmd                  `cmd:""`
	ListCollaborators          ProjectsListCollaboratorsCmd          `cmd:""`
	ListColumns                ProjectsListColumnsCmd                `cmd:""`
	ListForOrg                 ProjectsListForOrgCmd                 `cmd:""`
	ListForRepo                ProjectsListForRepoCmd                `cmd:""`
	ListForUser                ProjectsListForUserCmd                `cmd:""`
	MoveCard                   ProjectsMoveCardCmd                   `cmd:""`
	MoveColumn                 ProjectsMoveColumnCmd                 `cmd:""`
	RemoveCollaborator         ProjectsRemoveCollaboratorCmd         `cmd:""`
	ReviewUserPermissionLevel  ProjectsReviewUserPermissionLevelCmd  `cmd:""`
	Update                     ProjectsUpdateCmd                     `cmd:""`
	UpdateCard                 ProjectsUpdateCardCmd                 `cmd:""`
	UpdateColumn               ProjectsUpdateColumnCmd               `cmd:""`
}

type ProjectsAddCollaboratorCmd struct {
	Inertia    bool   `required:"" name:"inertia-preview"`
	Permission string `name:"permission"`
	ProjectId  int64  `required:"" name:"project_id"`
	Username   string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ProjectsAddCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}/collaborators/{username}")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdateURLPath("username", c.Username)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type ProjectsCreateCardCmd struct {
	ColumnId    int64  `required:"" name:"column_id"`
	ContentId   int64  `name:"content_id"`
	ContentType string `name:"content_type"`
	Inertia     bool   `required:"" name:"inertia-preview"`
	Note        string `name:"note"`
	internal.BaseCmd
}

func (c *ProjectsCreateCardCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/{column_id}/cards")
	c.UpdateURLPath("column_id", c.ColumnId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("content_id", c.ContentId)
	c.UpdateBody("content_type", c.ContentType)
	c.UpdateBody("note", c.Note)
	return c.DoRequest("POST")
}

type ProjectsCreateColumnCmd struct {
	Inertia   bool   `required:"" name:"inertia-preview"`
	Name      string `required:"" name:"name"`
	ProjectId int64  `required:"" name:"project_id"`
	internal.BaseCmd
}

func (c *ProjectsCreateColumnCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}/columns")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type ProjectsCreateForAuthenticatedUserCmd struct {
	Body    string `name:"body"`
	Inertia bool   `required:"" name:"inertia-preview"`
	Name    string `required:"" name:"name"`
	internal.BaseCmd
}

func (c *ProjectsCreateForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/projects")
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type ProjectsCreateForOrgCmd struct {
	Body    string `name:"body"`
	Inertia bool   `required:"" name:"inertia-preview"`
	Name    string `required:"" name:"name"`
	Org     string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ProjectsCreateForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/projects")
	c.UpdateURLPath("org", c.Org)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type ProjectsCreateForRepoCmd struct {
	Body    string `name:"body"`
	Inertia bool   `required:"" name:"inertia-preview"`
	Name    string `required:"" name:"name"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ProjectsCreateForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/projects")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type ProjectsDeleteCardCmd struct {
	CardId  int64 `required:"" name:"card_id"`
	Inertia bool  `required:"" name:"inertia-preview"`
	internal.BaseCmd
}

func (c *ProjectsDeleteCardCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/cards/{card_id}")
	c.UpdateURLPath("card_id", c.CardId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("DELETE")
}

type ProjectsDeleteCmd struct {
	Inertia   bool  `required:"" name:"inertia-preview"`
	ProjectId int64 `required:"" name:"project_id"`
	internal.BaseCmd
}

func (c *ProjectsDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("DELETE")
}

type ProjectsDeleteColumnCmd struct {
	ColumnId int64 `required:"" name:"column_id"`
	Inertia  bool  `required:"" name:"inertia-preview"`
	internal.BaseCmd
}

func (c *ProjectsDeleteColumnCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/{column_id}")
	c.UpdateURLPath("column_id", c.ColumnId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("DELETE")
}

type ProjectsGetCardCmd struct {
	CardId  int64 `required:"" name:"card_id"`
	Inertia bool  `required:"" name:"inertia-preview"`
	internal.BaseCmd
}

func (c *ProjectsGetCardCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/cards/{card_id}")
	c.UpdateURLPath("card_id", c.CardId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsGetCmd struct {
	Inertia   bool  `required:"" name:"inertia-preview"`
	ProjectId int64 `required:"" name:"project_id"`
	internal.BaseCmd
}

func (c *ProjectsGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsGetColumnCmd struct {
	ColumnId int64 `required:"" name:"column_id"`
	Inertia  bool  `required:"" name:"inertia-preview"`
	internal.BaseCmd
}

func (c *ProjectsGetColumnCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/{column_id}")
	c.UpdateURLPath("column_id", c.ColumnId)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsListCardsCmd struct {
	ArchivedState string `name:"archived_state"`
	ColumnId      int64  `required:"" name:"column_id"`
	Inertia       bool   `required:"" name:"inertia-preview"`
	Page          int64  `name:"page"`
	PerPage       int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ProjectsListCardsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/{column_id}/cards")
	c.UpdateURLPath("column_id", c.ColumnId)
	c.UpdateURLQuery("archived_state", c.ArchivedState)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsListCollaboratorsCmd struct {
	Affiliation string `name:"affiliation"`
	Inertia     bool   `required:"" name:"inertia-preview"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	ProjectId   int64  `required:"" name:"project_id"`
	internal.BaseCmd
}

func (c *ProjectsListCollaboratorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}/collaborators")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsListColumnsCmd struct {
	Inertia   bool  `required:"" name:"inertia-preview"`
	Page      int64 `name:"page"`
	PerPage   int64 `name:"per_page"`
	ProjectId int64 `required:"" name:"project_id"`
	internal.BaseCmd
}

func (c *ProjectsListColumnsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}/columns")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsListForOrgCmd struct {
	Inertia bool   `required:"" name:"inertia-preview"`
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	State   string `name:"state"`
	internal.BaseCmd
}

func (c *ProjectsListForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/projects")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("state", c.State)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsListForRepoCmd struct {
	Inertia bool   `required:"" name:"inertia-preview"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	State   string `name:"state"`
	internal.BaseCmd
}

func (c *ProjectsListForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/projects")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("state", c.State)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsListForUserCmd struct {
	Inertia  bool   `required:"" name:"inertia-preview"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	State    string `name:"state"`
	Username string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ProjectsListForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/projects")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("state", c.State)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsMoveCardCmd struct {
	CardId   int64  `required:"" name:"card_id"`
	ColumnId int64  `name:"column_id"`
	Inertia  bool   `required:"" name:"inertia-preview"`
	Position string `required:"" name:"position"`
	internal.BaseCmd
}

func (c *ProjectsMoveCardCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/cards/{card_id}/moves")
	c.UpdateURLPath("card_id", c.CardId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("column_id", c.ColumnId)
	c.UpdateBody("position", c.Position)
	return c.DoRequest("POST")
}

type ProjectsMoveColumnCmd struct {
	ColumnId int64  `required:"" name:"column_id"`
	Inertia  bool   `required:"" name:"inertia-preview"`
	Position string `required:"" name:"position"`
	internal.BaseCmd
}

func (c *ProjectsMoveColumnCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/{column_id}/moves")
	c.UpdateURLPath("column_id", c.ColumnId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("position", c.Position)
	return c.DoRequest("POST")
}

type ProjectsRemoveCollaboratorCmd struct {
	Inertia   bool   `required:"" name:"inertia-preview"`
	ProjectId int64  `required:"" name:"project_id"`
	Username  string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ProjectsRemoveCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}/collaborators/{username}")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdateURLPath("username", c.Username)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("DELETE")
}

type ProjectsReviewUserPermissionLevelCmd struct {
	Inertia   bool   `required:"" name:"inertia-preview"`
	ProjectId int64  `required:"" name:"project_id"`
	Username  string `required:"" name:"username"`
	internal.BaseCmd
}

func (c *ProjectsReviewUserPermissionLevelCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}/collaborators/{username}/permission")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdateURLPath("username", c.Username)
	c.UpdatePreview("inertia", c.Inertia)
	return c.DoRequest("GET")
}

type ProjectsUpdateCardCmd struct {
	Archived bool   `name:"archived"`
	CardId   int64  `required:"" name:"card_id"`
	Inertia  bool   `required:"" name:"inertia-preview"`
	Note     string `name:"note"`
	internal.BaseCmd
}

func (c *ProjectsUpdateCardCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/cards/{card_id}")
	c.UpdateURLPath("card_id", c.CardId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("archived", c.Archived)
	c.UpdateBody("note", c.Note)
	return c.DoRequest("PATCH")
}

type ProjectsUpdateCmd struct {
	Body                   string `name:"body"`
	Inertia                bool   `required:"" name:"inertia-preview"`
	Name                   string `name:"name"`
	OrganizationPermission string `name:"organization_permission"`
	Private                bool   `name:"private"`
	ProjectId              int64  `required:"" name:"project_id"`
	State                  string `name:"state"`
	internal.BaseCmd
}

func (c *ProjectsUpdateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/{project_id}")
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("organization_permission", c.OrganizationPermission)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("state", c.State)
	return c.DoRequest("PATCH")
}

type ProjectsUpdateColumnCmd struct {
	ColumnId int64  `required:"" name:"column_id"`
	Inertia  bool   `required:"" name:"inertia-preview"`
	Name     string `required:"" name:"name"`
	internal.BaseCmd
}

func (c *ProjectsUpdateColumnCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/projects/columns/{column_id}")
	c.UpdateURLPath("column_id", c.ColumnId)
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("PATCH")
}
