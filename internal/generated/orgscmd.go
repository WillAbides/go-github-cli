// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type OrgsCmd struct {
	BlockUser                                  OrgsBlockUserCmd                                  `cmd:""`
	CheckBlockedUser                           OrgsCheckBlockedUserCmd                           `cmd:""`
	CheckMembershipForUser                     OrgsCheckMembershipForUserCmd                     `cmd:""`
	CheckPublicMembershipForUser               OrgsCheckPublicMembershipForUserCmd               `cmd:""`
	ConvertMemberToOutsideCollaborator         OrgsConvertMemberToOutsideCollaboratorCmd         `cmd:""`
	CreateInvitation                           OrgsCreateInvitationCmd                           `cmd:""`
	CreateWebhook                              OrgsCreateWebhookCmd                              `cmd:""`
	DeleteWebhook                              OrgsDeleteWebhookCmd                              `cmd:""`
	Get                                        OrgsGetCmd                                        `cmd:""`
	GetMembershipForAuthenticatedUser          OrgsGetMembershipForAuthenticatedUserCmd          `cmd:""`
	GetMembershipForUser                       OrgsGetMembershipForUserCmd                       `cmd:""`
	GetWebhook                                 OrgsGetWebhookCmd                                 `cmd:""`
	List                                       OrgsListCmd                                       `cmd:""`
	ListAppInstallations                       OrgsListAppInstallationsCmd                       `cmd:""`
	ListBlockedUsers                           OrgsListBlockedUsersCmd                           `cmd:""`
	ListForAuthenticatedUser                   OrgsListForAuthenticatedUserCmd                   `cmd:""`
	ListForUser                                OrgsListForUserCmd                                `cmd:""`
	ListInvitationTeams                        OrgsListInvitationTeamsCmd                        `cmd:""`
	ListMembers                                OrgsListMembersCmd                                `cmd:""`
	ListMembershipsForAuthenticatedUser        OrgsListMembershipsForAuthenticatedUserCmd        `cmd:""`
	ListOutsideCollaborators                   OrgsListOutsideCollaboratorsCmd                   `cmd:""`
	ListPendingInvitations                     OrgsListPendingInvitationsCmd                     `cmd:""`
	ListPublicMembers                          OrgsListPublicMembersCmd                          `cmd:""`
	ListSamlSsoAuthorizations                  OrgsListSamlSsoAuthorizationsCmd                  `cmd:""`
	ListWebhooks                               OrgsListWebhooksCmd                               `cmd:""`
	PingWebhook                                OrgsPingWebhookCmd                                `cmd:""`
	RemoveMember                               OrgsRemoveMemberCmd                               `cmd:""`
	RemoveMembershipForUser                    OrgsRemoveMembershipForUserCmd                    `cmd:""`
	RemoveOutsideCollaborator                  OrgsRemoveOutsideCollaboratorCmd                  `cmd:""`
	RemovePublicMembershipForAuthenticatedUser OrgsRemovePublicMembershipForAuthenticatedUserCmd `cmd:""`
	RemoveSamlSsoAuthorization                 OrgsRemoveSamlSsoAuthorizationCmd                 `cmd:""`
	SetMembershipForUser                       OrgsSetMembershipForUserCmd                       `cmd:""`
	SetPublicMembershipForAuthenticatedUser    OrgsSetPublicMembershipForAuthenticatedUserCmd    `cmd:""`
	UnblockUser                                OrgsUnblockUserCmd                                `cmd:""`
	Update                                     OrgsUpdateCmd                                     `cmd:""`
	UpdateMembershipForAuthenticatedUser       OrgsUpdateMembershipForAuthenticatedUserCmd       `cmd:""`
	UpdateWebhook                              OrgsUpdateWebhookCmd                              `cmd:""`
}

type OrgsBlockUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsBlockUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/blocks/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type OrgsCheckBlockedUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsCheckBlockedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/blocks/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type OrgsCheckMembershipForUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsCheckMembershipForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/members/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type OrgsCheckPublicMembershipForUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsCheckPublicMembershipForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/public_members/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type OrgsConvertMemberToOutsideCollaboratorCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsConvertMemberToOutsideCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/outside_collaborators/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type OrgsCreateInvitationCmd struct {
	Org       string  `name:"org" required:"true"`
	Email     string  `name:"email"`
	InviteeId int64   `name:"invitee_id"`
	Role      string  `name:"role"`
	TeamIds   []int64 `name:"team_ids"`
	internal.BaseCmd
}

func (c *OrgsCreateInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/invitations")
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("email", c.Email)
	c.UpdateBody("invitee_id", c.InviteeId)
	c.UpdateBody("role", c.Role)
	c.UpdateBody("team_ids", c.TeamIds)
	return c.DoRequest("POST")
}

type OrgsCreateWebhookCmd struct {
	Org               string   `name:"org" required:"true"`
	Active            bool     `name:"active"`
	ConfigContentType string   `name:"config.content_type"`
	ConfigInsecureSsl string   `name:"config.insecure_ssl"`
	ConfigSecret      string   `name:"config.secret"`
	Events            []string `name:"events"`
	ConfigUrl         string   `name:"config.url" required:"true"`
	Name              string   `name:"name" required:"true"`
	internal.BaseCmd
}

func (c *OrgsCreateWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/hooks")
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("config.content_type", c.ConfigContentType)
	c.UpdateBody("config.insecure_ssl", c.ConfigInsecureSsl)
	c.UpdateBody("config.secret", c.ConfigSecret)
	c.UpdateBody("config.url", c.ConfigUrl)
	c.UpdateBody("events", c.Events)
	c.UpdateBody("name", c.Name)
	return c.DoRequest("POST")
}

type OrgsDeleteWebhookCmd struct {
	Org    string `name:"org" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *OrgsDeleteWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/hooks/{hook_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("DELETE")
}

type OrgsGetCmd struct {
	Surtur bool   `name:"surtur-preview"`
	Org    string `name:"org" required:"true"`
	internal.BaseCmd
}

func (c *OrgsGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}")
	c.UpdateURLPath("org", c.Org)
	c.UpdatePreview("surtur", c.Surtur)
	return c.DoRequest("GET")
}

type OrgsGetMembershipForAuthenticatedUserCmd struct {
	Org string `name:"org" required:"true"`
	internal.BaseCmd
}

func (c *OrgsGetMembershipForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/memberships/orgs/{org}")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type OrgsGetMembershipForUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsGetMembershipForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/memberships/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type OrgsGetWebhookCmd struct {
	Org    string `name:"org" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *OrgsGetWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/hooks/{hook_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("GET")
}

type OrgsListAppInstallationsCmd struct {
	MachineMan bool   `name:"machine-man-preview" required:"true"`
	Org        string `name:"org" required:"true"`
	Page       int64  `name:"page"`
	PerPage    int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListAppInstallationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/installations")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("machine-man", c.MachineMan)
	return c.DoRequest("GET")
}

type OrgsListBlockedUsersCmd struct {
	Org string `name:"org" required:"true"`
	internal.BaseCmd
}

func (c *OrgsListBlockedUsersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/blocks")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type OrgsListCmd struct {
	Since int64 `name:"since"`
	internal.BaseCmd
}

func (c *OrgsListCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/organizations")
	c.UpdateURLQuery("since", c.Since)
	return c.DoRequest("GET")
}

type OrgsListForAuthenticatedUserCmd struct {
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/orgs")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListForUserCmd struct {
	Username string `name:"username" required:"true"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/{username}/orgs")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListInvitationTeamsCmd struct {
	Org          string `name:"org" required:"true"`
	InvitationId int64  `name:"invitation_id" required:"true"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListInvitationTeamsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/invitations/{invitation_id}/teams")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("invitation_id", c.InvitationId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListMembersCmd struct {
	Org     string `name:"org" required:"true"`
	Filter  string `name:"filter"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Role    string `name:"role"`
	internal.BaseCmd
}

func (c *OrgsListMembersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/members")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("filter", c.Filter)
	c.UpdateURLQuery("role", c.Role)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListMembershipsForAuthenticatedUserCmd struct {
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	State   string `name:"state"`
	internal.BaseCmd
}

func (c *OrgsListMembershipsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/memberships/orgs")
	c.UpdateURLQuery("state", c.State)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListOutsideCollaboratorsCmd struct {
	Org     string `name:"org" required:"true"`
	Filter  string `name:"filter"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListOutsideCollaboratorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/outside_collaborators")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("filter", c.Filter)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListPendingInvitationsCmd struct {
	Org     string `name:"org" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListPendingInvitationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/invitations")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListPublicMembersCmd struct {
	Org     string `name:"org" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListPublicMembersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/public_members")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsListSamlSsoAuthorizationsCmd struct {
	Org string `name:"org" required:"true"`
	internal.BaseCmd
}

func (c *OrgsListSamlSsoAuthorizationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/credential-authorizations")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type OrgsListWebhooksCmd struct {
	Org     string `name:"org" required:"true"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *OrgsListWebhooksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/hooks")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type OrgsPingWebhookCmd struct {
	Org    string `name:"org" required:"true"`
	HookId int64  `name:"hook_id" required:"true"`
	internal.BaseCmd
}

func (c *OrgsPingWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/hooks/{hook_id}/pings")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("hook_id", c.HookId)
	return c.DoRequest("POST")
}

type OrgsRemoveMemberCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsRemoveMemberCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/members/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type OrgsRemoveMembershipForUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsRemoveMembershipForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/memberships/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type OrgsRemoveOutsideCollaboratorCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsRemoveOutsideCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/outside_collaborators/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type OrgsRemovePublicMembershipForAuthenticatedUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsRemovePublicMembershipForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/public_members/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type OrgsRemoveSamlSsoAuthorizationCmd struct {
	Org          string `name:"org" required:"true"`
	CredentialId int64  `name:"credential_id" required:"true"`
	internal.BaseCmd
}

func (c *OrgsRemoveSamlSsoAuthorizationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/credential-authorizations/{credential_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("credential_id", c.CredentialId)
	return c.DoRequest("DELETE")
}

type OrgsSetMembershipForUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	Role     string `name:"role"`
	internal.BaseCmd
}

func (c *OrgsSetMembershipForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/memberships/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	c.UpdateBody("role", c.Role)
	return c.DoRequest("PUT")
}

type OrgsSetPublicMembershipForAuthenticatedUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsSetPublicMembershipForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/public_members/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type OrgsUnblockUserCmd struct {
	Org      string `name:"org" required:"true"`
	Username string `name:"username" required:"true"`
	internal.BaseCmd
}

func (c *OrgsUnblockUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/blocks/{username}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type OrgsUpdateCmd struct {
	Surtur                               bool   `name:"surtur-preview"`
	Org                                  string `name:"org" required:"true"`
	BillingEmail                         string `name:"billing_email"`
	Company                              string `name:"company"`
	DefaultRepositoryPermission          string `name:"default_repository_permission"`
	Description                          string `name:"description"`
	Email                                string `name:"email"`
	HasOrganizationProjects              bool   `name:"has_organization_projects"`
	HasRepositoryProjects                bool   `name:"has_repository_projects"`
	Location                             string `name:"location"`
	MembersAllowedRepositoryCreationType string `name:"members_allowed_repository_creation_type"`
	MembersCanCreateInternalRepositories bool   `name:"members_can_create_internal_repositories"`
	MembersCanCreatePrivateRepositories  bool   `name:"members_can_create_private_repositories"`
	MembersCanCreatePublicRepositories   bool   `name:"members_can_create_public_repositories"`
	MembersCanCreateRepositories         bool   `name:"members_can_create_repositories"`
	Name                                 string `name:"name"`
	TwitterUsername                      string `name:"twitter_username"`
	internal.BaseCmd
}

func (c *OrgsUpdateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}")
	c.UpdateURLPath("org", c.Org)
	c.UpdatePreview("surtur", c.Surtur)
	c.UpdateBody("billing_email", c.BillingEmail)
	c.UpdateBody("company", c.Company)
	c.UpdateBody("default_repository_permission", c.DefaultRepositoryPermission)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("email", c.Email)
	c.UpdateBody("has_organization_projects", c.HasOrganizationProjects)
	c.UpdateBody("has_repository_projects", c.HasRepositoryProjects)
	c.UpdateBody("location", c.Location)
	c.UpdateBody("members_allowed_repository_creation_type", c.MembersAllowedRepositoryCreationType)
	c.UpdateBody("members_can_create_internal_repositories", c.MembersCanCreateInternalRepositories)
	c.UpdateBody("members_can_create_private_repositories", c.MembersCanCreatePrivateRepositories)
	c.UpdateBody("members_can_create_public_repositories", c.MembersCanCreatePublicRepositories)
	c.UpdateBody("members_can_create_repositories", c.MembersCanCreateRepositories)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("twitter_username", c.TwitterUsername)
	return c.DoRequest("PATCH")
}

type OrgsUpdateMembershipForAuthenticatedUserCmd struct {
	Org   string `name:"org" required:"true"`
	State string `name:"state" required:"true"`
	internal.BaseCmd
}

func (c *OrgsUpdateMembershipForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/memberships/orgs/{org}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("state", c.State)
	return c.DoRequest("PATCH")
}

type OrgsUpdateWebhookCmd struct {
	Org               string   `name:"org" required:"true"`
	HookId            int64    `name:"hook_id" required:"true"`
	Active            bool     `name:"active"`
	ConfigContentType string   `name:"config.content_type"`
	ConfigInsecureSsl string   `name:"config.insecure_ssl"`
	ConfigSecret      string   `name:"config.secret"`
	ConfigUrl         string   `name:"config.url"`
	Events            []string `name:"events"`
	internal.BaseCmd
}

func (c *OrgsUpdateWebhookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/hooks/{hook_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("config.content_type", c.ConfigContentType)
	c.UpdateBody("config.insecure_ssl", c.ConfigInsecureSsl)
	c.UpdateBody("config.secret", c.ConfigSecret)
	c.UpdateBody("config.url", c.ConfigUrl)
	c.UpdateBody("events", c.Events)
	return c.DoRequest("PATCH")
}
