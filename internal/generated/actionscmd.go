// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import (
	"github.com/octo-cli/octo-cli/internal"
)

type ActionsCmd struct {
	AddSelectedRepoToOrgSecret      ActionsAddSelectedRepoToOrgSecretCmd      `cmd:""`
	CancelWorkflowRun               ActionsCancelWorkflowRunCmd               `cmd:""`
	CreateOrUpdateOrgSecret         ActionsCreateOrUpdateOrgSecretCmd         `cmd:""`
	CreateOrUpdateRepoSecret        ActionsCreateOrUpdateRepoSecretCmd        `cmd:""`
	CreateRegistrationTokenForOrg   ActionsCreateRegistrationTokenForOrgCmd   `cmd:""`
	CreateRegistrationTokenForRepo  ActionsCreateRegistrationTokenForRepoCmd  `cmd:""`
	CreateRemoveTokenForOrg         ActionsCreateRemoveTokenForOrgCmd         `cmd:""`
	CreateRemoveTokenForRepo        ActionsCreateRemoveTokenForRepoCmd        `cmd:""`
	DeleteArtifact                  ActionsDeleteArtifactCmd                  `cmd:""`
	DeleteOrgSecret                 ActionsDeleteOrgSecretCmd                 `cmd:""`
	DeleteRepoSecret                ActionsDeleteRepoSecretCmd                `cmd:""`
	DeleteSelfHostedRunnerFromOrg   ActionsDeleteSelfHostedRunnerFromOrgCmd   `cmd:""`
	DeleteSelfHostedRunnerFromRepo  ActionsDeleteSelfHostedRunnerFromRepoCmd  `cmd:""`
	DeleteWorkflowRunLogs           ActionsDeleteWorkflowRunLogsCmd           `cmd:""`
	DownloadArtifact                ActionsDownloadArtifactCmd                `cmd:""`
	DownloadWorkflowJobLogs         ActionsDownloadWorkflowJobLogsCmd         `cmd:""`
	DownloadWorkflowRunLogs         ActionsDownloadWorkflowRunLogsCmd         `cmd:""`
	GetArtifact                     ActionsGetArtifactCmd                     `cmd:""`
	GetOrgPublicKey                 ActionsGetOrgPublicKeyCmd                 `cmd:""`
	GetOrgSecret                    ActionsGetOrgSecretCmd                    `cmd:""`
	GetRepoPublicKey                ActionsGetRepoPublicKeyCmd                `cmd:""`
	GetRepoSecret                   ActionsGetRepoSecretCmd                   `cmd:""`
	GetSelfHostedRunnerForOrg       ActionsGetSelfHostedRunnerForOrgCmd       `cmd:""`
	GetSelfHostedRunnerForRepo      ActionsGetSelfHostedRunnerForRepoCmd      `cmd:""`
	GetWorkflow                     ActionsGetWorkflowCmd                     `cmd:""`
	GetWorkflowJob                  ActionsGetWorkflowJobCmd                  `cmd:""`
	GetWorkflowRun                  ActionsGetWorkflowRunCmd                  `cmd:""`
	GetWorkflowRunUsage             ActionsGetWorkflowRunUsageCmd             `cmd:""`
	GetWorkflowUsage                ActionsGetWorkflowUsageCmd                `cmd:""`
	ListArtifactsForRepo            ActionsListArtifactsForRepoCmd            `cmd:""`
	ListJobsForWorkflowRun          ActionsListJobsForWorkflowRunCmd          `cmd:""`
	ListOrgSecrets                  ActionsListOrgSecretsCmd                  `cmd:""`
	ListRepoSecrets                 ActionsListRepoSecretsCmd                 `cmd:""`
	ListRepoWorkflowRuns            ActionsListRepoWorkflowRunsCmd            `cmd:""`
	ListRepoWorkflows               ActionsListRepoWorkflowsCmd               `cmd:""`
	ListRunnerApplicationsForOrg    ActionsListRunnerApplicationsForOrgCmd    `cmd:""`
	ListRunnerApplicationsForRepo   ActionsListRunnerApplicationsForRepoCmd   `cmd:""`
	ListSelectedReposForOrgSecret   ActionsListSelectedReposForOrgSecretCmd   `cmd:""`
	ListSelfHostedRunnersForOrg     ActionsListSelfHostedRunnersForOrgCmd     `cmd:""`
	ListSelfHostedRunnersForRepo    ActionsListSelfHostedRunnersForRepoCmd    `cmd:""`
	ListWorkflowRunArtifacts        ActionsListWorkflowRunArtifactsCmd        `cmd:""`
	ListWorkflowRuns                ActionsListWorkflowRunsCmd                `cmd:""`
	ReRunWorkflow                   ActionsReRunWorkflowCmd                   `cmd:""`
	RemoveSelectedRepoFromOrgSecret ActionsRemoveSelectedRepoFromOrgSecretCmd `cmd:""`
	SetSelectedReposForOrgSecret    ActionsSetSelectedReposForOrgSecretCmd    `cmd:""`
}

type ActionsAddSelectedRepoToOrgSecretCmd struct {
	Org          string `required:"" name:"org"`
	SecretName   string `required:"" name:"secret_name"`
	RepositoryId int64  `required:"" name:"repository_id"`
	internal.BaseCmd
}

func (c *ActionsAddSelectedRepoToOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	c.UpdateURLPath("repository_id", c.RepositoryId)
	return c.DoRequest("PUT")
}

type ActionsCancelWorkflowRunCmd struct {
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsCancelWorkflowRunCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/cancel")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("POST")
}

type ActionsCreateOrUpdateOrgSecretCmd struct {
	Org                   string   `required:"" name:"org"`
	SecretName            string   `required:"" name:"secret_name"`
	EncryptedValue        string   `name:"encrypted_value"`
	KeyId                 string   `name:"key_id"`
	SelectedRepositoryIds []string `name:"selected_repository_ids"`
	Visibility            string   `name:"visibility"`
	internal.BaseCmd
}

func (c *ActionsCreateOrUpdateOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	c.UpdateBody("encrypted_value", c.EncryptedValue)
	c.UpdateBody("key_id", c.KeyId)
	c.UpdateBody("selected_repository_ids", c.SelectedRepositoryIds)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("PUT")
}

type ActionsCreateOrUpdateRepoSecretCmd struct {
	Repo           string `required:"" name:"repo"`
	SecretName     string `required:"" name:"secret_name"`
	EncryptedValue string `name:"encrypted_value"`
	KeyId          string `name:"key_id"`
	internal.BaseCmd
}

func (c *ActionsCreateOrUpdateRepoSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/secrets/{secret_name}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("secret_name", c.SecretName)
	c.UpdateBody("encrypted_value", c.EncryptedValue)
	c.UpdateBody("key_id", c.KeyId)
	return c.DoRequest("PUT")
}

type ActionsCreateRegistrationTokenForOrgCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsCreateRegistrationTokenForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/registration-token")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("POST")
}

type ActionsCreateRegistrationTokenForRepoCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsCreateRegistrationTokenForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runners/registration-token")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ActionsCreateRemoveTokenForOrgCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsCreateRemoveTokenForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/remove-token")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("POST")
}

type ActionsCreateRemoveTokenForRepoCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsCreateRemoveTokenForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runners/remove-token")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ActionsDeleteArtifactCmd struct {
	Repo       string `required:"" name:"repo"`
	ArtifactId int64  `required:"" name:"artifact_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteArtifactCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/artifacts/{artifact_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("artifact_id", c.ArtifactId)
	return c.DoRequest("DELETE")
}

type ActionsDeleteOrgSecretCmd struct {
	Org        string `required:"" name:"org"`
	SecretName string `required:"" name:"secret_name"`
	internal.BaseCmd
}

func (c *ActionsDeleteOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	return c.DoRequest("DELETE")
}

type ActionsDeleteRepoSecretCmd struct {
	Repo       string `required:"" name:"repo"`
	SecretName string `required:"" name:"secret_name"`
	internal.BaseCmd
}

func (c *ActionsDeleteRepoSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/secrets/{secret_name}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("secret_name", c.SecretName)
	return c.DoRequest("DELETE")
}

type ActionsDeleteSelfHostedRunnerFromOrgCmd struct {
	Org      string `required:"" name:"org"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteSelfHostedRunnerFromOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/{runner_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("DELETE")
}

type ActionsDeleteSelfHostedRunnerFromRepoCmd struct {
	Repo     string `required:"" name:"repo"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteSelfHostedRunnerFromRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runners/{runner_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("DELETE")
}

type ActionsDeleteWorkflowRunLogsCmd struct {
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteWorkflowRunLogsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/logs")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("DELETE")
}

type ActionsDownloadArtifactCmd struct {
	Repo          string `required:"" name:"repo"`
	ArtifactId    int64  `required:"" name:"artifact_id"`
	ArchiveFormat string `required:"" name:"archive_format"`
	internal.BaseCmd
}

func (c *ActionsDownloadArtifactCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/artifacts/{artifact_id}/{archive_format}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("artifact_id", c.ArtifactId)
	c.UpdateURLPath("archive_format", c.ArchiveFormat)
	return c.DoRequest("GET")
}

type ActionsDownloadWorkflowJobLogsCmd struct {
	Repo  string `required:"" name:"repo"`
	JobId int64  `required:"" name:"job_id"`
	internal.BaseCmd
}

func (c *ActionsDownloadWorkflowJobLogsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/jobs/{job_id}/logs")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("job_id", c.JobId)
	return c.DoRequest("GET")
}

type ActionsDownloadWorkflowRunLogsCmd struct {
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsDownloadWorkflowRunLogsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/logs")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsGetArtifactCmd struct {
	Repo       string `required:"" name:"repo"`
	ArtifactId int64  `required:"" name:"artifact_id"`
	internal.BaseCmd
}

func (c *ActionsGetArtifactCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/artifacts/{artifact_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("artifact_id", c.ArtifactId)
	return c.DoRequest("GET")
}

type ActionsGetOrgPublicKeyCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsGetOrgPublicKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/public-key")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type ActionsGetOrgSecretCmd struct {
	Org        string `required:"" name:"org"`
	SecretName string `required:"" name:"secret_name"`
	internal.BaseCmd
}

func (c *ActionsGetOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	return c.DoRequest("GET")
}

type ActionsGetRepoPublicKeyCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsGetRepoPublicKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/secrets/public-key")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsGetRepoSecretCmd struct {
	Repo       string `required:"" name:"repo"`
	SecretName string `required:"" name:"secret_name"`
	internal.BaseCmd
}

func (c *ActionsGetRepoSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/secrets/{secret_name}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("secret_name", c.SecretName)
	return c.DoRequest("GET")
}

type ActionsGetSelfHostedRunnerForOrgCmd struct {
	Org      string `required:"" name:"org"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsGetSelfHostedRunnerForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/{runner_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("GET")
}

type ActionsGetSelfHostedRunnerForRepoCmd struct {
	Repo     string `required:"" name:"repo"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsGetSelfHostedRunnerForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runners/{runner_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowCmd struct {
	Repo       string `required:"" name:"repo"`
	WorkflowId int64  `required:"" name:"workflow_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/workflows/{workflow_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("workflow_id", c.WorkflowId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowJobCmd struct {
	Repo  string `required:"" name:"repo"`
	JobId int64  `required:"" name:"job_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowJobCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/jobs/{job_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("job_id", c.JobId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowRunCmd struct {
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowRunCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowRunUsageCmd struct {
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowRunUsageCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/timing")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowUsageCmd struct {
	Repo       string `required:"" name:"repo"`
	WorkflowId int64  `required:"" name:"workflow_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowUsageCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/workflows/{workflow_id}/timing")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("workflow_id", c.WorkflowId)
	return c.DoRequest("GET")
}

type ActionsListArtifactsForRepoCmd struct {
	Repo    string `required:"" name:"repo"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListArtifactsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/artifacts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListJobsForWorkflowRunCmd struct {
	Repo    string `required:"" name:"repo"`
	RunId   int64  `required:"" name:"run_id"`
	Filter  string `name:"filter"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListJobsForWorkflowRunCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/jobs")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	c.UpdateURLQuery("filter", c.Filter)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListOrgSecretsCmd struct {
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListOrgSecretsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListRepoSecretsCmd struct {
	Repo    string `required:"" name:"repo"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListRepoSecretsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/secrets")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListRepoWorkflowRunsCmd struct {
	Repo    string `required:"" name:"repo"`
	Actor   string `name:"actor"`
	Branch  string `name:"branch"`
	Event   string `name:"event"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Status  string `name:"status"`
	internal.BaseCmd
}

func (c *ActionsListRepoWorkflowRunsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("actor", c.Actor)
	c.UpdateURLQuery("branch", c.Branch)
	c.UpdateURLQuery("event", c.Event)
	c.UpdateURLQuery("status", c.Status)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListRepoWorkflowsCmd struct {
	Repo    string `required:"" name:"repo"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListRepoWorkflowsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/workflows")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListRunnerApplicationsForOrgCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsListRunnerApplicationsForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/downloads")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type ActionsListRunnerApplicationsForRepoCmd struct {
	Repo string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsListRunnerApplicationsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runners/downloads")
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsListSelectedReposForOrgSecretCmd struct {
	Org        string `required:"" name:"org"`
	SecretName string `required:"" name:"secret_name"`
	internal.BaseCmd
}

func (c *ActionsListSelectedReposForOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}/repositories")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	return c.DoRequest("GET")
}

type ActionsListSelfHostedRunnersForOrgCmd struct {
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListSelfHostedRunnersForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListSelfHostedRunnersForRepoCmd struct {
	Repo    string `required:"" name:"repo"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListSelfHostedRunnersForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runners")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListWorkflowRunArtifactsCmd struct {
	Repo    string `required:"" name:"repo"`
	RunId   int64  `required:"" name:"run_id"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListWorkflowRunArtifactsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/artifacts")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsListWorkflowRunsCmd struct {
	Repo       string `required:"" name:"repo"`
	WorkflowId int64  `required:"" name:"workflow_id"`
	Actor      string `name:"actor"`
	Branch     string `name:"branch"`
	Event      string `name:"event"`
	Page       int64  `name:"page"`
	PerPage    int64  `name:"per_page"`
	Status     string `name:"status"`
	internal.BaseCmd
}

func (c *ActionsListWorkflowRunsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/workflows/{workflow_id}/runs")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("workflow_id", c.WorkflowId)
	c.UpdateURLQuery("actor", c.Actor)
	c.UpdateURLQuery("branch", c.Branch)
	c.UpdateURLQuery("event", c.Event)
	c.UpdateURLQuery("status", c.Status)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type ActionsReRunWorkflowCmd struct {
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsReRunWorkflowCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/actions/runs/{run_id}/rerun")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("POST")
}

type ActionsRemoveSelectedRepoFromOrgSecretCmd struct {
	Org          string `required:"" name:"org"`
	SecretName   string `required:"" name:"secret_name"`
	RepositoryId int64  `required:"" name:"repository_id"`
	internal.BaseCmd
}

func (c *ActionsRemoveSelectedRepoFromOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	c.UpdateURLPath("repository_id", c.RepositoryId)
	return c.DoRequest("DELETE")
}

type ActionsSetSelectedReposForOrgSecretCmd struct {
	Org                   string  `required:"" name:"org"`
	SecretName            string  `required:"" name:"secret_name"`
	SelectedRepositoryIds []int64 `name:"selected_repository_ids"`
	internal.BaseCmd
}

func (c *ActionsSetSelectedReposForOrgSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/secrets/{secret_name}/repositories")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("secret_name", c.SecretName)
	c.UpdateBody("selected_repository_ids", c.SelectedRepositoryIds)
	return c.DoRequest("PUT")
}
