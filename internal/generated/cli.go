// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

type CLI struct {
	Actions             ActionsCmd             `cmd:""`
	Activity            ActivityCmd            `cmd:""`
	Apps                AppsCmd                `cmd:""`
	Checks              ChecksCmd              `cmd:""`
	CodeScanning        CodeScanningCmd        `cmd:""`
	CodesOfConduct      CodesOfConductCmd      `cmd:""`
	Emojis              EmojisCmd              `cmd:""`
	Gists               GistsCmd               `cmd:""`
	Git                 GitCmd                 `cmd:""`
	Gitignore           GitignoreCmd           `cmd:""`
	Interactions        InteractionsCmd        `cmd:""`
	Issues              IssuesCmd              `cmd:""`
	Licenses            LicensesCmd            `cmd:""`
	Markdown            MarkdownCmd            `cmd:""`
	Meta                MetaCmd                `cmd:""`
	Migrations          MigrationsCmd          `cmd:""`
	OauthAuthorizations OauthAuthorizationsCmd `cmd:""`
	Orgs                OrgsCmd                `cmd:""`
	Projects            ProjectsCmd            `cmd:""`
	Pulls               PullsCmd               `cmd:""`
	RateLimit           RateLimitCmd           `cmd:""`
	Reactions           ReactionsCmd           `cmd:""`
	Repos               ReposCmd               `cmd:""`
	Scim                ScimCmd                `cmd:""`
	Search              SearchCmd              `cmd:""`
	Teams               TeamsCmd               `cmd:""`
	Users               UsersCmd               `cmd:""`
}

var CmdHelps = map[string]map[string]string{
	"actions": {
		"add-selected-repo-to-org-secret":      "Add selected repository to an organization secret - https://developer.github.com/v3/actions/secrets/#add-selected-repository-to-an-organization-secret",
		"cancel-workflow-run":                  "Cancel a workflow run - https://developer.github.com/v3/actions/workflow-runs/#cancel-a-workflow-run",
		"create-or-update-org-secret":          "Create or update an organization secret - https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret",
		"create-or-update-repo-secret":         "Create or update a repository secret - https://developer.github.com/v3/actions/secrets/#create-or-update-a-repository-secret",
		"create-registration-token-for-org":    "Create a registration token for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization",
		"create-registration-token-for-repo":   "Create a registration token for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository",
		"create-remove-token-for-org":          "Create a remove token for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization",
		"create-remove-token-for-repo":         "Create a remove token for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository",
		"delete-artifact":                      "Delete an artifact - https://developer.github.com/v3/actions/artifacts/#delete-an-artifact",
		"delete-org-secret":                    "Delete an organization secret - https://developer.github.com/v3/actions/secrets/#delete-an-organization-secret",
		"delete-repo-secret":                   "Delete a repository secret - https://developer.github.com/v3/actions/secrets/#delete-a-repository-secret",
		"delete-self-hosted-runner-from-org":   "Delete a self-hosted runner from an organization - https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-an-organization",
		"delete-self-hosted-runner-from-repo":  "Delete a self-hosted runner from a repository - https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-a-repository",
		"delete-workflow-run-logs":             "Delete workflow run logs - https://developer.github.com/v3/actions/workflow-runs/#delete-workflow-run-logs",
		"download-artifact":                    "Download an artifact - https://developer.github.com/v3/actions/artifacts/#download-an-artifact",
		"download-job-logs-for-workflow-run":   "Download job logs for a workflow run - https://developer.github.com/v3/actions/workflow-jobs/#download-job-logs-for-a-workflow-run",
		"download-workflow-run-logs":           "Download workflow run logs - https://developer.github.com/v3/actions/workflow-runs/#download-workflow-run-logs",
		"get-artifact":                         "Get an artifact - https://developer.github.com/v3/actions/artifacts/#get-an-artifact",
		"get-job-for-workflow-run":             "Get a job for a workflow run - https://developer.github.com/v3/actions/workflow-jobs/#get-a-job-for-a-workflow-run",
		"get-org-public-key":                   "Get an organization public key - https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key",
		"get-org-secret":                       "Get an organization secret - https://developer.github.com/v3/actions/secrets/#get-an-organization-secret",
		"get-repo-public-key":                  "Get a repository public key - https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key",
		"get-repo-secret":                      "Get a repository secret - https://developer.github.com/v3/actions/secrets/#get-a-repository-secret",
		"get-self-hosted-runner-for-org":       "Get a self-hosted runner for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization",
		"get-self-hosted-runner-for-repo":      "Get a self-hosted runner for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository",
		"get-workflow":                         "Get a workflow - https://developer.github.com/v3/actions/workflows/#get-a-workflow",
		"get-workflow-run":                     "Get a workflow run - https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run",
		"get-workflow-run-usage":               "Get workflow run usage - https://developer.github.com/v3/actions/workflow-runs/#get-workflow-run-usage",
		"get-workflow-usage":                   "Get workflow usage - https://developer.github.com/v3/actions/workflows/#get-workflow-usage",
		"list-artifacts-for-repo":              "List artifacts for a repository - https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository",
		"list-jobs-for-workflow-run":           "List jobs for a workflow run - https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run",
		"list-org-secrets":                     "List organization secrets - https://developer.github.com/v3/actions/secrets/#list-organization-secrets",
		"list-repo-secrets":                    "List repository secrets - https://developer.github.com/v3/actions/secrets/#list-repository-secrets",
		"list-repo-workflows":                  "List repository workflows - https://developer.github.com/v3/actions/workflows/#list-repository-workflows",
		"list-runner-applications-for-org":     "List runner applications for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization",
		"list-runner-applications-for-repo":    "List runner applications for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository",
		"list-selected-repos-for-org-secret":   "List selected repositories for an organization secret - https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret",
		"list-self-hosted-runners-for-org":     "List self-hosted runners for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization",
		"list-self-hosted-runners-for-repo":    "List self-hosted runners for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository",
		"list-workflow-run-artifacts":          "List workflow run artifacts - https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts",
		"list-workflow-runs":                   "List workflow runs - https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs",
		"list-workflow-runs-for-repo":          "List workflow runs for a repository - https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs-for-a-repository",
		"re-run-workflow":                      "Re-run a workflow - https://developer.github.com/v3/actions/workflow-runs/#re-run-a-workflow",
		"remove-selected-repo-from-org-secret": "Remove selected repository from an organization secret - https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret",
		"set-selected-repos-for-org-secret":    "Set selected repositories for an organization secret - https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret",
	},
	"activity": {
		"check-repo-is-starred-by-authenticated-user":    "Check if a repository is starred by the authenticated user - https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user",
		"delete-repo-subscription":                       "Delete a repository subscription - https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription",
		"delete-thread-subscription":                     "Delete a thread subscription - https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription",
		"get-feeds":                                      "Get feeds - https://developer.github.com/v3/activity/feeds/#get-feeds",
		"get-repo-subscription":                          "Get a repository subscription - https://developer.github.com/v3/activity/watching/#get-a-repository-subscription",
		"get-thread":                                     "Get a thread - https://developer.github.com/v3/activity/notifications/#get-a-thread",
		"get-thread-subscription-for-authenticated-user": "Get a thread subscription for the authenticated user - https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user",
		"list-events-for-authenticated-user":             "List events for the authenticated user - https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user",
		"list-notifications-for-authenticated-user":      "List notifications for the authenticated user - https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user",
		"list-org-events-for-authenticated-user":         "List organization events for the authenticated user - https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user",
		"list-public-events":                             "List public events - https://developer.github.com/v3/activity/events/#list-public-events",
		"list-public-events-for-repo-network":            "List public events for a network of repositories - https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories",
		"list-public-events-for-user":                    "List public events for a user - https://developer.github.com/v3/activity/events/#list-public-events-for-a-user",
		"list-public-org-events":                         "List public organization events - https://developer.github.com/v3/activity/events/#list-public-organization-events",
		"list-received-events-for-user":                  "List events received by the authenticated user - https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user",
		"list-received-public-events-for-user":           "List public events received by a user - https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user",
		"list-repo-events":                               "List repository events - https://developer.github.com/v3/activity/events/#list-repository-events",
		"list-repo-notifications-for-authenticated-user": "List repository notifications for the authenticated user - https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user",
		"list-repos-starred-by-authenticated-user":       "List repositories starred by the authenticated user - https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user",
		"list-repos-starred-by-user":                     "List repositories starred by a user - https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user",
		"list-repos-watched-by-user":                     "List repositories watched by a user - https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user",
		"list-stargazers-for-repo":                       "List stargazers - https://developer.github.com/v3/activity/starring/#list-stargazers",
		"list-watched-repos-for-authenticated-user":      "List repositories watched by the authenticated user - https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user",
		"list-watchers-for-repo":                         "List watchers - https://developer.github.com/v3/activity/watching/#list-watchers",
		"mark-notifications-as-read":                     "Mark notifications as read - https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read",
		"mark-repo-notifications-as-read":                "Mark repository notifications as read - https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read",
		"mark-thread-as-read":                            "Mark a thread as read - https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read",
		"set-repo-subscription":                          "Set a repository subscription - https://developer.github.com/v3/activity/watching/#set-a-repository-subscription",
		"set-thread-subscription":                        "Set a thread subscription - https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription",
		"star-repo-for-authenticated-user":               "Star a repository for the authenticated user - https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user",
		"unstar-repo-for-authenticated-user":             "Unstar a repository for the authenticated user - https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user",
	},
	"apps": {
		"add-repo-to-installation":                          "Add a repository to an app installation - https://developer.github.com/v3/apps/installations/#add-a-repository-to-an-app-installation",
		"check-authorization":                               "Check an authorization - https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization",
		"check-token":                                       "Check a token - https://developer.github.com/v3/apps/oauth_applications/#check-a-token",
		"create-content-attachment":                         "Create a content attachment - https://developer.github.com/v3/apps/installations/#create-a-content-attachment",
		"create-from-manifest":                              "Create a GitHub App from a manifest - https://developer.github.com/v3/apps/#create-a-github-app-from-a-manifest",
		"create-installation-access-token":                  "Create an installation access token for an app - https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app",
		"delete-authorization":                              "Delete an app authorization - https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-authorization",
		"delete-installation":                               "Delete an installation for the authenticated app - https://developer.github.com/v3/apps/#delete-an-installation-for-the-authenticated-app",
		"delete-token":                                      "Delete an app token - https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-token",
		"get-authenticated":                                 "Get the authenticated app - https://developer.github.com/v3/apps/#get-the-authenticated-app",
		"get-by-slug":                                       "Get an app - https://developer.github.com/v3/apps/#get-an-app",
		"get-installation":                                  "Get an installation for the authenticated app - https://developer.github.com/v3/apps/#get-an-installation-for-the-authenticated-app",
		"get-org-installation":                              "Get an organization installation for the authenticated app - https://developer.github.com/v3/apps/#get-an-organization-installation-for-the-authenticated-app",
		"get-repo-installation":                             "Get a repository installation for the authenticated app - https://developer.github.com/v3/apps/#get-a-repository-installation-for-the-authenticated-app",
		"get-subscription-plan-for-account":                 "Get a subscription plan for an account - https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account",
		"get-subscription-plan-for-account-stubbed":         "Get a subscription plan for an account (stubbed) - https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account-stubbed",
		"get-user-installation":                             "Get a user installation for the authenticated app - https://developer.github.com/v3/apps/#get-a-user-installation-for-the-authenticated-app",
		"list-accounts-for-plan":                            "List accounts for a plan - https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan",
		"list-accounts-for-plan-stubbed":                    "List accounts for a plan (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan-stubbed",
		"list-installation-repos-for-authenticated-user":    "List repositories accessible to the user access token - https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-access-token",
		"list-installations":                                "List installations for the authenticated app - https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app",
		"list-installations-for-authenticated-user":         "List app installations accessible to the user access token - https://developer.github.com/v3/apps/installations/#list-app-installations-accessible-to-the-user-access-token",
		"list-plans":                                        "List plans - https://developer.github.com/v3/apps/marketplace/#list-plans",
		"list-plans-stubbed":                                "List plans (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-plans-stubbed",
		"list-repos-accessible-to-installation":             "List repositories accessible to the app installation - https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-app-installation",
		"list-subscriptions-for-authenticated-user":         "List subscriptions for the authenticated user - https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user",
		"list-subscriptions-for-authenticated-user-stubbed": "List subscriptions for the authenticated user (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user-stubbed",
		"remove-repo-from-installation":                     "Remove a repository from an app installation - https://developer.github.com/v3/apps/installations/#remove-a-repository-from-an-app-installation",
		"reset-authorization":                               "Reset an authorization - https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization",
		"reset-token":                                       "Reset a token - https://developer.github.com/v3/apps/oauth_applications/#reset-a-token",
		"revoke-authorization-for-application":              "Revoke an authorization for an application - https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application",
		"revoke-grant-for-application":                      "Revoke a grant for an application - https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application",
		"revoke-installation-access-token":                  "Revoke an installation access token - https://developer.github.com/v3/apps/installations/#revoke-an-installation-access-token",
		"suspend-installation":                              "Suspend an app installation - https://developer.github.com/v3/apps/#suspend-an-app-installation",
		"unsuspend-installation":                            "Unsuspend an app installation - https://developer.github.com/v3/apps/#unsuspend-an-app-installation",
	},
	"checks": {
		"create":                 "Create a check run - https://developer.github.com/v3/checks/runs/#create-a-check-run",
		"create-suite":           "Create a check suite - https://developer.github.com/v3/checks/suites/#create-a-check-suite",
		"get":                    "Get a check run - https://developer.github.com/v3/checks/runs/#get-a-check-run",
		"get-suite":              "Get a check suite - https://developer.github.com/v3/checks/suites/#get-a-check-suite",
		"list-annotations":       "List check run annotations - https://developer.github.com/v3/checks/runs/#list-check-run-annotations",
		"list-for-ref":           "List check runs for a Git reference - https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference",
		"list-for-suite":         "List check runs in a check suite - https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite",
		"list-suites-for-ref":    "List check suites for a Git reference - https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference",
		"rerequest-suite":        "Rerequest a check suite - https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite",
		"set-suites-preferences": "Update repository preferences for check suites - https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites",
		"update":                 "Update a check run - https://developer.github.com/v3/checks/runs/#update-a-check-run",
	},
	"code-scanning": {
		"get-alert":            "Get a code scanning alert - https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert",
		"list-alerts-for-repo": "List code scanning alerts for a repository - https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository",
	},
	"codes-of-conduct": {
		"get-all-codes-of-conduct": "Get all codes of conduct - https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct",
		"get-conduct-code":         "Get a code of conduct - https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct",
		"get-for-repo":             "Get the code of conduct for a repository - https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository",
	},
	"emojis": {"get": "Get emojis - https://developer.github.com/v3/emojis/#get-emojis"},
	"gists": {
		"check-is-starred": "Check if a gist is starred - https://developer.github.com/v3/gists/#check-if-a-gist-is-starred",
		"create":           "Create a gist - https://developer.github.com/v3/gists/#create-a-gist",
		"create-comment":   "Create a gist comment - https://developer.github.com/v3/gists/comments/#create-a-gist-comment",
		"delete":           "Delete a gist - https://developer.github.com/v3/gists/#delete-a-gist",
		"delete-comment":   "Delete a gist comment - https://developer.github.com/v3/gists/comments/#delete-a-gist-comment",
		"fork":             "Fork a gist - https://developer.github.com/v3/gists/#fork-a-gist",
		"get":              "Get a gist - https://developer.github.com/v3/gists/#get-a-gist",
		"get-comment":      "Get a gist comment - https://developer.github.com/v3/gists/comments/#get-a-gist-comment",
		"get-revision":     "Get a gist revision - https://developer.github.com/v3/gists/#get-a-gist-revision",
		"list":             "List gists for the authenticated user - https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user",
		"list-comments":    "List gist comments - https://developer.github.com/v3/gists/comments/#list-gist-comments",
		"list-commits":     "List gist commits - https://developer.github.com/v3/gists/#list-gist-commits",
		"list-for-user":    "List gists for a user - https://developer.github.com/v3/gists/#list-gists-for-a-user",
		"list-forks":       "List gist forks - https://developer.github.com/v3/gists/#list-gist-forks",
		"list-public":      "List public gists - https://developer.github.com/v3/gists/#list-public-gists",
		"list-starred":     "List starred gists - https://developer.github.com/v3/gists/#list-starred-gists",
		"star":             "Star a gist - https://developer.github.com/v3/gists/#star-a-gist",
		"unstar":           "Unstar a gist - https://developer.github.com/v3/gists/#unstar-a-gist",
		"update":           "Update a gist - https://developer.github.com/v3/gists/#update-a-gist",
		"update-comment":   "Update a gist comment - https://developer.github.com/v3/gists/comments/#update-a-gist-comment",
	},
	"git": {
		"create-blob":        "Create a blob - https://developer.github.com/v3/git/blobs/#create-a-blob",
		"create-commit":      "Create a commit - https://developer.github.com/v3/git/commits/#create-a-commit",
		"create-ref":         "Create a reference - https://developer.github.com/v3/git/refs/#create-a-reference",
		"create-tag":         "Create a tag object - https://developer.github.com/v3/git/tags/#create-a-tag-object",
		"create-tree":        "Create a tree - https://developer.github.com/v3/git/trees/#create-a-tree",
		"delete-ref":         "Delete a reference - https://developer.github.com/v3/git/refs/#delete-a-reference",
		"get-blob":           "Get a blob - https://developer.github.com/v3/git/blobs/#get-a-blob",
		"get-commit":         "Get a commit - https://developer.github.com/v3/git/commits/#get-a-commit",
		"get-ref":            "Get a reference - https://developer.github.com/v3/git/refs/#get-a-reference",
		"get-tag":            "Get a tag - https://developer.github.com/v3/git/tags/#get-a-tag",
		"get-tree":           "Get a tree - https://developer.github.com/v3/git/trees/#get-a-tree",
		"list-matching-refs": "List matching references - https://developer.github.com/v3/git/refs/#list-matching-references",
		"update-ref":         "Update a reference - https://developer.github.com/v3/git/refs/#update-a-reference",
	},
	"gitignore": {
		"get-all-templates": "Get all gitignore templates - https://developer.github.com/v3/gitignore/#get-all-gitignore-templates",
		"get-template":      "Get a gitignore template - https://developer.github.com/v3/gitignore/#get-a-gitignore-template",
	},
	"interactions": {
		"get-restrictions-for-org":     "Get interaction restrictions for an organization - https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization",
		"get-restrictions-for-repo":    "Get interaction restrictions for a repository - https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository",
		"remove-restrictions-for-org":  "Remove interaction restrictions for an organization - https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization",
		"remove-restrictions-for-repo": "Remove interaction restrictions for a repository - https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository",
		"set-restrictions-for-org":     "Set interaction restrictions for an organization - https://developer.github.com/v3/interactions/orgs/#set-interaction-restrictions-for-an-organization",
		"set-restrictions-for-repo":    "Set interaction restrictions for a repository - https://developer.github.com/v3/interactions/repos/#set-interaction-restrictions-for-a-repository",
	},
	"issues": {
		"add-assignees":               "Add assignees to an issue - https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue",
		"add-labels":                  "Add labels to an issue - https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue",
		"check-user-can-be-assigned":  "Check if a user can be assigned - https://developer.github.com/v3/issues/assignees/#check-if-a-user-can-be-assigned",
		"create":                      "Create an issue - https://developer.github.com/v3/issues/#create-an-issue",
		"create-comment":              "Create an issue comment - https://developer.github.com/v3/issues/comments/#create-an-issue-comment",
		"create-label":                "Create a label - https://developer.github.com/v3/issues/labels/#create-a-label",
		"create-milestone":            "Create a milestone - https://developer.github.com/v3/issues/milestones/#create-a-milestone",
		"delete-comment":              "Delete an issue comment - https://developer.github.com/v3/issues/comments/#delete-an-issue-comment",
		"delete-label":                "Delete a label - https://developer.github.com/v3/issues/labels/#delete-a-label",
		"delete-milestone":            "Delete a milestone - https://developer.github.com/v3/issues/milestones/#delete-a-milestone",
		"get":                         "Get an issue - https://developer.github.com/v3/issues/#get-an-issue",
		"get-comment":                 "Get an issue comment - https://developer.github.com/v3/issues/comments/#get-an-issue-comment",
		"get-event":                   "Get an issue event - https://developer.github.com/v3/issues/events/#get-an-issue-event",
		"get-label":                   "Get a label - https://developer.github.com/v3/issues/labels/#get-a-label",
		"get-milestone":               "Get a milestone - https://developer.github.com/v3/issues/milestones/#get-a-milestone",
		"list":                        "List issues assigned to the authenticated user - https://developer.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user",
		"list-assignees":              "List assignees - https://developer.github.com/v3/issues/assignees/#list-assignees",
		"list-comments":               "List issue comments - https://developer.github.com/v3/issues/comments/#list-issue-comments",
		"list-comments-for-repo":      "List issue comments for a repository - https://developer.github.com/v3/issues/comments/#list-issue-comments-for-a-repository",
		"list-events":                 "List issue events - https://developer.github.com/v3/issues/events/#list-issue-events",
		"list-events-for-repo":        "List issue events for a repository - https://developer.github.com/v3/issues/events/#list-issue-events-for-a-repository",
		"list-events-for-timeline":    "List timeline events for an issue - https://developer.github.com/v3/issues/timeline/#list-timeline-events-for-an-issue",
		"list-for-authenticated-user": "List user account issues assigned to the authenticated user - https://developer.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user",
		"list-for-org":                "List organization issues assigned to the authenticated user - https://developer.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user",
		"list-for-repo":               "List repository issues - https://developer.github.com/v3/issues/#list-repository-issues",
		"list-labels-for-milestone":   "List labels for issues in a milestone - https://developer.github.com/v3/issues/labels/#list-labels-for-issues-in-a-milestone",
		"list-labels-for-repo":        "List labels for a repository - https://developer.github.com/v3/issues/labels/#list-labels-for-a-repository",
		"list-labels-on-issue":        "List labels for an issue - https://developer.github.com/v3/issues/labels/#list-labels-for-an-issue",
		"list-milestones":             "List milestones - https://developer.github.com/v3/issues/milestones/#list-milestones",
		"lock":                        "Lock an issue - https://developer.github.com/v3/issues/#lock-an-issue",
		"remove-all-labels":           "Remove all labels from an issue - https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue",
		"remove-assignees":            "Remove assignees from an issue - https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue",
		"remove-label":                "Remove a label from an issue - https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue",
		"set-labels":                  "Set labels for an issue - https://developer.github.com/v3/issues/labels/#set-labels-for-an-issue",
		"unlock":                      "Unlock an issue - https://developer.github.com/v3/issues/#unlock-an-issue",
		"update":                      "Update an issue - https://developer.github.com/v3/issues/#update-an-issue",
		"update-comment":              "Update an issue comment - https://developer.github.com/v3/issues/comments/#update-an-issue-comment",
		"update-label":                "Update a label - https://developer.github.com/v3/issues/labels/#update-a-label",
		"update-milestone":            "Update a milestone - https://developer.github.com/v3/issues/milestones/#update-a-milestone",
	},
	"licenses": {
		"get":                   "Get a license - https://developer.github.com/v3/licenses/#get-a-license",
		"get-all-commonly-used": "Get all commonly used licenses - https://developer.github.com/v3/licenses/#get-all-commonly-used-licenses",
		"get-for-repo":          "Get the license for a repository - https://developer.github.com/v3/licenses/#get-the-license-for-a-repository",
	},
	"markdown": {
		"render":     "Render a Markdown document - https://developer.github.com/v3/markdown/#render-a-markdown-document",
		"render-raw": "Render a Markdown document in raw mode - https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode",
	},
	"meta": {"get": "Get GitHub meta information - https://developer.github.com/v3/meta/#get-github-meta-information"},
	"migrations": {
		"cancel-import":                         "Cancel an import - https://developer.github.com/v3/migrations/source_imports/#cancel-an-import",
		"delete-archive-for-authenticated-user": "Delete a user migration archive - https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive",
		"delete-archive-for-org":                "Delete an organization migration archive - https://developer.github.com/v3/migrations/orgs/#delete-an-organization-migration-archive",
		"download-archive-for-org":              "Download an organization migration archive - https://developer.github.com/v3/migrations/orgs/#download-an-organization-migration-archive",
		"get-archive-for-authenticated-user":    "Download a user migration archive - https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive",
		"get-commit-authors":                    "Get commit authors - https://developer.github.com/v3/migrations/source_imports/#get-commit-authors",
		"get-import-status":                     "Get an import status - https://developer.github.com/v3/migrations/source_imports/#get-an-import-status",
		"get-large-files":                       "Get large files - https://developer.github.com/v3/migrations/source_imports/#get-large-files",
		"get-status-for-authenticated-user":     "Get a user migration status - https://developer.github.com/v3/migrations/users/#get-a-user-migration-status",
		"get-status-for-org":                    "Get an organization migration status - https://developer.github.com/v3/migrations/orgs/#get-an-organization-migration-status",
		"list-for-authenticated-user":           "List user migrations - https://developer.github.com/v3/migrations/users/#list-user-migrations",
		"list-for-org":                          "List organization migrations - https://developer.github.com/v3/migrations/orgs/#list-organization-migrations",
		"list-repos-for-org":                    "List repositories in an organization migration - https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration",
		"list-repos-for-user":                   "List repositories for a user migration - https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration",
		"map-commit-author":                     "Map a commit author - https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author",
		"set-lfs-preference":                    "Update Git LFS preference - https://developer.github.com/v3/migrations/source_imports/#update-git-lfs-preference",
		"start-for-authenticated-user":          "Start a user migration - https://developer.github.com/v3/migrations/users/#start-a-user-migration",
		"start-for-org":                         "Start an organization migration - https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration",
		"start-import":                          "Start an import - https://developer.github.com/v3/migrations/source_imports/#start-an-import",
		"unlock-repo-for-authenticated-user":    "Unlock a user repository - https://developer.github.com/v3/migrations/users/#unlock-a-user-repository",
		"unlock-repo-for-org":                   "Unlock an organization repository - https://developer.github.com/v3/migrations/orgs/#unlock-an-organization-repository",
		"update-import":                         "Update an import - https://developer.github.com/v3/migrations/source_imports/#update-an-import",
	},
	"oauth-authorizations": {
		"create-authorization":                "Create a new authorization - https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization",
		"delete-authorization":                "Delete an authorization - https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization",
		"delete-grant":                        "Delete a grant - https://developer.github.com/v3/oauth_authorizations/#delete-a-grant",
		"get-authorization":                   "Get a single authorization - https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization",
		"get-grant":                           "Get a single grant - https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant",
		"get-or-create-authorization-for-app": "Get-or-create an authorization for a specific app - https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app",
		"get-or-create-authorization-for-app-and-fingerprint": "Get-or-create an authorization for a specific app and fingerprint - https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint",
		"list-authorizations":  "List your authorizations - https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations",
		"list-grants":          "List your grants - https://developer.github.com/v3/oauth_authorizations/#list-your-grants",
		"update-authorization": "Update an existing authorization - https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization",
	},
	"orgs": {
		"block-user":                                      "Block a user from an organization - https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization",
		"check-blocked-user":                              "Check if a user is blocked by an organization - https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization",
		"check-membership-for-user":                       "Check organization membership for a user - https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user",
		"check-public-membership-for-user":                "Check public organization membership for a user - https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user",
		"convert-member-to-outside-collaborator":          "Convert an organization member to outside collaborator - https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator",
		"create-invitation":                               "Create an organization invitation - https://developer.github.com/v3/orgs/members/#create-an-organization-invitation",
		"create-webhook":                                  "Create an organization webhook - https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook",
		"delete-webhook":                                  "Delete an organization webhook - https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook",
		"get":                                             "Get an organization - https://developer.github.com/v3/orgs/#get-an-organization",
		"get-membership-for-authenticated-user":           "Get an organization membership for the authenticated user - https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user",
		"get-membership-for-user":                         "Get organization membership for a user - https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user",
		"get-webhook":                                     "Get an organization webhook - https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook",
		"list":                                            "List organizations - https://developer.github.com/v3/orgs/#list-organizations",
		"list-app-installations":                          "List app installations for an organization - https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization",
		"list-blocked-users":                              "List users blocked by an organization - https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization",
		"list-for-authenticated-user":                     "List organizations for the authenticated user - https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user",
		"list-for-user":                                   "List organizations for a user - https://developer.github.com/v3/orgs/#list-organizations-for-a-user",
		"list-invitation-teams":                           "List organization invitation teams - https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams",
		"list-members":                                    "List organization members - https://developer.github.com/v3/orgs/members/#list-organization-members",
		"list-memberships-for-authenticated-user":         "List organization memberships for the authenticated user - https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user",
		"list-outside-collaborators":                      "List outside collaborators for an organization - https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization",
		"list-pending-invitations":                        "List pending organization invitations - https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations",
		"list-public-members":                             "List public organization members - https://developer.github.com/v3/orgs/members/#list-public-organization-members",
		"list-saml-sso-authorizations":                    "List SAML SSO authorizations for an organization - https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization",
		"list-webhooks":                                   "List organization webhooks - https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks",
		"ping-webhook":                                    "Ping an organization webhook - https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook",
		"remove-member":                                   "Remove an organization member - https://developer.github.com/v3/orgs/members/#remove-an-organization-member",
		"remove-membership-for-user":                      "Remove organization membership for a user - https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user",
		"remove-outside-collaborator":                     "Remove outside collaborator from an organization - https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization",
		"remove-public-membership-for-authenticated-user": "Remove public organization membership for the authenticated user - https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user",
		"remove-saml-sso-authorization":                   "Remove a SAML SSO authorization for an organization - https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization",
		"set-membership-for-user":                         "Set organization membership for a user - https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user",
		"set-public-membership-for-authenticated-user":    "Set public organization membership for the authenticated user - https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user",
		"unblock-user":                                    "Unblock a user from an organization - https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization",
		"update":                                          "Update an organization - https://developer.github.com/v3/orgs/#update-an-organization",
		"update-membership-for-authenticated-user":        "Update an organization membership for the authenticated user - https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user",
		"update-webhook":                                  "Update an organization webhook - https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook",
	},
	"projects": {
		"add-collaborator":              "Add project collaborator - https://developer.github.com/v3/projects/collaborators/#add-project-collaborator",
		"create-card":                   "Create a project card - https://developer.github.com/v3/projects/cards/#create-a-project-card",
		"create-column":                 "Create a project column - https://developer.github.com/v3/projects/columns/#create-a-project-column",
		"create-for-authenticated-user": "Create a user project - https://developer.github.com/v3/projects/#create-a-user-project",
		"create-for-org":                "Create an organization project - https://developer.github.com/v3/projects/#create-an-organization-project",
		"create-for-repo":               "Create a repository project - https://developer.github.com/v3/projects/#create-a-repository-project",
		"delete":                        "Delete a project - https://developer.github.com/v3/projects/#delete-a-project",
		"delete-card":                   "Delete a project card - https://developer.github.com/v3/projects/cards/#delete-a-project-card",
		"delete-column":                 "Delete a project column - https://developer.github.com/v3/projects/columns/#delete-a-project-column",
		"get":                           "Get a project - https://developer.github.com/v3/projects/#get-a-project",
		"get-card":                      "Get a project card - https://developer.github.com/v3/projects/cards/#get-a-project-card",
		"get-column":                    "Get a project column - https://developer.github.com/v3/projects/columns/#get-a-project-column",
		"get-permission-for-user":       "Get project permission for a user - https://developer.github.com/v3/projects/collaborators/#get-project-permission-for-a-user",
		"list-cards":                    "List project cards - https://developer.github.com/v3/projects/cards/#list-project-cards",
		"list-collaborators":            "List project collaborators - https://developer.github.com/v3/projects/collaborators/#list-project-collaborators",
		"list-columns":                  "List project columns - https://developer.github.com/v3/projects/columns/#list-project-columns",
		"list-for-org":                  "List organization projects - https://developer.github.com/v3/projects/#list-organization-projects",
		"list-for-repo":                 "List repository projects - https://developer.github.com/v3/projects/#list-repository-projects",
		"list-for-user":                 "List user projects - https://developer.github.com/v3/projects/#list-user-projects",
		"move-card":                     "Move a project card - https://developer.github.com/v3/projects/cards/#move-a-project-card",
		"move-column":                   "Move a project column - https://developer.github.com/v3/projects/columns/#move-a-project-column",
		"remove-collaborator":           "Remove project collaborator - https://developer.github.com/v3/projects/collaborators/#remove-project-collaborator",
		"update":                        "Update a project - https://developer.github.com/v3/projects/#update-a-project",
		"update-card":                   "Update a project card - https://developer.github.com/v3/projects/cards/#update-a-project-card",
		"update-column":                 "Update a project column - https://developer.github.com/v3/projects/columns/#update-a-project-column",
	},
	"pulls": {
		"check-if-merged":                 "Check if a pull request has been merged - https://developer.github.com/v3/pulls/#check-if-a-pull-request-has-been-merged",
		"create":                          "Create a pull request - https://developer.github.com/v3/pulls/#create-a-pull-request",
		"create-reply-for-review-comment": "Create a reply for a review comment - https://developer.github.com/v3/pulls/comments/#create-a-reply-for-a-review-comment",
		"create-review":                   "Create a review for a pull request - https://developer.github.com/v3/pulls/reviews/#create-a-review-for-a-pull-request",
		"create-review-comment":           "Create a review comment for a pull request - https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request",
		"delete-pending-review":           "Delete a pending review for a pull request - https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review-for-a-pull-request",
		"delete-review-comment":           "Delete a review comment for a pull request - https://developer.github.com/v3/pulls/comments/#delete-a-review-comment-for-a-pull-request",
		"dismiss-review":                  "Dismiss a review for a pull request - https://developer.github.com/v3/pulls/reviews/#dismiss-a-review-for-a-pull-request",
		"get":                             "Get a pull request - https://developer.github.com/v3/pulls/#get-a-pull-request",
		"get-review":                      "Get a review for a pull request - https://developer.github.com/v3/pulls/reviews/#get-a-review-for-a-pull-request",
		"get-review-comment":              "Get a review comment for a pull request - https://developer.github.com/v3/pulls/comments/#get-a-review-comment-for-a-pull-request",
		"list":                            "List pull requests - https://developer.github.com/v3/pulls/#list-pull-requests",
		"list-comments-for-review":        "List comments for a pull request review - https://developer.github.com/v3/pulls/reviews/#list-comments-for-a-pull-request-review",
		"list-commits":                    "List commits on a pull request - https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request",
		"list-files":                      "List pull requests files - https://developer.github.com/v3/pulls/#list-pull-requests-files",
		"list-requested-reviewers":        "List requested reviewers for a pull request - https://developer.github.com/v3/pulls/review_requests/#list-requested-reviewers-for-a-pull-request",
		"list-review-comments":            "List review comments on a pull request - https://developer.github.com/v3/pulls/comments/#list-review-comments-on-a-pull-request",
		"list-review-comments-for-repo":   "List review comments in a repository - https://developer.github.com/v3/pulls/comments/#list-review-comments-in-a-repository",
		"list-reviews":                    "List reviews for a pull request - https://developer.github.com/v3/pulls/reviews/#list-reviews-for-a-pull-request",
		"merge":                           "Merge a pull request - https://developer.github.com/v3/pulls/#merge-a-pull-request",
		"remove-requested-reviewers":      "Remove requested reviewers from a pull request - https://developer.github.com/v3/pulls/review_requests/#remove-requested-reviewers-from-a-pull-request",
		"request-reviewers":               "Request reviewers for a pull request - https://developer.github.com/v3/pulls/review_requests/#request-reviewers-for-a-pull-request",
		"submit-review":                   "Submit a review for a pull request - https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request",
		"update":                          "Update a pull request - https://developer.github.com/v3/pulls/#update-a-pull-request",
		"update-branch":                   "Update a pull request branch - https://developer.github.com/v3/pulls/#update-a-pull-request-branch",
		"update-review":                   "Update a review for a pull request - https://developer.github.com/v3/pulls/reviews/#update-a-review-for-a-pull-request",
		"update-review-comment":           "Update a review comment for a pull request - https://developer.github.com/v3/pulls/comments/#update-a-review-comment-for-a-pull-request",
	},
	"rate-limit": {"get": "Get rate limit status for the authenticated user - https://developer.github.com/v3/rate_limit/#get-rate-limit-status-for-the-authenticated-user"},
	"reactions": {
		"create-for-commit-comment":                 "Create reaction for a commit comment - https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment",
		"create-for-issue":                          "Create reaction for an issue - https://developer.github.com/v3/reactions/#create-reaction-for-an-issue",
		"create-for-issue-comment":                  "Create reaction for an issue comment - https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment",
		"create-for-pull-request-review-comment":    "Create reaction for a pull request review comment - https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment",
		"create-for-team-discussion-comment-in-org": "Create reaction for a team discussion comment - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment",
		"create-for-team-discussion-comment-legacy": "Create reaction for a team discussion comment (Legacy) - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy",
		"create-for-team-discussion-in-org":         "Create reaction for a team discussion - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion",
		"create-for-team-discussion-legacy":         "Create reaction for a team discussion (Legacy) - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy",
		"delete-for-commit-comment":                 "Delete a commit comment reaction - https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction",
		"delete-for-issue":                          "Delete an issue reaction - https://developer.github.com/v3/reactions/#delete-an-issue-reaction",
		"delete-for-issue-comment":                  "Delete an issue comment reaction - https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction",
		"delete-for-pull-request-comment":           "Delete a pull request comment reaction - https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction",
		"delete-for-team-discussion":                "Delete team discussion reaction - https://developer.github.com/v3/reactions/#delete-team-discussion-reaction",
		"delete-for-team-discussion-comment":        "Delete team discussion comment reaction - https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction",
		"delete-legacy":                             "Delete a reaction (Legacy) - https://developer.github.com/v3/reactions/#delete-a-reaction-legacy",
		"list-for-commit-comment":                   "List reactions for a commit comment - https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment",
		"list-for-issue":                            "List reactions for an issue - https://developer.github.com/v3/reactions/#list-reactions-for-an-issue",
		"list-for-issue-comment":                    "List reactions for an issue comment - https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment",
		"list-for-pull-request-review-comment":      "List reactions for a pull request review comment - https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment",
		"list-for-team-discussion-comment-in-org":   "List reactions for a team discussion comment - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment",
		"list-for-team-discussion-comment-legacy":   "List reactions for a team discussion comment (Legacy) - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy",
		"list-for-team-discussion-in-org":           "List reactions for a team discussion - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion",
		"list-for-team-discussion-legacy":           "List reactions for a team discussion (Legacy) - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy",
	},
	"repos": {
		"accept-invitation":                         "Accept a repository invitation - https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation",
		"add-app-access-restrictions":               "Add app access restrictions - https://developer.github.com/v3/repos/branches/#add-app-access-restrictions",
		"add-collaborator":                          "Add a repository collaborator - https://developer.github.com/v3/repos/collaborators/#add-a-repository-collaborator",
		"add-status-check-contexts":                 "Add status check contexts - https://developer.github.com/v3/repos/branches/#add-status-check-contexts",
		"add-team-access-restrictions":              "Add team access restrictions - https://developer.github.com/v3/repos/branches/#add-team-access-restrictions",
		"add-user-access-restrictions":              "Add user access restrictions - https://developer.github.com/v3/repos/branches/#add-user-access-restrictions",
		"check-collaborator":                        "Check if a user is a repository collaborator - https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-repository-collaborator",
		"check-vulnerability-alerts":                "Check if vulnerability alerts are enabled for a repository - https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository",
		"compare-commits":                           "Compare two commits - https://developer.github.com/v3/repos/commits/#compare-two-commits",
		"create-commit-comment":                     "Create a commit comment - https://developer.github.com/v3/repos/comments/#create-a-commit-comment",
		"create-commit-signature-protection":        "Create commit signature protection - https://developer.github.com/v3/repos/branches/#create-commit-signature-protection",
		"create-commit-status":                      "Create a commit status - https://developer.github.com/v3/repos/statuses/#create-a-commit-status",
		"create-deploy-key":                         "Create a deploy key - https://developer.github.com/v3/repos/keys/#create-a-deploy-key",
		"create-deployment":                         "Create a deployment - https://developer.github.com/v3/repos/deployments/#create-a-deployment",
		"create-deployment-status":                  "Create a deployment status - https://developer.github.com/v3/repos/deployments/#create-a-deployment-status",
		"create-dispatch-event":                     "Create a repository dispatch event - https://developer.github.com/v3/repos/#create-a-repository-dispatch-event",
		"create-for-authenticated-user":             "Create a repository for the authenticated user - https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user",
		"create-fork":                               "Create a fork - https://developer.github.com/v3/repos/forks/#create-a-fork",
		"create-in-org":                             "Create an organization repository - https://developer.github.com/v3/repos/#create-an-organization-repository",
		"create-or-update-file-contents":            "Create or update file contents - https://developer.github.com/v3/repos/contents/#create-or-update-file-contents",
		"create-pages-site":                         "Create a GitHub Pages site - https://developer.github.com/v3/repos/pages/#create-a-github-pages-site",
		"create-release":                            "Create a release - https://developer.github.com/v3/repos/releases/#create-a-release",
		"create-using-template":                     "Create a repository using a template - https://developer.github.com/v3/repos/#create-a-repository-using-a-template",
		"create-webhook":                            "Create a repository webhook - https://developer.github.com/v3/repos/hooks/#create-a-repository-webhook",
		"decline-invitation":                        "Decline a repository invitation - https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation",
		"delete":                                    "Delete a repository - https://developer.github.com/v3/repos/#delete-a-repository",
		"delete-access-restrictions":                "Delete access restrictions - https://developer.github.com/v3/repos/branches/#delete-access-restrictions",
		"delete-admin-branch-protection":            "Delete admin branch protection - https://developer.github.com/v3/repos/branches/#delete-admin-branch-protection",
		"delete-branch-protection":                  "Delete branch protection - https://developer.github.com/v3/repos/branches/#delete-branch-protection",
		"delete-commit-comment":                     "Delete a commit comment - https://developer.github.com/v3/repos/comments/#delete-a-commit-comment",
		"delete-commit-signature-protection":        "Delete commit signature protection - https://developer.github.com/v3/repos/branches/#delete-commit-signature-protection",
		"delete-deploy-key":                         "Delete a deploy key - https://developer.github.com/v3/repos/keys/#delete-a-deploy-key",
		"delete-deployment":                         "Delete a deployment - https://developer.github.com/v3/repos/deployments/#delete-a-deployment",
		"delete-file":                               "Delete a file - https://developer.github.com/v3/repos/contents/#delete-a-file",
		"delete-invitation":                         "Delete a repository invitation - https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation",
		"delete-pages-site":                         "Delete a GitHub Pages site - https://developer.github.com/v3/repos/pages/#delete-a-github-pages-site",
		"delete-pull-request-review-protection":     "Delete pull request review protection - https://developer.github.com/v3/repos/branches/#delete-pull-request-review-protection",
		"delete-release":                            "Delete a release - https://developer.github.com/v3/repos/releases/#delete-a-release",
		"delete-release-asset":                      "Delete a release asset - https://developer.github.com/v3/repos/releases/#delete-a-release-asset",
		"delete-webhook":                            "Delete a repository webhook - https://developer.github.com/v3/repos/hooks/#delete-a-repository-webhook",
		"disable-automated-security-fixes":          "Disable automated security fixes - https://developer.github.com/v3/repos/#disable-automated-security-fixes",
		"disable-vulnerability-alerts":              "Disable vulnerability alerts - https://developer.github.com/v3/repos/#disable-vulnerability-alerts",
		"download-archive":                          "Download a repository archive - https://developer.github.com/v3/repos/contents/#download-a-repository-archive",
		"enable-automated-security-fixes":           "Enable automated security fixes - https://developer.github.com/v3/repos/#enable-automated-security-fixes",
		"enable-vulnerability-alerts":               "Enable vulnerability alerts - https://developer.github.com/v3/repos/#enable-vulnerability-alerts",
		"get":                                       "Get a repository - https://developer.github.com/v3/repos/#get-a-repository",
		"get-access-restrictions":                   "Get access restrictions - https://developer.github.com/v3/repos/branches/#get-access-restrictions",
		"get-admin-branch-protection":               "Get admin branch protection - https://developer.github.com/v3/repos/branches/#get-admin-branch-protection",
		"get-all-status-check-contexts":             "Get all status check contexts - https://developer.github.com/v3/repos/branches/#get-all-status-check-contexts",
		"get-all-topics":                            "Get all repository topics - https://developer.github.com/v3/repos/#get-all-repository-topics",
		"get-apps-with-access-to-protected-branch":  "Get apps with access to the protected branch - https://developer.github.com/v3/repos/branches/#list-apps-with-access-to-the-protected-branch",
		"get-branch":                                "Get a branch - https://developer.github.com/v3/repos/branches/#get-a-branch",
		"get-branch-protection":                     "Get branch protection - https://developer.github.com/v3/repos/branches/#get-branch-protection",
		"get-clones":                                "Get repository clones - https://developer.github.com/v3/repos/traffic/#get-repository-clones",
		"get-code-frequency-stats":                  "Get the weekly commit activity - https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-activity",
		"get-collaborator-permission-level":         "Get repository permissions for a user - https://developer.github.com/v3/repos/collaborators/#get-repository-permissions-for-a-user",
		"get-combined-status-for-ref":               "Get the combined status for a specific reference - https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-reference",
		"get-commit":                                "Get a commit - https://developer.github.com/v3/repos/commits/#get-a-commit",
		"get-commit-activity-stats":                 "Get the last year of commit activity - https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity",
		"get-commit-comment":                        "Get a commit comment - https://developer.github.com/v3/repos/comments/#get-a-commit-comment",
		"get-commit-signature-protection":           "Get commit signature protection - https://developer.github.com/v3/repos/branches/#get-commit-signature-protection",
		"get-community-profile-metrics":             "Get community profile metrics - https://developer.github.com/v3/repos/community/#get-community-profile-metrics",
		"get-content":                               "Get repository content - https://developer.github.com/v3/repos/contents/#get-repository-content",
		"get-contributors-stats":                    "Get all contributor commit activity - https://developer.github.com/v3/repos/statistics/#get-all-contributor-commit-activity",
		"get-deploy-key":                            "Get a deploy key - https://developer.github.com/v3/repos/keys/#get-a-deploy-key",
		"get-deployment":                            "Get a deployment - https://developer.github.com/v3/repos/deployments/#get-a-deployment",
		"get-deployment-status":                     "Get a deployment status - https://developer.github.com/v3/repos/deployments/#get-a-deployment-status",
		"get-latest-pages-build":                    "Get latest Pages build - https://developer.github.com/v3/repos/pages/#get-latest-pages-build",
		"get-latest-release":                        "Get the latest release - https://developer.github.com/v3/repos/releases/#get-the-latest-release",
		"get-pages":                                 "Get a GitHub Pages site - https://developer.github.com/v3/repos/pages/#get-a-github-pages-site",
		"get-pages-build":                           "Get GitHub Pages build - https://developer.github.com/v3/repos/pages/#get-github-pages-build",
		"get-participation-stats":                   "Get the weekly commit count - https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count",
		"get-pull-request-review-protection":        "Get pull request review protection - https://developer.github.com/v3/repos/branches/#get-pull-request-review-protection",
		"get-punch-card-stats":                      "Get the hourly commit count for each day - https://developer.github.com/v3/repos/statistics/#get-the-hourly-commit-count-for-each-day",
		"get-readme":                                "Get a repository README - https://developer.github.com/v3/repos/contents/#get-a-repository-readme",
		"get-release":                               "Get a release - https://developer.github.com/v3/repos/releases/#get-a-release",
		"get-release-asset":                         "Get a release asset - https://developer.github.com/v3/repos/releases/#get-a-release-asset",
		"get-release-by-tag":                        "Get a release by tag name - https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name",
		"get-status-checks-protection":              "Get status checks protection - https://developer.github.com/v3/repos/branches/#get-status-checks-protection",
		"get-teams-with-access-to-protected-branch": "Get teams with access to the protected branch - https://developer.github.com/v3/repos/branches/#list-teams-with-access-to-the-protected-branch",
		"get-top-paths":                             "Get top referral paths - https://developer.github.com/v3/repos/traffic/#get-top-referral-paths",
		"get-top-referrers":                         "Get top referral sources - https://developer.github.com/v3/repos/traffic/#get-top-referral-sources",
		"get-users-with-access-to-protected-branch": "Get users with access to the protected branch - https://developer.github.com/v3/repos/branches/#list-users-with-access-to-the-protected-branch",
		"get-views":                                 "Get page views - https://developer.github.com/v3/repos/traffic/#get-page-views",
		"get-webhook":                               "Get a repository webhook - https://developer.github.com/v3/repos/hooks/#get-a-repository-webhook",
		"list-branches":                             "List branches - https://developer.github.com/v3/repos/branches/#list-branches",
		"list-branches-for-head-commit":             "List branches for HEAD commit - https://developer.github.com/v3/repos/commits/#list-branches-for-head-commit",
		"list-collaborators":                        "List repository collaborators - https://developer.github.com/v3/repos/collaborators/#list-repository-collaborators",
		"list-comments-for-commit":                  "List commit comments - https://developer.github.com/v3/repos/comments/#list-commit-comments",
		"list-commit-comments-for-repo":             "List commit comments for a repository - https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository",
		"list-commit-statuses-for-ref":              "List commit statuses for a reference - https://developer.github.com/v3/repos/statuses/#list-commit-statuses-for-a-reference",
		"list-commits":                              "List commits - https://developer.github.com/v3/repos/commits/#list-commits",
		"list-contributors":                         "List repository contributors - https://developer.github.com/v3/repos/#list-repository-contributors",
		"list-deploy-keys":                          "List deploy keys - https://developer.github.com/v3/repos/keys/#list-deploy-keys",
		"list-deployment-statuses":                  "List deployment statuses - https://developer.github.com/v3/repos/deployments/#list-deployment-statuses",
		"list-deployments":                          "List deployments - https://developer.github.com/v3/repos/deployments/#list-deployments",
		"list-for-authenticated-user":               "List repositories for the authenticated user - https://developer.github.com/v3/repos/#list-repositories-for-the-authenticated-user",
		"list-for-org":                              "List organization repositories - https://developer.github.com/v3/repos/#list-organization-repositories",
		"list-for-user":                             "List repositories for a user - https://developer.github.com/v3/repos/#list-repositories-for-a-user",
		"list-forks":                                "List forks - https://developer.github.com/v3/repos/forks/#list-forks",
		"list-invitations":                          "List repository invitations - https://developer.github.com/v3/repos/invitations/#list-repository-invitations",
		"list-invitations-for-authenticated-user":   "List repository invitations for the authenticated user - https://developer.github.com/v3/repos/invitations/#list-repository-invitations-for-the-authenticated-user",
		"list-languages":                            "List repository languages - https://developer.github.com/v3/repos/#list-repository-languages",
		"list-pages-builds":                         "List GitHub Pages builds - https://developer.github.com/v3/repos/pages/#list-github-pages-builds",
		"list-public":                               "List public repositories - https://developer.github.com/v3/repos/#list-public-repositories",
		"list-pull-requests-associated-with-commit": "List pull requests associated with a commit - https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-a-commit",
		"list-release-assets":                       "List release assets - https://developer.github.com/v3/repos/releases/#list-release-assets",
		"list-releases":                             "List releases - https://developer.github.com/v3/repos/releases/#list-releases",
		"list-tags":                                 "List repository tags - https://developer.github.com/v3/repos/#list-repository-tags",
		"list-teams":                                "List repository teams - https://developer.github.com/v3/repos/#list-repository-teams",
		"list-webhooks":                             "List repository webhooks - https://developer.github.com/v3/repos/hooks/#list-repository-webhooks",
		"merge":                                     "Merge a branch - https://developer.github.com/v3/repos/merging/#merge-a-branch",
		"ping-webhook":                              "Ping a repository webhook - https://developer.github.com/v3/repos/hooks/#ping-a-repository-webhook",
		"remove-app-access-restrictions":            "Remove app access restrictions - https://developer.github.com/v3/repos/branches/#remove-app-access-restrictions",
		"remove-collaborator":                       "Remove a repository collaborator - https://developer.github.com/v3/repos/collaborators/#remove-a-repository-collaborator",
		"remove-status-check-contexts":              "Remove status check contexts - https://developer.github.com/v3/repos/branches/#remove-status-check-contexts",
		"remove-status-check-protection":            "Remove status check protection - https://developer.github.com/v3/repos/branches/#remove-status-check-protection",
		"remove-team-access-restrictions":           "Remove team access restrictions - https://developer.github.com/v3/repos/branches/#remove-team-access-restrictions",
		"remove-user-access-restrictions":           "Remove user access restrictions - https://developer.github.com/v3/repos/branches/#remove-user-access-restrictions",
		"replace-all-topics":                        "Replace all repository topics - https://developer.github.com/v3/repos/#replace-all-repository-topics",
		"request-pages-build":                       "Request a GitHub Pages build - https://developer.github.com/v3/repos/pages/#request-a-github-pages-build",
		"set-admin-branch-protection":               "Set admin branch protection - https://developer.github.com/v3/repos/branches/#set-admin-branch-protection",
		"set-app-access-restrictions":               "Set app access restrictions - https://developer.github.com/v3/repos/branches/#set-app-access-restrictions",
		"set-status-check-contexts":                 "Set status check contexts - https://developer.github.com/v3/repos/branches/#set-status-check-contexts",
		"set-team-access-restrictions":              "Set team access restrictions - https://developer.github.com/v3/repos/branches/#set-team-access-restrictions",
		"set-user-access-restrictions":              "Set user access restrictions - https://developer.github.com/v3/repos/branches/#set-user-access-restrictions",
		"test-push-webhook":                         "Test the push repository webhook - https://developer.github.com/v3/repos/hooks/#test-the-push-repository-webhook",
		"transfer":                                  "Transfer a repository - https://developer.github.com/v3/repos/#transfer-a-repository",
		"update":                                    "Update a repository - https://developer.github.com/v3/repos/#update-a-repository",
		"update-branch-protection":                  "Update branch protection - https://developer.github.com/v3/repos/branches/#update-branch-protection",
		"update-commit-comment":                     "Update a commit comment - https://developer.github.com/v3/repos/comments/#update-a-commit-comment",
		"update-information-about-pages-site":       "Update information about a GitHub Pages site - https://developer.github.com/v3/repos/pages/#update-information-about-a-github-pages-site",
		"update-invitation":                         "Update a repository invitation - https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation",
		"update-pull-request-review-protection":     "Update pull request review protection - https://developer.github.com/v3/repos/branches/#update-pull-request-review-protection",
		"update-release":                            "Update a release - https://developer.github.com/v3/repos/releases/#update-a-release",
		"update-release-asset":                      "Update a release asset - https://developer.github.com/v3/repos/releases/#update-a-release-asset",
		"update-status-check-potection":             "Update status check potection - https://developer.github.com/v3/repos/branches/#update-status-check-potection",
		"update-webhook":                            "Update a repository webhook - https://developer.github.com/v3/repos/hooks/#update-a-repository-webhook",
		"upload-release-asset":                      "Upload a release asset - https://developer.github.com/v3/repos/releases/#upload-a-release-asset",
	},
	"scim": {
		"delete-user-from-org":                  "Delete a SCIM user from an organization - https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization",
		"get-provisioning-information-for-user": "Get SCIM provisioning information for a user - https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user",
		"list-provisioned-identities":           "List SCIM provisioned identities - https://developer.github.com/v3/scim/#list-scim-provisioned-identities",
		"provision-and-invite-user":             "Provision and invite a SCIM user - https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user",
		"set-information-for-provisioned-user":  "Set SCIM information for a provisioned user - https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user",
		"update-attribute-for-user":             "Update an attribute for a SCIM user - https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user",
	},
	"search": {
		"code":                     "Search code - https://developer.github.com/v3/search/#search-code",
		"commits":                  "Search commits - https://developer.github.com/v3/search/#search-commits",
		"issues-and-pull-requests": "Search issues and pull requests - https://developer.github.com/v3/search/#search-issues-and-pull-requests",
		"labels":                   "Search labels - https://developer.github.com/v3/search/#search-labels",
		"repos":                    "Search repositories - https://developer.github.com/v3/search/#search-repositories",
		"topics":                   "Search topics - https://developer.github.com/v3/search/#search-topics",
		"users":                    "Search users - https://developer.github.com/v3/search/#search-users",
	},
	"teams": {
		"add-member-legacy":                              "Add team member (Legacy) - https://developer.github.com/v3/teams/members/#add-team-member-legacy",
		"add-or-update-membership-for-user-in-org":       "Add or update team membership for a user - https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user",
		"add-or-update-membership-for-user-legacy":       "Add or update team membership for a user (Legacy) - https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user-legacy",
		"add-or-update-project-permissions-in-org":       "Add or update team project permissions - https://developer.github.com/v3/teams/#add-or-update-team-project-permissions",
		"add-or-update-project-permissions-legacy":       "Add or update team project permissions (Legacy) - https://developer.github.com/v3/teams/#add-or-update-team-project-permissions-legacy",
		"add-or-update-repo-permissions-in-org":          "Add or update team repository permissions - https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions",
		"add-or-update-repo-permissions-legacy":          "Add or update team repository permissions (Legacy) - https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions-legacy",
		"check-permissions-for-project-in-org":           "Check team permissions for a project - https://developer.github.com/v3/teams/#check-team-permissions-for-a-project",
		"check-permissions-for-project-legacy":           "Check team permissions for a project (Legacy) - https://developer.github.com/v3/teams/#check-team-permissions-for-a-project-legacy",
		"check-permissions-for-repo-in-org":              "Check team permissions for a repository - https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository",
		"check-permissions-for-repo-legacy":              "Check team permissions for a repository (Legacy) - https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository-legacy",
		"create":                                         "Create a team - https://developer.github.com/v3/teams/#create-a-team",
		"create-discussion-comment-in-org":               "Create a discussion comment - https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment",
		"create-discussion-comment-legacy":               "Create a discussion comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment-legacy",
		"create-discussion-in-org":                       "Create a discussion - https://developer.github.com/v3/teams/discussions/#create-a-discussion",
		"create-discussion-legacy":                       "Create a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy",
		"create-or-update-id-p-group-connections-in-org": "Create or update IdP group connections - https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections",
		"create-or-update-id-p-group-connections-legacy": "Create or update IdP group connections (Legacy) - https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections-legacy",
		"delete-discussion-comment-in-org":               "Delete a discussion comment - https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment",
		"delete-discussion-comment-legacy":               "Delete a discussion comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment-legacy",
		"delete-discussion-in-org":                       "Delete a discussion - https://developer.github.com/v3/teams/discussions/#delete-a-discussion",
		"delete-discussion-legacy":                       "Delete a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy",
		"delete-in-org":                                  "Delete a team - https://developer.github.com/v3/teams/#delete-a-team",
		"delete-legacy":                                  "Delete a team (Legacy) - https://developer.github.com/v3/teams/#delete-a-team-legacy",
		"get-by-name":                                    "Get a team by name - https://developer.github.com/v3/teams/#get-a-team-by-name",
		"get-discussion-comment-in-org":                  "Get a discussion comment - https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment",
		"get-discussion-comment-legacy":                  "Get a discussion comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment-legacy",
		"get-discussion-in-org":                          "Get a discussion - https://developer.github.com/v3/teams/discussions/#get-a-discussion",
		"get-discussion-legacy":                          "Get a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#get-a-discussion-legacy",
		"get-legacy":                                     "Get a team (Legacy) - https://developer.github.com/v3/teams/#get-a-team-legacy",
		"get-member-legacy":                              "Get team member (Legacy) - https://developer.github.com/v3/teams/members/#get-team-member-legacy",
		"get-membership-for-user-in-org":                 "Get team membership for a user - https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user",
		"get-membership-for-user-legacy":                 "Get team membership for a user (Legacy) - https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user-legacy",
		"list":                                           "List teams - https://developer.github.com/v3/teams/#list-teams",
		"list-child-in-org":                              "List child teams - https://developer.github.com/v3/teams/#list-child-teams",
		"list-child-legacy":                              "List child teams (Legacy) - https://developer.github.com/v3/teams/#list-child-teams-legacy",
		"list-discussion-comments-in-org":                "List discussion comments - https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments",
		"list-discussion-comments-legacy":                "List discussion comments (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments-legacy",
		"list-discussions-in-org":                        "List discussions - https://developer.github.com/v3/teams/discussions/#list-discussions",
		"list-discussions-legacy":                        "List discussions (Legacy) - https://developer.github.com/v3/teams/discussions/#list-discussions-legacy",
		"list-for-authenticated-user":                    "List teams for the authenticated user - https://developer.github.com/v3/teams/#list-teams-for-the-authenticated-user",
		"list-id-p-groups-for-legacy":                    "List IdP groups for a team (Legacy) - https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team-legacy",
		"list-id-p-groups-for-org":                       "List IdP groups for an organization - https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-an-organization",
		"list-id-p-groups-in-org":                        "List IdP groups for a team - https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team",
		"list-members-in-org":                            "List team members - https://developer.github.com/v3/teams/members/#list-team-members",
		"list-members-legacy":                            "List team members (Legacy) - https://developer.github.com/v3/teams/members/#list-team-members-legacy",
		"list-pending-invitations-in-org":                "List pending team invitations - https://developer.github.com/v3/teams/members/#list-pending-team-invitations",
		"list-pending-invitations-legacy":                "List pending team invitations (Legacy) - https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy",
		"list-projects-in-org":                           "List team projects - https://developer.github.com/v3/teams/#list-team-projects",
		"list-projects-legacy":                           "List team projects (Legacy) - https://developer.github.com/v3/teams/#list-team-projects-legacy",
		"list-repos-in-org":                              "List team repositories - https://developer.github.com/v3/teams/#list-team-repositories",
		"list-repos-legacy":                              "List team repositories (Legacy) - https://developer.github.com/v3/teams/#list-team-repositories-legacy",
		"remove-member-legacy":                           "Remove team member (Legacy) - https://developer.github.com/v3/teams/members/#remove-team-member-legacy",
		"remove-membership-for-user-in-org":              "Remove team membership for a user - https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user",
		"remove-membership-for-user-legacy":              "Remove team membership for a user (Legacy) - https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user-legacy",
		"remove-project-in-org":                          "Remove a project from a team - https://developer.github.com/v3/teams/#remove-a-project-from-a-team",
		"remove-project-legacy":                          "Remove a project from a team (Legacy) - https://developer.github.com/v3/teams/#remove-a-project-from-a-team-legacy",
		"remove-repo-in-org":                             "Remove a repository from a team - https://developer.github.com/v3/teams/#remove-a-repository-from-a-team",
		"remove-repo-legacy":                             "Remove a repository from a team (Legacy) - https://developer.github.com/v3/teams/#remove-a-repository-from-a-team-legacy",
		"update-discussion-comment-in-org":               "Update a discussion comment - https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment",
		"update-discussion-comment-legacy":               "Update a discussion comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment-legacy",
		"update-discussion-in-org":                       "Update a discussion - https://developer.github.com/v3/teams/discussions/#update-a-discussion",
		"update-discussion-legacy":                       "Update a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#update-a-discussion-legacy",
		"update-in-org":                                  "Update a team - https://developer.github.com/v3/teams/#update-a-team",
		"update-legacy":                                  "Update a team (Legacy) - https://developer.github.com/v3/teams/#update-a-team-legacy",
	},
	"users": {
		"add-email-for-authenticated": "Add an email address for the authenticated user - https://developer.github.com/v3/users/emails/#add-an-email-address-for-the-authenticated-user",
		"block":                       "Block a user - https://developer.github.com/v3/users/blocking/#block-a-user",
		"check-blocked":               "Check if a user is blocked by the authenticated user - https://developer.github.com/v3/users/blocking/#check-if-a-user-is-blocked-by-the-authenticated-user",
		"check-following-for-user":    "Check if a user follows another user - https://developer.github.com/v3/users/followers/#check-if-a-user-follows-another-user",
		"check-person-is-followed-by-authenticated": "Check if a person is followed by the authenticated user - https://developer.github.com/v3/users/followers/#check-if-a-person-is-followed-by-the-authenticated-user",
		"create-gpg-key-for-authenticated":          "Create a GPG key for the authenticated user - https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key-for-the-authenticated-user",
		"create-public-ssh-key-for-authenticated":   "Create a public SSH key for the authenticated user - https://developer.github.com/v3/users/keys/#create-a-public-ssh-key-for-the-authenticated-user",
		"delete-email-for-authenticated":            "Delete an email address for the authenticated user - https://developer.github.com/v3/users/emails/#delete-an-email-address-for-the-authenticated-user",
		"delete-gpg-key-for-authenticated":          "Delete a GPG key for the authenticated user - https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key-for-the-authenticated-user",
		"delete-public-ssh-key-for-authenticated":   "Delete a public SSH key for the authenticated user - https://developer.github.com/v3/users/keys/#delete-a-public-ssh-key-for-the-authenticated-user",
		"follow":                                         "Follow a user - https://developer.github.com/v3/users/followers/#follow-a-user",
		"get-authenticated":                              "Get the authenticated user - https://developer.github.com/v3/users/#get-the-authenticated-user",
		"get-by-username":                                "Get a user - https://developer.github.com/v3/users/#get-a-user",
		"get-context-for-user":                           "Get contextual information for a user - https://developer.github.com/v3/users/#get-contextual-information-for-a-user",
		"get-gpg-key-for-authenticated":                  "Get a GPG key for the authenticated user - https://developer.github.com/v3/users/gpg_keys/#get-a-gpg-key-for-the-authenticated-user",
		"get-public-ssh-key-for-authenticated":           "Get a public SSH key for the authenticated user - https://developer.github.com/v3/users/keys/#get-a-public-ssh-key-for-the-authenticated-user",
		"list":                                           "List users - https://developer.github.com/v3/users/#list-users",
		"list-blocked-by-authenticated":                  "List users blocked by the authenticated user - https://developer.github.com/v3/users/blocking/#list-users-blocked-by-the-authenticated-user",
		"list-emails-for-authenticated":                  "List email addresses for the authenticated user - https://developer.github.com/v3/users/emails/#list-email-addresses-for-the-authenticated-user",
		"list-followed-by-authenticated":                 "List the people the authenticated user follows - https://developer.github.com/v3/users/followers/#list-the-people-the-authenticated-user-follows",
		"list-followers-for-authenticated-user":          "List followers of the authenticated user - https://developer.github.com/v3/users/followers/#list-followers-of-the-authenticated-user",
		"list-followers-for-user":                        "List followers of a user - https://developer.github.com/v3/users/followers/#list-followers-of-a-user",
		"list-following-for-user":                        "List the people a user follows - https://developer.github.com/v3/users/followers/#list-the-people-a-user-follows",
		"list-gpg-keys-for-authenticated":                "List GPG keys for the authenticated user - https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-the-authenticated-user",
		"list-gpg-keys-for-user":                         "List GPG keys for a user - https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user",
		"list-public-emails-for-authenticated":           "List public email addresses for the authenticated user - https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-the-authenticated-user",
		"list-public-keys-for-user":                      "List public keys for a user - https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user",
		"list-public-ssh-keys-for-authenticated":         "List public SSH keys for the authenticated user - https://developer.github.com/v3/users/keys/#list-public-ssh-keys-for-the-authenticated-user",
		"set-primary-email-visibility-for-authenticated": "Set primary email visibility for the authenticated user - https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user",
		"unblock":              "Unblock a user - https://developer.github.com/v3/users/blocking/#unblock-a-user",
		"unfollow":             "Unfollow a user - https://developer.github.com/v3/users/followers/#unfollow-a-user",
		"update-authenticated": "Update the authenticated user - https://developer.github.com/v3/users/#update-the-authenticated-user",
	},
}
var FlagHelps = map[string]map[string]map[string]string{
	"actions": {
		"cancel-workflow-run": {"repo": "repository in OWNER/REPO form"},
		"create-or-update-org-secret": {
			"encrypted_value":         "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key) endpoint.",
			"key_id":                  "ID of the key you used to encrypt the secret.",
			"selected_repository_ids": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.",
			"visibility":              "Configures the access that repositories have to the organization secret. Can be one of:\n\\- `all` - All repositories in an organization can access the secret.\n\\- `private` - Private repositories in an organization can access the secret.\n\\- `selected` - Only specific repositories can access the secret.",
		},
		"create-or-update-repo-secret": {
			"encrypted_value": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key) endpoint.",
			"key_id":          "ID of the key you used to encrypt the secret.",
			"repo":            "repository in OWNER/REPO form",
		},
		"create-registration-token-for-repo":  {"repo": "repository in OWNER/REPO form"},
		"create-remove-token-for-repo":        {"repo": "repository in OWNER/REPO form"},
		"delete-artifact":                     {"repo": "repository in OWNER/REPO form"},
		"delete-repo-secret":                  {"repo": "repository in OWNER/REPO form"},
		"delete-self-hosted-runner-from-repo": {"repo": "repository in OWNER/REPO form"},
		"delete-workflow-run-logs":            {"repo": "repository in OWNER/REPO form"},
		"download-artifact":                   {"repo": "repository in OWNER/REPO form"},
		"download-job-logs-for-workflow-run":  {"repo": "repository in OWNER/REPO form"},
		"download-workflow-run-logs":          {"repo": "repository in OWNER/REPO form"},
		"get-artifact":                        {"repo": "repository in OWNER/REPO form"},
		"get-job-for-workflow-run":            {"repo": "repository in OWNER/REPO form"},
		"get-repo-public-key":                 {"repo": "repository in OWNER/REPO form"},
		"get-repo-secret":                     {"repo": "repository in OWNER/REPO form"},
		"get-self-hosted-runner-for-repo":     {"repo": "repository in OWNER/REPO form"},
		"get-workflow":                        {"repo": "repository in OWNER/REPO form"},
		"get-workflow-run":                    {"repo": "repository in OWNER/REPO form"},
		"get-workflow-run-usage":              {"repo": "repository in OWNER/REPO form"},
		"get-workflow-usage":                  {"repo": "repository in OWNER/REPO form"},
		"list-artifacts-for-repo": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-jobs-for-workflow-run": {
			"filter":   "Filters jobs by their `completed_at` timestamp. Can be one of:  \n\\* `latest`: Returns jobs from the most recent execution of the workflow run.  \n\\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-org-secrets": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-repo-secrets": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-repo-workflows": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-runner-applications-for-repo": {"repo": "repository in OWNER/REPO form"},
		"list-self-hosted-runners-for-org": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-self-hosted-runners-for-repo": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-workflow-run-artifacts": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-workflow-runs": {
			"actor":    "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
			"branch":   "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
			"event":    "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
			"status":   "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
		},
		"list-workflow-runs-for-repo": {
			"actor":    "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
			"branch":   "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
			"event":    "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
			"status":   "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
		},
		"re-run-workflow":                   {"repo": "repository in OWNER/REPO form"},
		"set-selected-repos-for-org-secret": {"selected_repository_ids": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints."},
	},
	"activity": {
		"check-repo-is-starred-by-authenticated-user": {"repo": "repository in OWNER/REPO form"},
		"delete-repo-subscription":                    {"repo": "repository in OWNER/REPO form"},
		"get-repo-subscription":                       {"repo": "repository in OWNER/REPO form"},
		"list-events-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-notifications-for-authenticated-user": {
			"all":           "If `true`, show notifications marked as read.",
			"before":        "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"page":          "Page number of the results to fetch.",
			"participating": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
			"per_page":      "Results per page (max 100)",
			"since":         "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
		},
		"list-org-events-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-events": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-events-for-repo-network": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-public-events-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-org-events": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-received-events-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-received-public-events-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-repo-events": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-repo-notifications-for-authenticated-user": {
			"all":           "If `true`, show notifications marked as read.",
			"before":        "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"page":          "Page number of the results to fetch.",
			"participating": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
			"per_page":      "Results per page (max 100)",
			"repo":          "repository in OWNER/REPO form",
			"since":         "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
		},
		"list-repos-starred-by-authenticated-user": {
			"direction": "One of `asc` (ascending) or `desc` (descending).",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"sort":      "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
		},
		"list-repos-starred-by-user": {
			"direction": "One of `asc` (ascending) or `desc` (descending).",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"sort":      "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
		},
		"list-repos-watched-by-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-stargazers-for-repo": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-watched-repos-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-watchers-for-repo": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"mark-notifications-as-read": {"last_read_at": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp."},
		"mark-repo-notifications-as-read": {
			"last_read_at": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
			"repo":         "repository in OWNER/REPO form",
		},
		"set-repo-subscription": {
			"ignored":    "Determines if all notifications should be blocked from this repository.",
			"repo":       "repository in OWNER/REPO form",
			"subscribed": "Determines if notifications should be received from this repository.",
		},
		"set-thread-subscription":            {"ignored": "Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to block all notifications from this thread."},
		"star-repo-for-authenticated-user":   {"repo": "repository in OWNER/REPO form"},
		"unstar-repo-for-authenticated-user": {"repo": "repository in OWNER/REPO form"},
	},
	"apps": {
		"add-repo-to-installation": {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"check-token":              {"access_token": "The OAuth access token used to authenticate to the GitHub API."},
		"create-content-attachment": {
			"body":            "The body text of the content attachment displayed in the body or comment of an issue or pull request. This parameter supports markdown.",
			"corsair-preview": "To access the Content Attachments API during the preview period, you must set this flag.",
			"title":           "The title of the content attachment displayed in the body or comment of an issue or pull request.",
		},
		"create-installation-access-token": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"permissions":         "The permissions granted to the access token. The permissions object includes the permission names and their access type. For a complete list of permissions and allowable values, see \"[GitHub App permissions](https://developer.github.com/apps/building-github-apps/creating-github-apps-using-url-parameters/#github-app-permissions).\"",
			"repository_ids":      "The `id`s of the repositories that the installation token can access. Providing repository `id`s restricts the access of an installation token to specific repositories. You can use the \"[List repositories accessible to the app installation](https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-app-installation)\" endpoint to get the `id` of all repositories that an installation can access. For example, you can select specific repositories when creating an installation token to restrict the number of repositories that can be cloned using the token.",
		},
		"delete-authorization": {"access_token": "The OAuth access token used to authenticate to the GitHub API."},
		"delete-installation":  {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"delete-token":         {"access_token": "The OAuth access token used to authenticate to the GitHub API."},
		"get-authenticated":    {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"get-by-slug":          {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"get-installation":     {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"get-org-installation": {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"get-repo-installation": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"repo":                "repository in OWNER/REPO form",
		},
		"get-user-installation": {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"list-accounts-for-plan": {
			"direction": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"sort":      "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
		},
		"list-accounts-for-plan-stubbed": {
			"direction": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"sort":      "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
		},
		"list-installation-repos-for-authenticated-user": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"mercy-preview":       "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must set this flag.",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-installations": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-installations-for-authenticated-user": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-plans": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-plans-stubbed": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-repos-accessible-to-installation": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"mercy-preview":       "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must set this flag.",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-subscriptions-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-subscriptions-for-authenticated-user-stubbed": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"remove-repo-from-installation": {"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests."},
		"reset-token":                   {"access_token": "The OAuth access token used to authenticate to the GitHub API."},
	},
	"checks": {
		"create": {
			"actions":            "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://developer.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\" To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
			"antiope-preview":    "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"completed_at":       "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"conclusion":         "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.\n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
			"details_url":        "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
			"external_id":        "A reference for the run on the integrator's system.",
			"head_sha":           "The SHA of the commit.",
			"name":               "The name of the check. For example, \"code-coverage\".",
			"output.annotations": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object) description for details about how to use this parameter.",
			"output.images":      "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#images-object) description for details.",
			"output.summary":     "The summary of the check run. This parameter supports Markdown.",
			"output.text":        "The details of the check run. This parameter supports Markdown.",
			"output.title":       "The title of the check run.",
			"repo":               "repository in OWNER/REPO form",
			"started_at":         "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"status":             "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
		},
		"create-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"head_sha":        "The sha of the head commit.",
			"repo":            "repository in OWNER/REPO form",
		},
		"get": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"repo":            "repository in OWNER/REPO form",
		},
		"get-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"repo":            "repository in OWNER/REPO form",
		},
		"list-annotations": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repository in OWNER/REPO form",
		},
		"list-for-ref": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"check_name":      "Returns check runs with the specified `name`.",
			"filter":          "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repository in OWNER/REPO form",
			"status":          "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
		},
		"list-for-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"check_name":      "Returns check runs with the specified `name`.",
			"filter":          "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repository in OWNER/REPO form",
			"status":          "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
		},
		"list-suites-for-ref": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"app_id":          "Filters check suites by GitHub App `id`.",
			"check_name":      "Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/).",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repository in OWNER/REPO form",
		},
		"rerequest-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"repo":            "repository in OWNER/REPO form",
		},
		"set-suites-preferences": {
			"antiope-preview":     "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"auto_trigger_checks": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object) description for details.",
			"repo":                "repository in OWNER/REPO form",
		},
		"update": {
			"actions":            "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
			"antiope-preview":    "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must set this flag.",
			"completed_at":       "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"conclusion":         "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
			"details_url":        "The URL of the integrator's site that has the full details of the check.",
			"external_id":        "A reference for the run on the integrator's system.",
			"name":               "The name of the check. For example, \"code-coverage\".",
			"output.annotations": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
			"output.images":      "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
			"output.summary":     "Can contain Markdown.",
			"output.text":        "Can contain Markdown.",
			"output.title":       "**Required**.",
			"repo":               "repository in OWNER/REPO form",
			"started_at":         "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"status":             "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
		},
	},
	"code-scanning": {
		"get-alert": {"repo": "repository in OWNER/REPO form"},
		"list-alerts-for-repo": {
			"ref":   "Returns a list of code scanning alerts for a specific brach reference. The `ref` must be formatted as `heads/<branch name>`.",
			"repo":  "repository in OWNER/REPO form",
			"state": "Set to `closed` to list only closed code scanning alerts.",
		},
	},
	"codes-of-conduct": {
		"get-all-codes-of-conduct": {"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must set this flag."},
		"get-conduct-code":         {"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must set this flag."},
		"get-for-repo": {
			"repo":                  "repository in OWNER/REPO form",
			"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must set this flag.",
		},
	},
	"gists": {
		"create": {
			"description": "A descriptive name for this gist.",
			"files":       "The filenames and content of each file in the gist. The keys in the `files` object represent the filename and have the type `string`.",
			"public":      "When `true`, the gist will be public and available for anyone to see.",
		},
		"create-comment": {"body": "The comment text."},
		"list": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"list-comments": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-commits": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"list-forks": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"list-starred": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"update": {
			"description": "A descriptive name for this gist.",
			"files":       "The filenames and content that make up this gist.",
		},
		"update-comment": {"body": "The comment text."},
	},
	"git": {
		"create-blob": {
			"content":  "The new blob's content.",
			"encoding": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
			"repo":     "repository in OWNER/REPO form",
		},
		"create-commit": {
			"author.date":     "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"author.email":    "The email of the author (or committer) of the commit",
			"author.name":     "The name of the author (or committer) of the commit",
			"committer.date":  "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"committer.email": "The email of the author (or committer) of the commit",
			"committer.name":  "The name of the author (or committer) of the commit",
			"message":         "The commit message",
			"parents":         "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
			"repo":            "repository in OWNER/REPO form",
			"signature":       "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
			"tree":            "The SHA of the tree object this commit points to",
		},
		"create-ref": {
			"ref":  "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
			"repo": "repository in OWNER/REPO form",
			"sha":  "The SHA1 value for this reference.",
		},
		"create-tag": {
			"message":      "The tag message.",
			"object":       "The SHA of the git object this is tagging.",
			"repo":         "repository in OWNER/REPO form",
			"tag":          "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
			"tagger.date":  "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"tagger.email": "The email of the author of the tag",
			"tagger.name":  "The name of the author of the tag",
			"type":         "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
		},
		"create-tree": {
			"base_tree": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
			"repo":      "repository in OWNER/REPO form",
			"tree":      "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
		},
		"delete-ref": {"repo": "repository in OWNER/REPO form"},
		"get-blob":   {"repo": "repository in OWNER/REPO form"},
		"get-commit": {"repo": "repository in OWNER/REPO form"},
		"get-ref":    {"repo": "repository in OWNER/REPO form"},
		"get-tag":    {"repo": "repository in OWNER/REPO form"},
		"get-tree": {
			"recursive": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.",
			"repo":      "repository in OWNER/REPO form",
		},
		"list-matching-refs": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"update-ref": {
			"force": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
			"repo":  "repository in OWNER/REPO form",
			"sha":   "The SHA1 value to set this reference to",
		},
	},
	"interactions": {
		"get-restrictions-for-org": {"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must set this flag."},
		"get-restrictions-for-repo": {
			"repo":           "repository in OWNER/REPO form",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must set this flag.",
		},
		"remove-restrictions-for-org": {"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must set this flag."},
		"remove-restrictions-for-repo": {
			"repo":           "repository in OWNER/REPO form",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must set this flag.",
		},
		"set-restrictions-for-org": {
			"limit":          "Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must set this flag.",
		},
		"set-restrictions-for-repo": {
			"limit":          "Specifies the group of GitHub users who can comment, open issues, or create pull requests for the given repository. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
			"repo":           "repository in OWNER/REPO form",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must set this flag.",
		},
	},
	"issues": {
		"add-assignees": {
			"assignees": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
			"repo":      "repository in OWNER/REPO form",
		},
		"add-labels": {
			"labels": "The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
			"repo":   "repository in OWNER/REPO form",
		},
		"check-user-can-be-assigned": {"repo": "repository in OWNER/REPO form"},
		"create": {
			"assignee":  "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
			"assignees": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
			"body":      "The contents of the issue.",
			"labels":    "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
			"milestone": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._",
			"repo":      "repository in OWNER/REPO form",
			"title":     "The title of the issue.",
		},
		"create-comment": {
			"body": "The contents of the comment.",
			"repo": "repository in OWNER/REPO form",
		},
		"create-label": {
			"color":       "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
			"description": "A short description of the label.",
			"name":        "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
			"repo":        "repository in OWNER/REPO form",
		},
		"create-milestone": {
			"description": "A description of the milestone.",
			"due_on":      "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"repo":        "repository in OWNER/REPO form",
			"state":       "The state of the milestone. Either `open` or `closed`.",
			"title":       "The title of the milestone.",
		},
		"delete-comment":   {"repo": "repository in OWNER/REPO form"},
		"delete-label":     {"repo": "repository in OWNER/REPO form"},
		"delete-milestone": {"repo": "repository in OWNER/REPO form"},
		"get": {
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"get-comment": {
			"machine-man-preview":   "To access the API with your GitHub App, you must set this flag for your requests.",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"get-event": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"repo":                "repository in OWNER/REPO form",
			"sailor-v-preview":    "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
			"starfox-preview":     "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must set this flag.",
		},
		"get-label":     {"repo": "repository in OWNER/REPO form"},
		"get-milestone": {"repo": "repository in OWNER/REPO form"},
		"list": {
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"filter":                "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "To access the API with your GitHub App, you must set this flag for your requests.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-assignees": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-comments": {
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"since":                 "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-comments-for-repo": {
			"direction":             "Either `asc` or `desc`. Ignored without the `sort` parameter.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"since":                 "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "Either `created` or `updated`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-events": {
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repository in OWNER/REPO form",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
			"starfox-preview":  "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must set this flag.",
		},
		"list-events-for-repo": {
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repository in OWNER/REPO form",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
			"starfox-preview":  "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must set this flag.",
		},
		"list-events-for-timeline": {
			"mockingbird-preview": "The API to get issue timeline events is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details. To access the API you must set this flag.",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
			"repo":                "repository in OWNER/REPO form",
			"starfox-preview":     "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must set this flag.",
		},
		"list-for-authenticated-user": {
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"filter":                "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "To access the API with your GitHub App, you must set this flag for your requests.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-org": {
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"filter":                "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "To access the API with your GitHub App, you must set this flag for your requests.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-repo": {
			"assignee":              "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
			"creator":               "The user that created the issue.",
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "To access the API with your GitHub App, you must set this flag for your requests.",
			"mentioned":             "A user that's mentioned in the issue.",
			"milestone":             "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-labels-for-milestone": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-labels-for-repo": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-labels-on-issue": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-milestones": {
			"direction": "The direction of the sort. Either `asc` or `desc`.",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"repo":      "repository in OWNER/REPO form",
			"sort":      "What to sort results by. Either `due_on` or `completeness`.",
			"state":     "The state of the milestone. Either `open`, `closed`, or `all`.",
		},
		"lock": {
			"lock_reason":      "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
			"repo":             "repository in OWNER/REPO form",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
		},
		"remove-all-labels": {"repo": "repository in OWNER/REPO form"},
		"remove-assignees": {
			"assignees": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
			"repo":      "repository in OWNER/REPO form",
		},
		"remove-label": {"repo": "repository in OWNER/REPO form"},
		"set-labels": {
			"labels": "The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
			"repo":   "repository in OWNER/REPO form",
		},
		"unlock": {"repo": "repository in OWNER/REPO form"},
		"update": {
			"assignee":  "Login for the user that this issue should be assigned to. **This field is deprecated.**",
			"assignees": "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
			"body":      "The contents of the issue.",
			"labels":    "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
			"milestone": "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._",
			"repo":      "repository in OWNER/REPO form",
			"state":     "State of the issue. Either `open` or `closed`.",
			"title":     "The title of the issue.",
		},
		"update-comment": {
			"body": "The contents of the comment.",
			"repo": "repository in OWNER/REPO form",
		},
		"update-label": {
			"color":       "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
			"description": "A short description of the label.",
			"new_name":    "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
			"repo":        "repository in OWNER/REPO form",
		},
		"update-milestone": {
			"description": "A description of the milestone.",
			"due_on":      "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"repo":        "repository in OWNER/REPO form",
			"state":       "The state of the milestone. Either `open` or `closed`.",
			"title":       "The title of the milestone.",
		},
	},
	"licenses": {"get-for-repo": {"repo": "repository in OWNER/REPO form"}},
	"markdown": {
		"render": {
			"context": "The repository context to use when creating references in `gfm` mode. Omit this parameter when using `markdown` mode.",
			"mode":    "The rendering mode. Can be either:  \n\\* `markdown` to render a document in plain Markdown, just like README.md files are rendered.  \n\\* `gfm` to render a document in [GitHub Flavored Markdown](https://github.github.com/gfm/), which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests.",
			"text":    "The Markdown text to render in HTML. Markdown content must be 400 KB or less.",
		},
		"render-raw": {"file": "the file to upload"},
	},
	"migrations": {
		"cancel-import":                         {"repo": "repository in OWNER/REPO form"},
		"delete-archive-for-authenticated-user": {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"delete-archive-for-org":                {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"download-archive-for-org":              {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"get-archive-for-authenticated-user":    {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"get-commit-authors": {
			"repo":  "repository in OWNER/REPO form",
			"since": "Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.",
		},
		"get-import-status":                 {"repo": "repository in OWNER/REPO form"},
		"get-large-files":                   {"repo": "repository in OWNER/REPO form"},
		"get-status-for-authenticated-user": {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"get-status-for-org":                {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"list-for-authenticated-user": {
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must set this flag.",
		},
		"list-for-org": {
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must set this flag.",
		},
		"list-repos-for-org": {
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must set this flag.",
		},
		"list-repos-for-user": {
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must set this flag.",
		},
		"map-commit-author": {
			"email": "The new Git author email.",
			"name":  "The new Git author name.",
			"repo":  "repository in OWNER/REPO form",
		},
		"set-lfs-preference": {
			"repo":    "repository in OWNER/REPO form",
			"use_lfs": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).",
		},
		"start-for-authenticated-user": {
			"exclude_attachments": "Does not include attachments uploaded to GitHub.com in the migration data when set to `true`. Excluding attachments will reduce the migration archive file size.",
			"lock_repositories":   "Locks the `repositories` to prevent changes during the migration when set to `true`.",
			"repositories":        "An array of repositories to include in the migration.",
		},
		"start-for-org": {
			"exclude_attachments": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
			"lock_repositories":   "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
			"repositories":        "A list of arrays indicating which repositories should be migrated.",
		},
		"start-import": {
			"repo":         "repository in OWNER/REPO form",
			"tfvc_project": "For a tfvc import, the name of the project that is being imported.",
			"vcs":          "The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
			"vcs_password": "If authentication is required, the password to provide to `vcs_url`.",
			"vcs_url":      "The URL of the originating repository.",
			"vcs_username": "If authentication is required, the username to provide to `vcs_url`.",
		},
		"unlock-repo-for-authenticated-user": {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"unlock-repo-for-org":                {"wyandotte-preview": "To access the Migrations API, you must set this flag."},
		"update-import": {
			"repo":         "repository in OWNER/REPO form",
			"vcs_password": "The password to provide to the originating repository.",
			"vcs_username": "The username to provide to the originating repository.",
		},
	},
	"oauth-authorizations": {
		"create-authorization": {
			"client_id":     "The 20 character OAuth app client key for which to create the token.",
			"client_secret": "The 40 character OAuth app client secret for which to create the token.",
			"fingerprint":   "A unique string to distinguish an authorization from others created for the same client ID and user.",
			"note":          "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"scopes":        "A list of scopes that this authorization is in.",
		},
		"get-or-create-authorization-for-app": {
			"client_secret": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
			"fingerprint":   "A unique string to distinguish an authorization from others created for the same client and user. If provided, this API is functionally equivalent to [Get-or-create an authorization for a specific app and fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint).",
			"note":          "A note to remind you what the OAuth token is for.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"scopes":        "A list of scopes that this authorization is in.",
		},
		"get-or-create-authorization-for-app-and-fingerprint": {
			"client_secret": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
			"note":          "A note to remind you what the OAuth token is for.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"scopes":        "A list of scopes that this authorization is in.",
		},
		"list-authorizations": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-grants": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"update-authorization": {
			"add_scopes":    "A list of scopes to add to this authorization.",
			"fingerprint":   "A unique string to distinguish an authorization from others created for the same client ID and user.",
			"note":          "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"remove_scopes": "A list of scopes to remove from this authorization.",
			"scopes":        "Replaces the authorization scopes with these.",
		},
	},
	"orgs": {
		"create-invitation": {
			"email":      "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
			"invitee_id": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
			"role":       "Specify role for new member. Can be one of:  \n\\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.",
			"team_ids":   "Specify IDs for the teams you want to invite new members to.",
		},
		"create-webhook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
			"name":                "Must be passed as \"web\".",
		},
		"get":  {"surtur-preview": "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must set this flag."},
		"list": {"since": "The integer ID of the last organization that you've seen."},
		"list-app-installations": {
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-invitation-teams": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-members": {
			"filter":   "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` - All members the authenticated user can see.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"role":     "Filter members returned by their role. Can be one of:  \n\\* `all` - All members of the organization, regardless of role.  \n\\* `admin` - Organization owners.  \n\\* `member` - Non-owner organization members.",
		},
		"list-memberships-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"state":    "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
		},
		"list-outside-collaborators": {
			"filter":   "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-pending-invitations": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-members": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-webhooks": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"set-membership-for-user": {"role": "The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization."},
		"update": {
			"billing_email":                 "Billing email address. This address is not publicized.",
			"company":                       "The company name.",
			"default_repository_permission": "Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.",
			"description":                   "The description of the company.",
			"email":                         "The publicly visible email address.",
			"has_organization_projects":     "Toggles whether an organization can use organization projects.",
			"has_repository_projects":       "Toggles whether repositories that belong to the organization can use repository projects.",
			"location":                      "The location.",
			"members_allowed_repository_creation_type": "Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  \n\\* `none` - only admin members can create repositories.  \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.",
			"members_can_create_internal_repositories": "Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  \n\\* `true` - all organization members can create internal repositories.  \n\\* `false` - only organization owners can create internal repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\".",
			"members_can_create_private_repositories":  "Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  \n\\* `true` - all organization members can create private repositories.  \n\\* `false` - only organization owners can create private repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\".",
			"members_can_create_public_repositories":   "Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  \n\\* `true` - all organization members can create public repositories.  \n\\* `false` - only organization owners can create public repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\".",
			"members_can_create_repositories":          "Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only organization owners can create repositories.  \nDefault: `true`  \n**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
			"name":                                     "The shorthand name of the company.",
			"surtur-preview":                           "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must set this flag.",
			"twitter_username":                         "The Twitter username of the company.",
		},
		"update-membership-for-authenticated-user": {"state": "The state that the membership should be in. Only `\"active\"` will be accepted."},
		"update-webhook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
		},
	},
	"projects": {
		"add-collaborator": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"permission":      "The permission to grant the collaborator. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\" Can be one of:  \n\\* `read` - can read, but not write to or administer this project.  \n\\* `write` - can read and write, but not administer this project.  \n\\* `admin` - can read, write and administer this project.",
		},
		"create-card": {
			"content_id":      "The issue or pull request id you want to associate with this card. You can use the [List repository issues](https://developer.github.com/v3/issues/#list-repository-issues) and [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoints to find this id.  \n**Note:** Depending on whether you use the issue id or pull request id, you will need to specify `Issue` or `PullRequest` as the `content_type`.",
			"content_type":    "**Required if you provide\u00a0`content_id`**. The type of content you want to associate with this card. Use `Issue` when `content_id` is an issue id and use `PullRequest` when `content_id` is a pull request id.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"note":            "The card's note content. Only valid for cards without another type of content, so you must omit when\u00a0specifying `content_id`\u00a0and\u00a0`content_type`.",
		},
		"create-column": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"name":            "The name of the column.",
		},
		"create-for-authenticated-user": {
			"body":            "The description of the project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"name":            "The name of the project.",
		},
		"create-for-org": {
			"body":            "The description of the project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"name":            "The name of the project.",
		},
		"create-for-repo": {
			"body":            "The description of the project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"name":            "The name of the project.",
			"repo":            "repository in OWNER/REPO form",
		},
		"delete":                  {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"delete-card":             {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"delete-column":           {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"get":                     {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"get-card":                {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"get-column":              {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"get-permission-for-user": {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"list-cards": {
			"archived_state":  "Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
		},
		"list-collaborators": {
			"affiliation":     "Filters the collaborators by their affiliation. Can be one of:  \n\\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  \n\\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
		},
		"list-columns": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
		},
		"list-for-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"state":           "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-repo": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repository in OWNER/REPO form",
			"state":           "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-user": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"state":           "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
		},
		"move-card": {
			"column_id":       "The `id` value of a column in the same project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"position":        "Can be one of `top`, `bottom`, or `after:<card_id>`, where `<card_id>` is the `id` value of a card in the same column, or in the new column specified by `column_id`.",
		},
		"move-column": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"position":        "Can be one of `first`, `last`, or `after:<column_id>`, where `<column_id>` is the `id` value of a column in the same project.",
		},
		"remove-collaborator": {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"update": {
			"body":                    "The description of the project.",
			"inertia-preview":         "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"name":                    "The name of the project.",
			"organization_permission": "The permission level that determines whether all members of the project's organization can see and/or make changes to the project. Setting `organization_permission` is only available for organization projects. If an organization member belongs to a team with a higher level of access or is a collaborator with a higher level of access, their permission level is not lowered by `organization_permission`. For information on changing access for a team or collaborator, see [Add or update team project permissions](https://developer.github.com/v3/teams/#add-or-update-team-project-permissions) or [Add project collaborator](https://developer.github.com/v3/projects/collaborators/#add-project-collaborator).  \n  \n**Note:** Updating a project's `organization_permission` requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `read` - Organization members can read, but not write to or administer this project.  \n\\* `write` - Organization members can read and write, but not administer this project.  \n\\* `admin` - Organization members can read, write and administer this project.  \n\\* `none` - Organization members can only see this project if it is public.",
			"private":                 "Sets the visibility of a project board. Setting `private` is only available for organization and user projects. **Note:** Updating a project's visibility requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `false` - Anyone can see the project.  \n\\* `true` - Only the user can view a project board created on a user account. Organization members with the appropriate `organization_permission` can see project boards in an organization account.",
			"state":                   "State of the project. Either `open` or `closed`.",
		},
		"update-card": {
			"archived":        "Use `true` to archive a project card. Specify `false` if you need to restore a previously archived project card.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"note":            "The card's note content. Only valid for cards without another type of content, so this cannot be specified if the card already has a `content_id` and `content_type`.",
		},
		"update-column": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"name":            "The new name of the column.",
		},
	},
	"pulls": {
		"check-if-merged": {"repo": "repository in OWNER/REPO form"},
		"create": {
			"base":                  "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
			"body":                  "The contents of the pull request.",
			"draft":                 "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.",
			"head":                  "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
			"maintainer_can_modify": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
			"repo":                  "repository in OWNER/REPO form",
			"sailor-v-preview":      "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
			"title":                 "The title of the new pull request.",
		},
		"create-reply-for-review-comment": {
			"body": "The text of the review comment.",
			"repo": "repository in OWNER/REPO form",
		},
		"create-review": {
			"body":      "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
			"comments":  "Use the following table to specify the location, destination, and contents of the draft review comment.",
			"commit_id": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
			"event":     "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request) when you are ready.",
			"repo":      "repository in OWNER/REPO form",
		},
		"create-review-comment": {
			"body":                 "The text of the review comment.",
			"comfort-fade-preview": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must set this flag.",
			"commit_id":            "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
			"line":                 "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
			"path":                 "The relative path to the file that necessitates a comment.",
			"position":             "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
			"repo":                 "repository in OWNER/REPO form",
			"side":                 "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\".",
			"start_line":           "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\".",
			"start_side":           "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\". See `side` in this table for additional context.",
		},
		"delete-pending-review": {"repo": "repository in OWNER/REPO form"},
		"delete-review-comment": {"repo": "repository in OWNER/REPO form"},
		"dismiss-review": {
			"message": "The message for the pull request review dismissal",
			"repo":    "repository in OWNER/REPO form",
		},
		"get": {
			"repo":             "repository in OWNER/REPO form",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
		},
		"get-review": {"repo": "repository in OWNER/REPO form"},
		"get-review-comment": {
			"comfort-fade-preview":  "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must set this flag.",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list": {
			"base":             "Filter pulls by base branch name. Example: `gh-pages`.",
			"direction":        "The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
			"head":             "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repository in OWNER/REPO form",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
			"sort":             "What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).",
			"state":            "Either `open`, `closed`, or `all` to filter by state.",
		},
		"list-comments-for-review": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-commits": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-files": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-requested-reviewers": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-review-comments": {
			"comfort-fade-preview":  "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must set this flag.",
			"direction":             "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"since":                 "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
			"sort":                  "Can be either `created` or `updated` comments.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-review-comments-for-repo": {
			"comfort-fade-preview":  "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must set this flag.",
			"direction":             "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"since":                 "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
			"sort":                  "Can be either `created` or `updated` comments.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-reviews": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"merge": {
			"commit_message": "Extra detail to append to automatic commit message.",
			"commit_title":   "Title for the automatic commit message.",
			"merge_method":   "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
			"repo":           "repository in OWNER/REPO form",
			"sha":            "SHA that pull request head must match to allow merge.",
		},
		"remove-requested-reviewers": {
			"repo":           "repository in OWNER/REPO form",
			"reviewers":      "An array of user `login`s that will be removed.",
			"team_reviewers": "An array of team `slug`s that will be removed.",
		},
		"request-reviewers": {
			"repo":           "repository in OWNER/REPO form",
			"reviewers":      "An array of user `login`s that will be requested.",
			"team_reviewers": "An array of team `slug`s that will be requested.",
		},
		"submit-review": {
			"body":  "The body text of the pull request review",
			"event": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
			"repo":  "repository in OWNER/REPO form",
		},
		"update": {
			"base":                  "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
			"body":                  "The contents of the pull request.",
			"maintainer_can_modify": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
			"repo":                  "repository in OWNER/REPO form",
			"sailor-v-preview":      "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must set this flag.",
			"state":                 "State of this Pull Request. Either `open` or `closed`.",
			"title":                 "The title of the pull request.",
		},
		"update-branch": {
			"expected_head_sha": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://developer.github.com/v3/repos/commits/#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
			"lydian-preview":    "Updating the pull request branch with latest upstream changes is currently available for developers to preview. To access this new endpoint during the preview period, you must set this flag.",
			"repo":              "repository in OWNER/REPO form",
		},
		"update-review": {
			"body": "The body text of the pull request review.",
			"repo": "repository in OWNER/REPO form",
		},
		"update-review-comment": {
			"body":                 "The text of the reply to the review comment.",
			"comfort-fade-preview": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must set this flag.",
			"repo":                 "repository in OWNER/REPO form",
		},
	},
	"reactions": {
		"create-for-commit-comment": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-issue": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-issue-comment": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-pull-request-review-comment": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-team-discussion-comment-in-org": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-team-discussion-comment-legacy": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-team-discussion-in-org": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-for-team-discussion-legacy": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"delete-for-commit-comment": {
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"delete-for-issue": {
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"delete-for-issue-comment": {
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"delete-for-pull-request-comment": {
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"delete-for-team-discussion":         {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"delete-for-team-discussion-comment": {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"delete-legacy":                      {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"list-for-commit-comment": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-issue": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-issue-comment": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-pull-request-review-comment": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-team-discussion-comment-in-org": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-team-discussion-comment-legacy": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-team-discussion-in-org": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-team-discussion-legacy": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
	},
	"repos": {
		"add-app-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"add-collaborator": {
			"permission": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.  \n\\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  \n\\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.",
			"repo":       "repository in OWNER/REPO form",
		},
		"add-status-check-contexts":    {"repo": "repository in OWNER/REPO form"},
		"add-team-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"add-user-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"check-collaborator":           {"repo": "repository in OWNER/REPO form"},
		"check-vulnerability-alerts": {
			"dorian-preview": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must set this flag.",
			"repo":           "repository in OWNER/REPO form",
		},
		"compare-commits": {"repo": "repository in OWNER/REPO form"},
		"create-commit-comment": {
			"body":     "The contents of the comment.",
			"line":     "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
			"path":     "Relative path of the file to comment on.",
			"position": "Line index in the diff to comment on.",
			"repo":     "repository in OWNER/REPO form",
		},
		"create-commit-signature-protection": {
			"repo":          "repository in OWNER/REPO form",
			"zzzax-preview": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must set this flag.",
		},
		"create-commit-status": {
			"context":     "A string label to differentiate this status from the status of other systems.",
			"description": "A short description of the status.",
			"repo":        "repository in OWNER/REPO form",
			"state":       "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
			"target_url":  "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
		},
		"create-deploy-key": {
			"key":       "The contents of the key.",
			"read_only": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/).\"",
			"repo":      "repository in OWNER/REPO form",
			"title":     "A name for the key.",
		},
		"create-deployment": {
			"ant-man-preview":        "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must set this flag.",
			"auto_merge":             "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
			"description":            "Short description of the deployment.",
			"environment":            "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
			"payload":                "JSON payload with extra information about the deployment.",
			"production_environment": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.\n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"ref":                    "The ref to deploy. This can be a branch, tag, or SHA.",
			"repo":                   "repository in OWNER/REPO form",
			"required_contexts":      "The [status](https://developer.github.com/v3/repos/statuses/) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
			"task":                   "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
			"transient_environment":  "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`\n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
		},
		"create-deployment-status": {
			"ant-man-preview": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must set this flag.",
			"auto_inactive":   "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  \n**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"description":     "A short description of the status. The maximum description length is 140 characters.",
			"environment":     "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
			"environment_url": "Sets the URL for accessing your environment. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"flash-preview":   "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must set this flag.",
			"log_url":         "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"repo":            "repository in OWNER/REPO form",
			"state":           "The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.",
			"target_url":      "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
		},
		"create-dispatch-event": {
			"client_payload": "JSON payload with extra information about the webhook event that your action or worklow may use.",
			"event_type":     "**Required:** A custom webhook event name.",
			"repo":           "repository in OWNER/REPO form",
		},
		"create-for-authenticated-user": {
			"allow_merge_commit":     "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
			"allow_rebase_merge":     "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
			"allow_squash_merge":     "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
			"auto_init":              "Pass `true` to create an initial commit with empty README.",
			"baptiste-preview":       "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must set this flag.",
			"delete_branch_on_merge": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
			"description":            "A short description of the repository.",
			"gitignore_template":     "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
			"has_issues":             "Either `true` to enable issues for this repository or `false` to disable them.",
			"has_projects":           "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
			"has_wiki":               "Either `true` to enable the wiki for this repository or `false` to disable it.",
			"homepage":               "A URL with more information about the repository.",
			"is_template":            "Either `true` to make this repo available as a template repository or `false` to prevent it.",
			"license_template":       "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
			"name":                   "The name of the repository.",
			"nebula-preview":         "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must set this flag.",
			"private":                "Either `true` to create a private repository or `false` to create a public one.",
			"team_id":                "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
			"visibility":             "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/github/creating-cloning-and-archiving-repositories/creating-an-internal-repository)\".  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
		},
		"create-fork": {
			"organization": "Optional parameter to specify the organization name if forking into an organization.",
			"repo":         "repository in OWNER/REPO form",
		},
		"create-in-org": {
			"allow_merge_commit":     "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
			"allow_rebase_merge":     "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
			"allow_squash_merge":     "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
			"auto_init":              "Pass `true` to create an initial commit with empty README.",
			"baptiste-preview":       "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must set this flag.",
			"delete_branch_on_merge": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
			"description":            "A short description of the repository.",
			"gitignore_template":     "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
			"has_issues":             "Either `true` to enable issues for this repository or `false` to disable them.",
			"has_projects":           "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
			"has_wiki":               "Either `true` to enable the wiki for this repository or `false` to disable it.",
			"homepage":               "A URL with more information about the repository.",
			"is_template":            "Either `true` to make this repo available as a template repository or `false` to prevent it.",
			"license_template":       "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
			"name":                   "The name of the repository.",
			"nebula-preview":         "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must set this flag.",
			"private":                "Either `true` to create a private repository or `false` to create a public one.",
			"team_id":                "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
			"visibility":             "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\".  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
		},
		"create-or-update-file-contents": {
			"author.email":    "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
			"author.name":     "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
			"branch":          "The branch name. Default: the repository’s default branch (usually `master`)",
			"committer.email": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
			"committer.name":  "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
			"content":         "The new file content, using Base64 encoding.",
			"message":         "The commit message.",
			"repo":            "repository in OWNER/REPO form",
			"sha":             "**Required if you are updating a file**. The blob SHA of the file being replaced.",
		},
		"create-pages-site": {
			"repo":               "repository in OWNER/REPO form",
			"source.branch":      "The repository branch used to publish your [site's source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/). Can be either `master` or `gh-pages`.",
			"source.path":        "The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`.",
			"switcheroo-preview": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must set this flag.",
		},
		"create-release": {
			"body":             "Text describing the contents of the tag.",
			"draft":            "`true` to create a draft (unpublished) release, `false` to create a published one.",
			"name":             "The name of the release.",
			"prerelease":       "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
			"repo":             "repository in OWNER/REPO form",
			"tag_name":         "The name of the tag.",
			"target_commitish": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
		},
		"create-using-template": {
			"baptiste-preview": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must set this flag.",
			"description":      "A short description of the new repository.",
			"name":             "The name of the new repository.",
			"owner":            "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
			"private":          "Either `true` to create a new private repository or `false` to create a new public one.",
		},
		"create-webhook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
			"name":                "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
			"repo":                "repository in OWNER/REPO form",
		},
		"delete":                         {"repo": "repository in OWNER/REPO form"},
		"delete-access-restrictions":     {"repo": "repository in OWNER/REPO form"},
		"delete-admin-branch-protection": {"repo": "repository in OWNER/REPO form"},
		"delete-branch-protection":       {"repo": "repository in OWNER/REPO form"},
		"delete-commit-comment":          {"repo": "repository in OWNER/REPO form"},
		"delete-commit-signature-protection": {
			"repo":          "repository in OWNER/REPO form",
			"zzzax-preview": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must set this flag.",
		},
		"delete-deploy-key": {"repo": "repository in OWNER/REPO form"},
		"delete-deployment": {"repo": "repository in OWNER/REPO form"},
		"delete-file": {
			"author.email":    "The email of the author (or committer) of the commit",
			"author.name":     "The name of the author (or committer) of the commit",
			"branch":          "The branch name. Default: the repository’s default branch (usually `master`)",
			"committer.email": "The email of the author (or committer) of the commit",
			"committer.name":  "The name of the author (or committer) of the commit",
			"message":         "The commit message.",
			"repo":            "repository in OWNER/REPO form",
			"sha":             "The blob SHA of the file being replaced.",
		},
		"delete-invitation": {"repo": "repository in OWNER/REPO form"},
		"delete-pages-site": {
			"repo":               "repository in OWNER/REPO form",
			"switcheroo-preview": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must set this flag.",
		},
		"delete-pull-request-review-protection": {"repo": "repository in OWNER/REPO form"},
		"delete-release":                        {"repo": "repository in OWNER/REPO form"},
		"delete-release-asset":                  {"repo": "repository in OWNER/REPO form"},
		"delete-webhook":                        {"repo": "repository in OWNER/REPO form"},
		"disable-automated-security-fixes": {
			"london-preview": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must set this flag.",
			"repo":           "repository in OWNER/REPO form",
		},
		"disable-vulnerability-alerts": {
			"dorian-preview": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must set this flag.",
			"repo":           "repository in OWNER/REPO form",
		},
		"download-archive": {"repo": "repository in OWNER/REPO form"},
		"enable-automated-security-fixes": {
			"london-preview": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must set this flag.",
			"repo":           "repository in OWNER/REPO form",
		},
		"enable-vulnerability-alerts": {
			"dorian-preview": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must set this flag.",
			"repo":           "repository in OWNER/REPO form",
		},
		"get": {
			"nebula-preview":        "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must set this flag.",
			"repo":                  "repository in OWNER/REPO form",
			"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must set this flag.",
		},
		"get-access-restrictions":       {"repo": "repository in OWNER/REPO form"},
		"get-admin-branch-protection":   {"repo": "repository in OWNER/REPO form"},
		"get-all-status-check-contexts": {"repo": "repository in OWNER/REPO form"},
		"get-all-topics": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must set this flag.",
			"repo":          "repository in OWNER/REPO form",
		},
		"get-apps-with-access-to-protected-branch": {"repo": "repository in OWNER/REPO form"},
		"get-branch": {"repo": "repository in OWNER/REPO form"},
		"get-branch-protection": {
			"luke-cage-preview": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must set this flag.",
			"repo":              "repository in OWNER/REPO form",
		},
		"get-clones": {
			"per":  "Must be one of: `day`, `week`.",
			"repo": "repository in OWNER/REPO form",
		},
		"get-code-frequency-stats":          {"repo": "repository in OWNER/REPO form"},
		"get-collaborator-permission-level": {"repo": "repository in OWNER/REPO form"},
		"get-combined-status-for-ref":       {"repo": "repository in OWNER/REPO form"},
		"get-commit":                        {"repo": "repository in OWNER/REPO form"},
		"get-commit-activity-stats":         {"repo": "repository in OWNER/REPO form"},
		"get-commit-comment": {
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"get-commit-signature-protection": {
			"repo":          "repository in OWNER/REPO form",
			"zzzax-preview": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must set this flag.",
		},
		"get-community-profile-metrics": {
			"black-panther-preview": "We're currently offering a preview of the Community Profile API (also known as community health). To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the  `Accept` header.",
			"repo":                  "repository in OWNER/REPO form",
		},
		"get-content": {
			"ref":  "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
			"repo": "repository in OWNER/REPO form",
		},
		"get-contributors-stats": {"repo": "repository in OWNER/REPO form"},
		"get-deploy-key":         {"repo": "repository in OWNER/REPO form"},
		"get-deployment": {
			"ant-man-preview":     "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must set this flag.",
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"repo":                "repository in OWNER/REPO form",
		},
		"get-deployment-status": {
			"ant-man-preview":     "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must set this flag.",
			"flash-preview":       "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must set this flag.",
			"machine-man-preview": "To access the API with your GitHub App, you must set this flag for your requests.",
			"repo":                "repository in OWNER/REPO form",
		},
		"get-latest-pages-build":  {"repo": "repository in OWNER/REPO form"},
		"get-latest-release":      {"repo": "repository in OWNER/REPO form"},
		"get-pages":               {"repo": "repository in OWNER/REPO form"},
		"get-pages-build":         {"repo": "repository in OWNER/REPO form"},
		"get-participation-stats": {"repo": "repository in OWNER/REPO form"},
		"get-pull-request-review-protection": {
			"luke-cage-preview": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must set this flag.",
			"repo":              "repository in OWNER/REPO form",
		},
		"get-punch-card-stats": {"repo": "repository in OWNER/REPO form"},
		"get-readme": {
			"ref":  "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
			"repo": "repository in OWNER/REPO form",
		},
		"get-release":                               {"repo": "repository in OWNER/REPO form"},
		"get-release-asset":                         {"repo": "repository in OWNER/REPO form"},
		"get-release-by-tag":                        {"repo": "repository in OWNER/REPO form"},
		"get-status-checks-protection":              {"repo": "repository in OWNER/REPO form"},
		"get-teams-with-access-to-protected-branch": {"repo": "repository in OWNER/REPO form"},
		"get-top-paths":                             {"repo": "repository in OWNER/REPO form"},
		"get-top-referrers":                         {"repo": "repository in OWNER/REPO form"},
		"get-users-with-access-to-protected-branch": {"repo": "repository in OWNER/REPO form"},
		"get-views": {
			"per":  "Must be one of: `day`, `week`.",
			"repo": "repository in OWNER/REPO form",
		},
		"get-webhook": {"repo": "repository in OWNER/REPO form"},
		"list-branches": {
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"protected": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
			"repo":      "repository in OWNER/REPO form",
		},
		"list-branches-for-head-commit": {
			"groot-preview": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must set this flag.",
			"repo":          "repository in OWNER/REPO form",
		},
		"list-collaborators": {
			"affiliation": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"repo":        "repository in OWNER/REPO form",
		},
		"list-comments-for-commit": {
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-commit-comments-for-repo": {
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repository in OWNER/REPO form",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-commit-statuses-for-ref": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-commits": {
			"author":   "GitHub login or email address by which to filter by commit author.",
			"page":     "Page number of the results to fetch.",
			"path":     "Only commits containing this file path will be returned.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
			"sha":      "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).",
			"since":    "Only commits after this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"until":    "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
		},
		"list-contributors": {
			"anon":     "Set to `1` or `true` to include anonymous contributors in results.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-deploy-keys": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-deployment-statuses": {
			"ant-man-preview": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must set this flag.",
			"flash-preview":   "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repository in OWNER/REPO form",
		},
		"list-deployments": {
			"ant-man-preview": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must set this flag.",
			"environment":     "The name of the environment that was deployed to (e.g., `staging` or `production`).",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"ref":             "The name of the ref. This can be a branch, tag, or SHA.",
			"repo":            "repository in OWNER/REPO form",
			"sha":             "The SHA recorded at creation time.",
			"task":            "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
		},
		"list-for-authenticated-user": {
			"affiliation": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
			"direction":   "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"sort":        "Can be one of `created`, `updated`, `pushed`, `full_name`.",
			"type":        "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
			"visibility":  "Can be one of `all`, `public`, or `private`.",
		},
		"list-for-org": {
			"baptiste-preview": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must set this flag.",
			"direction":        "Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`",
			"nebula-preview":   "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must set this flag.",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"sort":             "Can be one of `created`, `updated`, `pushed`, `full_name`.",
			"type":             "Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.",
		},
		"list-for-user": {
			"direction":      "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
			"nebula-preview": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must set this flag.",
			"page":           "Page number of the results to fetch.",
			"per_page":       "Results per page (max 100)",
			"sort":           "Can be one of `created`, `updated`, `pushed`, `full_name`.",
			"type":           "Can be one of `all`, `owner`, `member`.",
		},
		"list-forks": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
			"sort":     "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
		},
		"list-invitations": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-invitations-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-languages": {"repo": "repository in OWNER/REPO form"},
		"list-pages-builds": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-public": {"since": "The integer ID of the last repository that you've seen."},
		"list-pull-requests-associated-with-commit": {
			"groot-preview": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must set this flag.",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
			"repo":          "repository in OWNER/REPO form",
		},
		"list-release-assets": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-releases": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-tags": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-teams": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"list-webhooks": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repository in OWNER/REPO form",
		},
		"merge": {
			"base":           "The name of the base branch that the head will be merged into.",
			"commit_message": "Commit message to use for the merge commit. If omitted, a default message will be used.",
			"head":           "The head to merge. This can be a branch name or a commit SHA1.",
			"repo":           "repository in OWNER/REPO form",
		},
		"ping-webhook":                    {"repo": "repository in OWNER/REPO form"},
		"remove-app-access-restrictions":  {"repo": "repository in OWNER/REPO form"},
		"remove-collaborator":             {"repo": "repository in OWNER/REPO form"},
		"remove-status-check-contexts":    {"repo": "repository in OWNER/REPO form"},
		"remove-status-check-protection":  {"repo": "repository in OWNER/REPO form"},
		"remove-team-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"remove-user-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"replace-all-topics": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must set this flag.",
			"names":         "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.",
			"repo":          "repository in OWNER/REPO form",
		},
		"request-pages-build":          {"repo": "repository in OWNER/REPO form"},
		"set-admin-branch-protection":  {"repo": "repository in OWNER/REPO form"},
		"set-app-access-restrictions":  {"repo": "repository in OWNER/REPO form"},
		"set-status-check-contexts":    {"repo": "repository in OWNER/REPO form"},
		"set-team-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"set-user-access-restrictions": {"repo": "repository in OWNER/REPO form"},
		"test-push-webhook":            {"repo": "repository in OWNER/REPO form"},
		"transfer": {
			"new_owner": "**Required:** The username or organization name the repository will be transferred to.",
			"repo":      "repository in OWNER/REPO form",
			"team_ids":  "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
		},
		"update": {
			"allow_merge_commit":     "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
			"allow_rebase_merge":     "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
			"allow_squash_merge":     "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
			"archived":               "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
			"baptiste-preview":       "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must set this flag.",
			"default_branch":         "Updates the default branch for this repository.",
			"delete_branch_on_merge": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
			"description":            "A short description of the repository.",
			"has_issues":             "Either `true` to enable issues for this repository or `false` to disable them.",
			"has_projects":           "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
			"has_wiki":               "Either `true` to enable the wiki for this repository or `false` to disable it.",
			"homepage":               "A URL with more information about the repository.",
			"is_template":            "Either `true` to make this repo available as a template repository or `false` to prevent it.",
			"name":                   "The name of the repository.",
			"nebula-preview":         "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must set this flag.",
			"private":                "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
			"repo":                   "repository in OWNER/REPO form",
			"visibility":             "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.",
		},
		"update-branch-protection": {
			"allow_deletions":         "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\".",
			"allow_force_pushes":      "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\".",
			"enforce_admins":          "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
			"luke-cage-preview":       "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must set this flag.",
			"repo":                    "repository in OWNER/REPO form",
			"required_linear_history": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\".",
			"required_pull_request_reviews.dismiss_stale_reviews":           "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
			"required_pull_request_reviews.dismissal_restrictions.teams":    "The list of team `slug`s with dismissal access",
			"required_pull_request_reviews.dismissal_restrictions.users":    "The list of user `login`s with dismissal access",
			"required_pull_request_reviews.require_code_owner_reviews":      "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.",
			"required_pull_request_reviews.required_approving_review_count": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
			"required_status_checks.contexts":                               "The list of status checks to require in order to merge into this branch",
			"required_status_checks.strict":                                 "Require branches to be up to date before merging.",
			"restrictions.apps":                                             "The list of app `slug`s with push access",
			"restrictions.teams":                                            "The list of team `slug`s with push access",
			"restrictions.users":                                            "The list of user `login`s with push access",
		},
		"update-commit-comment": {
			"body": "The contents of the comment",
			"repo": "repository in OWNER/REPO form",
		},
		"update-information-about-pages-site": {
			"cname":  "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).\"",
			"repo":   "repository in OWNER/REPO form",
			"source": "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`.",
		},
		"update-invitation": {
			"permissions": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
			"repo":        "repository in OWNER/REPO form",
		},
		"update-pull-request-review-protection": {
			"dismiss_stale_reviews":           "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
			"dismissal_restrictions.teams":    "The list of team `slug`s with dismissal access",
			"dismissal_restrictions.users":    "The list of user `login`s with dismissal access",
			"luke-cage-preview":               "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must set this flag.",
			"repo":                            "repository in OWNER/REPO form",
			"require_code_owner_reviews":      "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.",
			"required_approving_review_count": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
		},
		"update-release": {
			"body":             "Text describing the contents of the tag.",
			"draft":            "`true` makes the release a draft, and `false` publishes the release.",
			"name":             "The name of the release.",
			"prerelease":       "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
			"repo":             "repository in OWNER/REPO form",
			"tag_name":         "The name of the tag.",
			"target_commitish": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
		},
		"update-release-asset": {
			"label": "An alternate short description of the asset. Used in place of the filename.",
			"name":  "The file name of the asset.",
			"repo":  "repository in OWNER/REPO form",
		},
		"update-status-check-potection": {
			"contexts": "The list of status checks to require in order to merge into this branch",
			"repo":     "repository in OWNER/REPO form",
			"strict":   "Require branches to be up to date before merging.",
		},
		"update-webhook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"add_events":          "Determines a list of events to be added to the list of events that the Hook triggers for.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
			"remove_events":       "Determines a list of events to be removed from the list of events that the Hook triggers for.",
			"repo":                "repository in OWNER/REPO form",
		},
		"upload-release-asset": {
			"content-type": "override the Content-Type header",
			"file":         "the file to upload",
			"label":        "label parameter",
			"name":         "name parameter",
			"release_id":   "release_id parameter",
			"repo":         "repository in OWNER/REPO form",
		},
	},
	"scim": {"list-provisioned-identities": {
		"count":      "Used for pagination: the number of results to return.",
		"filter":     "Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query: `?filter=userName%20eq%20\\\"Octocat\\\"`.",
		"startIndex": "Used for pagination: the index of the first result to return.",
	}},
	"search": {
		"code": {
			"order":    "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"q":        "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers.",
			"sort":     "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"commits": {
			"cloak-preview": "The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2017-01-05-commit-search-api/) for full details.\n\nTo access the API you must set this flag.",
			"order":         "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
			"q":             "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers.",
			"sort":          "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"issues-and-pull-requests": {
			"order":    "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"q":        "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
			"sort":     "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"labels": {
			"order":         "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"q":             "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
			"repository_id": "The id of the repository.",
			"sort":          "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"repos": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must set this flag.",
			"order":         "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
			"q":             "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
			"sort":          "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"topics": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must set this flag.",
			"q":             "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
		},
		"users": {
			"order":    "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"q":        "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers.",
			"sort":     "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
	},
	"teams": {
		"add-or-update-membership-for-user-in-org": {"role": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description."},
		"add-or-update-membership-for-user-legacy": {"role": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description."},
		"add-or-update-project-permissions-in-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"permission":      "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
		},
		"add-or-update-project-permissions-legacy": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"permission":      "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
		},
		"add-or-update-repo-permissions-in-org": {
			"permission": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n\\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  \n\\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
			"repo":       "repository in OWNER/REPO form",
		},
		"add-or-update-repo-permissions-legacy": {
			"permission": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
			"repo":       "repository in OWNER/REPO form",
		},
		"check-permissions-for-project-in-org": {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"check-permissions-for-project-legacy": {"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag."},
		"check-permissions-for-repo-in-org":    {"repo": "repository in OWNER/REPO form"},
		"check-permissions-for-repo-legacy":    {"repo": "repository in OWNER/REPO form"},
		"create": {
			"description":    "The description of the team.",
			"maintainers":    "List GitHub IDs for organization members who will become team maintainers.",
			"name":           "The name of the team.",
			"parent_team_id": "The ID of a team to set as the parent team.",
			"permission":     "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
			"privacy":        "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
			"repo_names":     "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
		},
		"create-discussion-comment-in-org": {
			"body":                  "The discussion comment's body text.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-discussion-comment-legacy": {
			"body":                  "The discussion comment's body text.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"create-discussion-in-org": {
			"body":                  "The discussion post's body text.",
			"private":               "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"title":                 "The discussion post's title.",
		},
		"create-discussion-legacy": {
			"body":                  "The discussion post's body text.",
			"private":               "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"title":                 "The discussion post's title.",
		},
		"create-or-update-id-p-group-connections-in-org": {"groups": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove."},
		"create-or-update-id-p-group-connections-legacy": {"groups": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove."},
		"get-discussion-comment-in-org":                  {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"get-discussion-comment-legacy":                  {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"get-discussion-in-org":                          {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"get-discussion-legacy":                          {"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag."},
		"list": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-child-in-org": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-child-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-discussion-comments-in-org": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-discussion-comments-legacy": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-discussions-in-org": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-discussions-legacy": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"list-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-id-p-groups-for-org": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-members-in-org": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"role":     "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
		},
		"list-members-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"role":     "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
		},
		"list-pending-invitations-in-org": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-pending-invitations-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-projects-in-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
		},
		"list-projects-legacy": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must set this flag.",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
		},
		"list-repos-in-org": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-repos-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"remove-repo-in-org": {"repo": "repository in OWNER/REPO form"},
		"remove-repo-legacy": {"repo": "repository in OWNER/REPO form"},
		"update-discussion-comment-in-org": {
			"body":                  "The discussion comment's body text.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"update-discussion-comment-legacy": {
			"body":                  "The discussion comment's body text.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
		},
		"update-discussion-in-org": {
			"body":                  "The discussion post's body text.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"title":                 "The discussion post's title.",
		},
		"update-discussion-legacy": {
			"body":                  "The discussion post's body text.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must set this flag.",
			"title":                 "The discussion post's title.",
		},
		"update-in-org": {
			"description":    "The description of the team.",
			"name":           "The name of the team.",
			"parent_team_id": "The ID of a team to set as the parent team.",
			"permission":     "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
			"privacy":        "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
		},
		"update-legacy": {
			"description":    "The description of the team.",
			"name":           "The name of the team.",
			"parent_team_id": "The ID of a team to set as the parent team.",
			"permission":     "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
			"privacy":        "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
		},
	},
	"users": {
		"add-email-for-authenticated":      {"emails": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key."},
		"create-gpg-key-for-authenticated": {"armored_public_key": "Your GPG key, generated in ASCII-armored format. See \"[Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/)\" for help creating a GPG key."},
		"create-public-ssh-key-for-authenticated": {
			"key":   "The public SSH key to add to your GitHub account. See \"[Generating a new SSH key](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\" for guidance on how to create a public SSH key.",
			"title": "A descriptive name for the new key. Use a name that will help you recognize this key in your GitHub account. For example, if you're using a personal Mac, you might call this key \"Personal MacBook Air\".",
		},
		"delete-email-for-authenticated": {"emails": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key."},
		"get-context-for-user": {
			"subject_id":   "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
			"subject_type": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
		},
		"list": {"since": "The integer ID of the last User that you've seen."},
		"list-emails-for-authenticated": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-followed-by-authenticated": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-followers-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-followers-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-following-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-gpg-keys-for-authenticated": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-gpg-keys-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-emails-for-authenticated": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-keys-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-ssh-keys-for-authenticated": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"set-primary-email-visibility-for-authenticated": {
			"email":      "Specify the _primary_ email address that needs a visibility change.",
			"visibility": "Use `public` to enable an authenticated user to view the specified email address, or use `private` so this primary email address cannot be seen publicly.",
		},
		"update-authenticated": {
			"bio":              "The new short biography of the user.",
			"blog":             "The new blog URL of the user.",
			"company":          "The new company of the user.",
			"email":            "The publicly visible email address of the user.",
			"hireable":         "The new hiring availability of the user.",
			"location":         "The new location of the user.",
			"name":             "The new name of the user.",
			"twitter_username": "The new Twitter username of the user.",
		},
	},
}
