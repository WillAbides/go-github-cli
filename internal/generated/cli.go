// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

type CLI struct {
	Actions             ActionsCmd             `cmd:""`
	Activity            ActivityCmd            `cmd:""`
	Apps                AppsCmd                `cmd:""`
	Checks              ChecksCmd              `cmd:""`
	CodeScanning        CodeScanningCmd        `cmd:""`
	CodesOfConduct      CodesOfConductCmd      `cmd:""`
	Emojis              EmojisCmd              `cmd:""`
	Gists               GistsCmd               `cmd:""`
	Git                 GitCmd                 `cmd:""`
	Gitignore           GitignoreCmd           `cmd:""`
	Interactions        InteractionsCmd        `cmd:""`
	Issues              IssuesCmd              `cmd:""`
	Licenses            LicensesCmd            `cmd:""`
	Markdown            MarkdownCmd            `cmd:""`
	Meta                MetaCmd                `cmd:""`
	Migrations          MigrationsCmd          `cmd:""`
	OauthAuthorizations OauthAuthorizationsCmd `cmd:""`
	Orgs                OrgsCmd                `cmd:""`
	Projects            ProjectsCmd            `cmd:""`
	Pulls               PullsCmd               `cmd:""`
	RateLimit           RateLimitCmd           `cmd:""`
	Reactions           ReactionsCmd           `cmd:""`
	Repos               ReposCmd               `cmd:""`
	Scim                ScimCmd                `cmd:""`
	Search              SearchCmd              `cmd:""`
	Teams               TeamsCmd               `cmd:""`
	Users               UsersCmd               `cmd:""`
}

var CmdHelps = map[string]map[string]string{
	"actions": {
		"cancel-workflow-run":                 "Cancel a workflow run - https://developer.github.com/v3/actions/workflow-runs/#cancel-a-workflow-run",
		"create-or-update-secret-for-repo":    "Create or update a secret for a repository - https://developer.github.com/v3/actions/secrets/#create-or-update-a-secret-for-a-repository",
		"create-registration-token-for-org":   "Create a registration token for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization",
		"create-registration-token-for-repo":  "Create a registration token for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository",
		"create-remove-token-for-org":         "Create a remove token for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization",
		"create-remove-token-for-repo":        "Create a remove token for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository",
		"delete-artifact":                     "Delete an artifact - https://developer.github.com/v3/actions/artifacts/#delete-an-artifact",
		"delete-secret-from-repo":             "Delete a secret from a repository - https://developer.github.com/v3/actions/secrets/#delete-a-secret-from-a-repository",
		"delete-self-hosted-runner-from-org":  "Delete a self-hosted runner from an organization - https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-an-organization",
		"delete-self-hosted-runner-from-repo": "Delete a self-hosted runner from a repository - https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-a-repository",
		"delete-workflow-run-logs":            "Delete workflow run logs - https://developer.github.com/v3/actions/workflow-runs/#delete-workflow-run-logs",
		"download-artifact":                   "Download an artifact - https://developer.github.com/v3/actions/artifacts/#download-an-artifact",
		"download-workflow-job-logs":          "Download workflow job logs - https://developer.github.com/v3/actions/workflow-jobs/#download-workflow-job-logs",
		"download-workflow-run-logs":          "Download workflow run logs - https://developer.github.com/v3/actions/workflow-runs/#download-workflow-run-logs",
		"get-artifact":                        "Get an artifact - https://developer.github.com/v3/actions/artifacts/#get-an-artifact",
		"get-public-key":                      "Get your public key - https://developer.github.com/v3/actions/secrets/#get-your-public-key",
		"get-secret":                          "Get a secret - https://developer.github.com/v3/actions/secrets/#get-a-secret",
		"get-self-hosted-runner-for-org":      "Get a self-hosted runner for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization",
		"get-self-hosted-runner-for-repo":     "Get a self-hosted runner for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository",
		"get-workflow":                        "Get a workflow - https://developer.github.com/v3/actions/workflows/#get-a-workflow",
		"get-workflow-job":                    "Get a workflow job - https://developer.github.com/v3/actions/workflow-jobs/#get-a-workflow-job",
		"get-workflow-run":                    "Get a workflow run - https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run",
		"list-artifacts-for-repo":             "List artifacts for a repository - https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository",
		"list-jobs-for-workflow-run":          "List jobs for a workflow run - https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run",
		"list-repo-workflow-runs":             "List repository workflow runs - https://developer.github.com/v3/actions/workflow-runs/#list-repository-workflow-runs",
		"list-repo-workflows":                 "List repository workflows - https://developer.github.com/v3/actions/workflows/#list-repository-workflows",
		"list-runner-applications-for-org":    "List runner applications for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization",
		"list-runner-applications-for-repo":   "List runner applications for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository",
		"list-secrets-for-repo":               "List secrets for a repository - https://developer.github.com/v3/actions/secrets/#list-secrets-for-a-repository",
		"list-self-hosted-runners-for-org":    "List self-hosted runners for an organization - https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization",
		"list-self-hosted-runners-for-repo":   "List self-hosted runners for a repository - https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository",
		"list-workflow-run-artifacts":         "List workflow run artifacts - https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts",
		"list-workflow-runs":                  "List workflow runs - https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs",
		"re-run-workflow":                     "Re-run a workflow - https://developer.github.com/v3/actions/workflow-runs/#re-run-a-workflow",
	},
	"activity": {
		"check-repo-is-starred-by-authenticated-user":    "Check if a repository is starred by the authenticated user - https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user",
		"check-watching-repo-legacy":                     "Check if you are watching a repository (LEGACY) - https://developer.github.com/v3/activity/watching/#check-if-you-are-watching-a-repository-legacy",
		"delete-repo-subscription":                       "Delete a repository subscription - https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription",
		"delete-thread-subscription":                     "Delete a thread subscription - https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription",
		"get-feeds":                                      "Get feeds - https://developer.github.com/v3/activity/feeds/#get-feeds",
		"get-repo-subscription":                          "Get a repository subscription - https://developer.github.com/v3/activity/watching/#get-a-repository-subscription",
		"get-thread":                                     "Get a thread - https://developer.github.com/v3/activity/notifications/#get-a-thread",
		"get-thread-subscription-for-authenticated-user": "Get a thread subscription for the authenticated user - https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user",
		"list-events-for-authenticated-user":             "List events for the authenticated user - https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user",
		"list-notifications-for-authenticated-user":      "List notifications for the authenticated user - https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user",
		"list-org-events-for-authenticated-user":         "List organization events for the authenticated user - https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user",
		"list-public-events":                             "List public events - https://developer.github.com/v3/activity/events/#list-public-events",
		"list-public-events-for-repo-network":            "List public events for a network of repositories - https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories",
		"list-public-events-for-user":                    "List public events for a user - https://developer.github.com/v3/activity/events/#list-public-events-for-a-user",
		"list-public-org-events":                         "List public organization events - https://developer.github.com/v3/activity/events/#list-public-organization-events",
		"list-received-events-for-user":                  "List events received by the authenticated user - https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user",
		"list-received-public-events-for-user":           "List public events received by a user - https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user",
		"list-repo-events":                               "List repository events - https://developer.github.com/v3/activity/events/#list-repository-events",
		"list-repo-notifications-for-authenticated-user": "List repository notifications for the authenticated user - https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user",
		"list-repos-starred-by-authenticated-user":       "List repositories starred by the authenticated user - https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user",
		"list-repos-starred-by-user":                     "List repositories starred by a user - https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user",
		"list-repos-watched-by-user":                     "List repositories watched by a user - https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user",
		"list-stargazers-for-repo":                       "List stargazers - https://developer.github.com/v3/activity/starring/#list-stargazers",
		"list-watched-repos-for-authenticated-user":      "List repositories watched by the authenticated user - https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user",
		"list-watchers-for-repo":                         "List watchers - https://developer.github.com/v3/activity/watching/#list-watchers",
		"mark-notifications-as-read":                     "Mark notifications as read - https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read",
		"mark-repo-notifications-as-read":                "Mark repository notifications as read - https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read",
		"mark-thread-as-read":                            "Mark a thread as read - https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read",
		"set-repo-subscription":                          "Set a repository subscription - https://developer.github.com/v3/activity/watching/#set-a-repository-subscription",
		"set-thread-subscription":                        "Set a thread subscription - https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription",
		"star-repo-for-authenticated-user":               "Star a repository for the authenticated user - https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user",
		"stop-watching-repo-legacy":                      "Stop watching a repository (LEGACY) - https://developer.github.com/v3/activity/watching/#stop-watching-a-repository-legacy",
		"unstar-repo-for-authenticated-user":             "Unstar a repository for the authenticated user - https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user",
		"watch-repo-legacy":                              "Watch a repository (LEGACY) - https://developer.github.com/v3/activity/watching/#watch-a-repository-legacy",
	},
	"apps": {
		"add-repo-to-installation":                          "Add repository to installation - https://developer.github.com/v3/apps/installations/#add-repository-to-installation",
		"check-authorization":                               "Check an authorization - https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization",
		"check-token":                                       "Check a token - https://developer.github.com/v3/apps/oauth_applications/#check-a-token",
		"create-content-attachment":                         "Create a content attachment - https://developer.github.com/v3/apps/installations/#create-a-content-attachment",
		"create-from-manifest":                              "Create a GitHub App from a manifest - https://developer.github.com/v3/apps/#create-a-github-app-from-a-manifest",
		"create-installation-token":                         "Create a new installation token - https://developer.github.com/v3/apps/#create-a-new-installation-token",
		"delete-authorization":                              "Delete an app authorization - https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-authorization",
		"delete-installation":                               "Delete an installation - https://developer.github.com/v3/apps/#delete-an-installation",
		"delete-token":                                      "Delete an app token - https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-token",
		"get-authenticated":                                 "Get the authenticated GitHub App - https://developer.github.com/v3/apps/#get-the-authenticated-github-app",
		"get-by-slug":                                       "Get a single GitHub App - https://developer.github.com/v3/apps/#get-a-single-github-app",
		"get-installation":                                  "Get an installation - https://developer.github.com/v3/apps/#get-an-installation",
		"get-org-installation":                              "Get an organization installation - https://developer.github.com/v3/apps/#get-an-organization-installation",
		"get-repo-installation":                             "Get a repository installation - https://developer.github.com/v3/apps/#get-a-repository-installation",
		"get-subscription-plan-for-account":                 "Get a subscription plan for an account - https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account",
		"get-subscription-plan-for-account-stubbed":         "Get a subscription plan for an account (stubbed) - https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account-stubbed",
		"get-user-installation":                             "Get a user installation - https://developer.github.com/v3/apps/#get-a-user-installation",
		"list-accounts-for-plan":                            "List accounts for a plan - https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan",
		"list-accounts-for-plan-stubbed":                    "List accounts for a plan (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan-stubbed",
		"list-installation-repos-for-authenticated-user":    "List repositories accessible to the user for an installation - https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-for-an-installation",
		"list-installations":                                "List installations - https://developer.github.com/v3/apps/#list-installations",
		"list-installations-for-authenticated-user":         "List installations for a user - https://developer.github.com/v3/apps/installations/#list-installations-for-a-user",
		"list-plans":                                        "List plans - https://developer.github.com/v3/apps/marketplace/#list-plans",
		"list-plans-stubbed":                                "List plans (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-plans-stubbed",
		"list-repos":                                        "List repositories - https://developer.github.com/v3/apps/installations/#list-repositories",
		"list-subscriptions-for-authenticated-user":         "List subscriptions for the authenticated user - https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user",
		"list-subscriptions-for-authenticated-user-stubbed": "List subscriptions for the authenticated user (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user-stubbed",
		"remove-repo-from-installation":                     "Remove repository from installation - https://developer.github.com/v3/apps/installations/#remove-repository-from-installation",
		"reset-authorization":                               "Reset an authorization - https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization",
		"reset-token":                                       "Reset a token - https://developer.github.com/v3/apps/oauth_applications/#reset-a-token",
		"revoke-authorization-for-application":              "Revoke an authorization for an application - https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application",
		"revoke-grant-for-application":                      "Revoke a grant for an application - https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application",
		"revoke-installation-token":                         "Revoke an installation token - https://developer.github.com/v3/apps/installations/#revoke-an-installation-token",
		"suspend-installation":                              "Suspend an installation - https://developer.github.com/v3/apps/#suspend-an-installation",
		"unsuspend-installation":                            "Unsuspend an installation - https://developer.github.com/v3/apps/#unsuspend-an-installation",
	},
	"checks": {
		"create":                 "Create a check run - https://developer.github.com/v3/checks/runs/#create-a-check-run",
		"create-suite":           "Create a check suite - https://developer.github.com/v3/checks/suites/#create-a-check-suite",
		"get":                    "Get a check run - https://developer.github.com/v3/checks/runs/#get-a-check-run",
		"get-suite":              "Get a check suite - https://developer.github.com/v3/checks/suites/#get-a-check-suite",
		"list-annotations":       "List check run annotations - https://developer.github.com/v3/checks/runs/#list-check-run-annotations",
		"list-for-ref":           "List check runs for a Git reference - https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference",
		"list-for-suite":         "List check runs in a check suite - https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite",
		"list-suites-for-ref":    "List check suites for a Git reference - https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference",
		"rerequest-suite":        "Rerequest a check suite - https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite",
		"set-suites-preferences": "Update repository preferences for check suites - https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites",
		"update":                 "Update a check run - https://developer.github.com/v3/checks/runs/#update-a-check-run",
	},
	"code-scanning": {
		"get-alert":            "Get a code scanning alert - https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert",
		"list-alerts-for-repo": "List code scanning alerts for a repository - https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository",
	},
	"codes-of-conduct": {
		"get-all-codes-of-conduct": "List all codes of conduct - https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct",
		"get-conduct-code":         "Get an individual code of conduct - https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct",
		"get-for-repo":             "Get the contents of a repository's code of conduct - https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct",
	},
	"emojis": {
		"get": "Get - https://developer.github.com/v3/emojis/#emojis",
	},
	"gists": {
		"check-is-starred": "Check if a gist is starred - https://developer.github.com/v3/gists/#check-if-a-gist-is-starred",
		"create":           "Create a gist - https://developer.github.com/v3/gists/#create-a-gist",
		"create-comment":   "Create a comment - https://developer.github.com/v3/gists/comments/#create-a-comment",
		"delete":           "Delete a gist - https://developer.github.com/v3/gists/#delete-a-gist",
		"delete-comment":   "Delete a comment - https://developer.github.com/v3/gists/comments/#delete-a-comment",
		"fork":             "Fork a gist - https://developer.github.com/v3/gists/#fork-a-gist",
		"get":              "Get a gist - https://developer.github.com/v3/gists/#get-a-gist",
		"get-comment":      "Get a single comment - https://developer.github.com/v3/gists/comments/#get-a-single-comment",
		"get-revision":     "Get a specific revision of a gist - https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist",
		"list":             "List gists for the authenticated user - https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user",
		"list-comments":    "List comments on a gist - https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist",
		"list-commits":     "List gist commits - https://developer.github.com/v3/gists/#list-gist-commits",
		"list-for-user":    "List gists for a user - https://developer.github.com/v3/gists/#list-gists-for-a-user",
		"list-forks":       "List gist forks - https://developer.github.com/v3/gists/#list-gist-forks",
		"list-public":      "List public gists - https://developer.github.com/v3/gists/#list-public-gists",
		"list-starred":     "List starred gists - https://developer.github.com/v3/gists/#list-starred-gists",
		"star":             "Star a gist - https://developer.github.com/v3/gists/#star-a-gist",
		"unstar":           "Unstar a gist - https://developer.github.com/v3/gists/#unstar-a-gist",
		"update":           "Update a gist - https://developer.github.com/v3/gists/#update-a-gist",
		"update-comment":   "Edit a comment - https://developer.github.com/v3/gists/comments/#edit-a-comment",
	},
	"git": {
		"create-blob":        "Create a blob - https://developer.github.com/v3/git/blobs/#create-a-blob",
		"create-commit":      "Create a commit - https://developer.github.com/v3/git/commits/#create-a-commit",
		"create-ref":         "Create a reference - https://developer.github.com/v3/git/refs/#create-a-reference",
		"create-tag":         "Create a tag object - https://developer.github.com/v3/git/tags/#create-a-tag-object",
		"delete-ref":         "Delete a reference - https://developer.github.com/v3/git/refs/#delete-a-reference",
		"get-blob":           "Get a blob - https://developer.github.com/v3/git/blobs/#get-a-blob",
		"get-commit":         "Get a commit - https://developer.github.com/v3/git/commits/#get-a-commit",
		"get-ref":            "Get a single reference - https://developer.github.com/v3/git/refs/#get-a-single-reference",
		"get-tag":            "Get a tag - https://developer.github.com/v3/git/tags/#get-a-tag",
		"get-tree":           "Get a tree - https://developer.github.com/v3/git/trees/#get-a-tree",
		"list-matching-refs": "List matching references - https://developer.github.com/v3/git/refs/#list-matching-references",
		"update-ref":         "Update a reference - https://developer.github.com/v3/git/refs/#update-a-reference",
	},
	"gitignore": {
		"get-template":   "Get a single template - https://developer.github.com/v3/gitignore/#get-a-single-template",
		"list-templates": "Listing available templates - https://developer.github.com/v3/gitignore/#listing-available-templates",
	},
	"interactions": {
		"add-or-update-restrictions-for-org":  "Add or update interaction restrictions for an organization - https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization",
		"add-or-update-restrictions-for-repo": "Add or update interaction restrictions for a repository - https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository",
		"get-restrictions-for-org":            "Get interaction restrictions for an organization - https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization",
		"get-restrictions-for-repo":           "Get interaction restrictions for a repository - https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository",
		"remove-restrictions-for-org":         "Remove interaction restrictions for an organization - https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization",
		"remove-restrictions-for-repo":        "Remove interaction restrictions for a repository - https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository",
	},
	"issues": {
		"add-assignees":               "Add assignees to an issue - https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue",
		"add-labels":                  "Add labels to an issue - https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue",
		"check-assignee":              "Check assignee - https://developer.github.com/v3/issues/assignees/#check-assignee",
		"create":                      "Create an issue - https://developer.github.com/v3/issues/#create-an-issue",
		"create-comment":              "Create a comment - https://developer.github.com/v3/issues/comments/#create-a-comment",
		"create-label":                "Create a label - https://developer.github.com/v3/issues/labels/#create-a-label",
		"create-milestone":            "Create a milestone - https://developer.github.com/v3/issues/milestones/#create-a-milestone",
		"delete-comment":              "Delete a comment - https://developer.github.com/v3/issues/comments/#delete-a-comment",
		"delete-label":                "Delete a label - https://developer.github.com/v3/issues/labels/#delete-a-label",
		"delete-milestone":            "Delete a milestone - https://developer.github.com/v3/issues/milestones/#delete-a-milestone",
		"get":                         "Get an issue - https://developer.github.com/v3/issues/#get-an-issue",
		"get-comment":                 "Get a single comment - https://developer.github.com/v3/issues/comments/#get-a-single-comment",
		"get-event":                   "Get a single event - https://developer.github.com/v3/issues/events/#get-a-single-event",
		"get-label":                   "Get a single label - https://developer.github.com/v3/issues/labels/#get-a-single-label",
		"get-milestone":               "Get a single milestone - https://developer.github.com/v3/issues/milestones/#get-a-single-milestone",
		"list":                        "List issues assigned to the authenticated user - https://developer.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user",
		"list-assignees":              "List assignees - https://developer.github.com/v3/issues/assignees/#list-assignees",
		"list-comments":               "List comments on an issue - https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue",
		"list-comments-for-repo":      "List comments in a repository - https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository",
		"list-events":                 "List events for an issue - https://developer.github.com/v3/issues/events/#list-events-for-an-issue",
		"list-events-for-repo":        "List events for a repository - https://developer.github.com/v3/issues/events/#list-events-for-a-repository",
		"list-events-for-timeline":    "List events for an issue - https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue",
		"list-for-authenticated-user": "List user account issues assigned to the authenticated user - https://developer.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user",
		"list-for-org":                "List organization issues assigned to the authenticated user - https://developer.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user",
		"list-for-repo":               "List repository issues - https://developer.github.com/v3/issues/#list-repository-issues",
		"list-labels-for-milestone":   "Get labels for every issue in a milestone - https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone",
		"list-labels-for-repo":        "List all labels for this repository - https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository",
		"list-labels-on-issue":        "List labels on an issue - https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue",
		"list-milestones-for-repo":    "List milestones for a repository - https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository",
		"lock":                        "Lock an issue - https://developer.github.com/v3/issues/#lock-an-issue",
		"remove-all-labels":           "Remove all labels from an issue - https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue",
		"remove-assignees":            "Remove assignees from an issue - https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue",
		"remove-label":                "Remove a label from an issue - https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue",
		"replace-all-labels":          "Replace all labels for an issue - https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue",
		"unlock":                      "Unlock an issue - https://developer.github.com/v3/issues/#unlock-an-issue",
		"update":                      "Update an issue - https://developer.github.com/v3/issues/#update-an-issue",
		"update-comment":              "Edit a comment - https://developer.github.com/v3/issues/comments/#edit-a-comment",
		"update-label":                "Update a label - https://developer.github.com/v3/issues/labels/#update-a-label",
		"update-milestone":            "Update a milestone - https://developer.github.com/v3/issues/milestones/#update-a-milestone",
	},
	"licenses": {
		"get":                "Get an individual license - https://developer.github.com/v3/licenses/#get-an-individual-license",
		"get-for-repo":       "Get the contents of a repository's license - https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license",
		"list-commonly-used": "List commonly used licenses - https://developer.github.com/v3/licenses/#list-commonly-used-licenses",
	},
	"markdown": {
		"render": "Render an arbitrary Markdown document - https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document",
	},
	"meta": {
		"get": "Get - https://developer.github.com/v3/meta/#meta",
	},
	"migrations": {
		"cancel-import":                         "Cancel an import - https://developer.github.com/v3/migrations/source_imports/#cancel-an-import",
		"delete-archive-for-authenticated-user": "Delete a user migration archive - https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive",
		"delete-archive-for-org":                "Delete an organization migration archive - https://developer.github.com/v3/migrations/orgs/#delete-an-organization-migration-archive",
		"download-archive-for-org":              "Download an organization migration archive - https://developer.github.com/v3/migrations/orgs/#download-an-organization-migration-archive",
		"get-archive-for-authenticated-user":    "Download a user migration archive - https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive",
		"get-commit-authors":                    "Get commit authors - https://developer.github.com/v3/migrations/source_imports/#get-commit-authors",
		"get-import-progress":                   "Get import progress - https://developer.github.com/v3/migrations/source_imports/#get-import-progress",
		"get-large-files":                       "Get large files - https://developer.github.com/v3/migrations/source_imports/#get-large-files",
		"get-status-for-authenticated-user":     "Get the status of a user migration - https://developer.github.com/v3/migrations/users/#get-the-status-of-a-user-migration",
		"get-status-for-org":                    "Get the status of an organization migration - https://developer.github.com/v3/migrations/orgs/#get-the-status-of-an-organization-migration",
		"list-for-authenticated-user":           "List user migrations - https://developer.github.com/v3/migrations/users/#list-user-migrations",
		"list-for-org":                          "List organization migrations - https://developer.github.com/v3/migrations/orgs/#list-organization-migrations",
		"list-repos-for-org":                    "List repositories in an organization migration - https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration",
		"list-repos-for-user":                   "List repositories for a user migration - https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration",
		"map-commit-author":                     "Map a commit author - https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author",
		"set-lfs-preference":                    "Set Git LFS preference - https://developer.github.com/v3/migrations/source_imports/#set-git-lfs-preference",
		"start-for-authenticated-user":          "Start a user migration - https://developer.github.com/v3/migrations/users/#start-a-user-migration",
		"start-for-org":                         "Start an organization migration - https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration",
		"start-import":                          "Start an import - https://developer.github.com/v3/migrations/source_imports/#start-an-import",
		"unlock-repo-for-authenticated-user":    "Unlock a user repository - https://developer.github.com/v3/migrations/users/#unlock-a-user-repository",
		"unlock-repo-for-org":                   "Unlock an organization repository - https://developer.github.com/v3/migrations/orgs/#unlock-an-organization-repository",
		"update-import":                         "Update existing import - https://developer.github.com/v3/migrations/source_imports/#update-existing-import",
	},
	"oauth-authorizations": {
		"create-authorization":                "Create a new authorization - https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization",
		"delete-authorization":                "Delete an authorization - https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization",
		"delete-grant":                        "Delete a grant - https://developer.github.com/v3/oauth_authorizations/#delete-a-grant",
		"get-authorization":                   "Get a single authorization - https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization",
		"get-grant":                           "Get a single grant - https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant",
		"get-or-create-authorization-for-app": "Get-or-create an authorization for a specific app - https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app",
		"get-or-create-authorization-for-app-and-fingerprint": "Get-or-create an authorization for a specific app and fingerprint - https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint",
		"list-authorizations":  "List your authorizations - https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations",
		"list-grants":          "List your grants - https://developer.github.com/v3/oauth_authorizations/#list-your-grants",
		"update-authorization": "Update an existing authorization - https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization",
	},
	"orgs": {
		"add-or-update-membership":               "Add or update organization membership - https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership",
		"block-user":                             "Block a user - https://developer.github.com/v3/orgs/blocking/#block-a-user",
		"check-blocked-user":                     "Check whether a user is blocked from an organization - https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization",
		"check-membership":                       "Check membership - https://developer.github.com/v3/orgs/members/#check-membership",
		"check-public-membership":                "Check public membership - https://developer.github.com/v3/orgs/members/#check-public-membership",
		"conceal-membership":                     "Conceal a user's membership - https://developer.github.com/v3/orgs/members/#conceal-a-users-membership",
		"convert-member-to-outside-collaborator": "Convert member to outside collaborator - https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator",
		"create-hook":                            "Create a hook - https://developer.github.com/v3/orgs/hooks/#create-a-hook",
		"create-invitation":                      "Create organization invitation - https://developer.github.com/v3/orgs/members/#create-organization-invitation",
		"delete-hook":                            "Delete a hook - https://developer.github.com/v3/orgs/hooks/#delete-a-hook",
		"get":                                    "Get an organization - https://developer.github.com/v3/orgs/#get-an-organization",
		"get-hook":                               "Get single hook - https://developer.github.com/v3/orgs/hooks/#get-single-hook",
		"get-membership":                         "Get organization membership - https://developer.github.com/v3/orgs/members/#get-organization-membership",
		"get-membership-for-authenticated-user":  "Get your organization membership - https://developer.github.com/v3/orgs/members/#get-your-organization-membership",
		"list":                                   "List all organizations - https://developer.github.com/v3/orgs/#list-all-organizations",
		"list-blocked-users":                     "List blocked users - https://developer.github.com/v3/orgs/blocking/#list-blocked-users",
		"list-credential-authorizations":         "List credential authorizations for an organization - https://developer.github.com/v3/orgs/#list-credential-authorizations-for-an-organization",
		"list-for-authenticated-user":            "List your organizations - https://developer.github.com/v3/orgs/#list-your-organizations",
		"list-for-user":                          "List user organizations - https://developer.github.com/v3/orgs/#list-user-organizations",
		"list-hooks":                             "List hooks - https://developer.github.com/v3/orgs/hooks/#list-hooks",
		"list-installations":                     "List installations for an organization - https://developer.github.com/v3/orgs/#list-installations-for-an-organization",
		"list-invitation-teams":                  "List organization invitation teams - https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams",
		"list-members":                           "Members list - https://developer.github.com/v3/orgs/members/#members-list",
		"list-memberships":                       "List your organization memberships - https://developer.github.com/v3/orgs/members/#list-your-organization-memberships",
		"list-outside-collaborators":             "List outside collaborators - https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators",
		"list-pending-invitations":               "List pending organization invitations - https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations",
		"list-public-members":                    "Public members list - https://developer.github.com/v3/orgs/members/#public-members-list",
		"ping-hook":                              "Ping a hook - https://developer.github.com/v3/orgs/hooks/#ping-a-hook",
		"publicize-membership":                   "Publicize a user's membership - https://developer.github.com/v3/orgs/members/#publicize-a-users-membership",
		"remove-credential-authorization":        "Remove a credential authorization for an organization - https://developer.github.com/v3/orgs/#remove-a-credential-authorization-for-an-organization",
		"remove-member":                          "Remove a member - https://developer.github.com/v3/orgs/members/#remove-a-member",
		"remove-membership":                      "Remove organization membership - https://developer.github.com/v3/orgs/members/#remove-organization-membership",
		"remove-outside-collaborator":            "Remove outside collaborator - https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator",
		"unblock-user":                           "Unblock a user - https://developer.github.com/v3/orgs/blocking/#unblock-a-user",
		"update":                                 "Edit an organization - https://developer.github.com/v3/orgs/#edit-an-organization",
		"update-hook":                            "Edit a hook - https://developer.github.com/v3/orgs/hooks/#edit-a-hook",
		"update-membership":                      "Edit your organization membership - https://developer.github.com/v3/orgs/members/#edit-your-organization-membership",
	},
	"projects": {
		"add-collaborator":              "Add user as a collaborator - https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator",
		"create-card":                   "Create a project card - https://developer.github.com/v3/projects/cards/#create-a-project-card",
		"create-column":                 "Create a project column - https://developer.github.com/v3/projects/columns/#create-a-project-column",
		"create-for-authenticated-user": "Create a user project - https://developer.github.com/v3/projects/#create-a-user-project",
		"create-for-org":                "Create an organization project - https://developer.github.com/v3/projects/#create-an-organization-project",
		"create-for-repo":               "Create a repository project - https://developer.github.com/v3/projects/#create-a-repository-project",
		"delete":                        "Delete a project - https://developer.github.com/v3/projects/#delete-a-project",
		"delete-card":                   "Delete a project card - https://developer.github.com/v3/projects/cards/#delete-a-project-card",
		"delete-column":                 "Delete a project column - https://developer.github.com/v3/projects/columns/#delete-a-project-column",
		"get":                           "Get a project - https://developer.github.com/v3/projects/#get-a-project",
		"get-card":                      "Get a project card - https://developer.github.com/v3/projects/cards/#get-a-project-card",
		"get-column":                    "Get a project column - https://developer.github.com/v3/projects/columns/#get-a-project-column",
		"list-cards":                    "List project cards - https://developer.github.com/v3/projects/cards/#list-project-cards",
		"list-collaborators":            "List collaborators - https://developer.github.com/v3/projects/collaborators/#list-collaborators",
		"list-columns":                  "List project columns - https://developer.github.com/v3/projects/columns/#list-project-columns",
		"list-for-org":                  "List organization projects - https://developer.github.com/v3/projects/#list-organization-projects",
		"list-for-repo":                 "List repository projects - https://developer.github.com/v3/projects/#list-repository-projects",
		"list-for-user":                 "List user projects - https://developer.github.com/v3/projects/#list-user-projects",
		"move-card":                     "Move a project card - https://developer.github.com/v3/projects/cards/#move-a-project-card",
		"move-column":                   "Move a project column - https://developer.github.com/v3/projects/columns/#move-a-project-column",
		"remove-collaborator":           "Remove user as a collaborator - https://developer.github.com/v3/projects/collaborators/#remove-user-as-a-collaborator",
		"review-user-permission-level":  "Review a user's permission level - https://developer.github.com/v3/projects/collaborators/#review-a-users-permission-level",
		"update":                        "Update a project - https://developer.github.com/v3/projects/#update-a-project",
		"update-card":                   "Update a project card - https://developer.github.com/v3/projects/cards/#update-a-project-card",
		"update-column":                 "Update a project column - https://developer.github.com/v3/projects/columns/#update-a-project-column",
	},
	"pulls": {
		"check-if-merged":             "Get if a pull request has been merged - https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged",
		"create":                      "Create a pull request - https://developer.github.com/v3/pulls/#create-a-pull-request",
		"create-comment":              "Create a comment - https://developer.github.com/v3/pulls/comments/#create-a-comment",
		"create-review":               "Create a pull request review - https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review",
		"create-review-comment-reply": "Create a review comment reply - https://developer.github.com/v3/pulls/comments/#create-a-review-comment-reply",
		"create-review-request":       "Create a review request - https://developer.github.com/v3/pulls/review_requests/#create-a-review-request",
		"delete-comment":              "Delete a comment - https://developer.github.com/v3/pulls/comments/#delete-a-comment",
		"delete-pending-review":       "Delete a pending review - https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review",
		"delete-review-request":       "Delete a review request - https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request",
		"dismiss-review":              "Dismiss a pull request review - https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review",
		"get":                         "Get a single pull request - https://developer.github.com/v3/pulls/#get-a-single-pull-request",
		"get-comment":                 "Get a single comment - https://developer.github.com/v3/pulls/comments/#get-a-single-comment",
		"get-comments-for-review":     "Get comments for a single review - https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review",
		"get-review":                  "Get a single review - https://developer.github.com/v3/pulls/reviews/#get-a-single-review",
		"list":                        "List pull requests - https://developer.github.com/v3/pulls/#list-pull-requests",
		"list-comments":               "List comments on a pull request - https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request",
		"list-comments-for-repo":      "List comments in a repository - https://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository",
		"list-commits":                "List commits on a pull request - https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request",
		"list-files":                  "List pull requests files - https://developer.github.com/v3/pulls/#list-pull-requests-files",
		"list-review-requests":        "List review requests - https://developer.github.com/v3/pulls/review_requests/#list-review-requests",
		"list-reviews":                "List reviews on a pull request - https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request",
		"merge":                       "Merge a pull request (Merge Button) - https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button",
		"submit-review":               "Submit a pull request review - https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review",
		"update":                      "Update a pull request - https://developer.github.com/v3/pulls/#update-a-pull-request",
		"update-branch":               "Update a pull request branch - https://developer.github.com/v3/pulls/#update-a-pull-request-branch",
		"update-comment":              "Edit a comment - https://developer.github.com/v3/pulls/comments/#edit-a-comment",
		"update-review":               "Update a pull request review - https://developer.github.com/v3/pulls/reviews/#update-a-pull-request-review",
	},
	"rate-limit": {
		"get": "Get your current rate limit status - https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status",
	},
	"reactions": {
		"create-for-commit-comment":                 "Create reaction for a commit comment - https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment",
		"create-for-issue":                          "Create reaction for an issue - https://developer.github.com/v3/reactions/#create-reaction-for-an-issue",
		"create-for-issue-comment":                  "Create reaction for an issue comment - https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment",
		"create-for-pull-request-review-comment":    "Create reaction for a pull request review comment - https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment",
		"create-for-team-discussion-comment-in-org": "Create reaction for a team discussion comment - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment",
		"create-for-team-discussion-comment-legacy": "Create reaction for a team discussion comment (Legacy) - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy",
		"create-for-team-discussion-in-org":         "Create reaction for a team discussion - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion",
		"create-for-team-discussion-legacy":         "Create reaction for a team discussion (Legacy) - https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy",
		"delete-for-commit-comment":                 "Delete a commit comment reaction - https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction",
		"delete-for-issue":                          "Delete an issue reaction - https://developer.github.com/v3/reactions/#delete-an-issue-reaction",
		"delete-for-issue-comment":                  "Delete an issue comment reaction - https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction",
		"delete-for-pull-request-comment":           "Delete a pull request comment reaction - https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction",
		"delete-for-team-discussion":                "Delete team discussion reaction - https://developer.github.com/v3/reactions/#delete-team-discussion-reaction",
		"delete-for-team-discussion-comment":        "Delete team discussion comment reaction - https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction",
		"delete-legacy":                             "Delete a reaction (Legacy) - https://developer.github.com/v3/reactions/#delete-a-reaction-legacy",
		"list-for-commit-comment":                   "List reactions for a commit comment - https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment",
		"list-for-issue":                            "List reactions for an issue - https://developer.github.com/v3/reactions/#list-reactions-for-an-issue",
		"list-for-issue-comment":                    "List reactions for an issue comment - https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment",
		"list-for-pull-request-review-comment":      "List reactions for a pull request review comment - https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment",
		"list-for-team-discussion-comment-in-org":   "List reactions for a team discussion comment - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment",
		"list-for-team-discussion-comment-legacy":   "List reactions for a team discussion comment (Legacy) - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy",
		"list-for-team-discussion-in-org":           "List reactions for a team discussion - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion",
		"list-for-team-discussion-legacy":           "List reactions for a team discussion (Legacy) - https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy",
	},
	"repos": {
		"accept-invitation":                                    "Accept a repository invitation - https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation",
		"add-collaborator":                                     "Add user as a collaborator - https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator",
		"add-deploy-key":                                       "Add a new deploy key - https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key",
		"add-protected-branch-admin-enforcement":               "Add admin enforcement of protected branch - https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch",
		"add-protected-branch-app-restrictions":                "Add app restrictions of protected branch - https://developer.github.com/v3/repos/branches/#add-app-restrictions-of-protected-branch",
		"add-protected-branch-required-signatures":             "Add required signatures of protected branch - https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch",
		"add-protected-branch-required-status-checks-contexts": "Add required status checks contexts of protected branch - https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch",
		"add-protected-branch-team-restrictions":               "Add team restrictions of protected branch - https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch",
		"add-protected-branch-user-restrictions":               "Add user restrictions of protected branch - https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch",
		"check-collaborator":                                   "Check if a user is a collaborator - https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator",
		"check-vulnerability-alerts":                           "Check if vulnerability alerts are enabled for a repository - https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository",
		"compare-commits":                                      "Compare two commits - https://developer.github.com/v3/repos/commits/#compare-two-commits",
		"create-commit-comment":                                "Create a commit comment - https://developer.github.com/v3/repos/comments/#create-a-commit-comment",
		"create-deployment":                                    "Create a deployment - https://developer.github.com/v3/repos/deployments/#create-a-deployment",
		"create-deployment-status":                             "Create a deployment status - https://developer.github.com/v3/repos/deployments/#create-a-deployment-status",
		"create-dispatch-event":                                "Create a repository dispatch event - https://developer.github.com/v3/repos/#create-a-repository-dispatch-event",
		"create-for-authenticated-user":                        "Create a repository for the authenticated user - https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user",
		"create-fork":                                          "Create a fork - https://developer.github.com/v3/repos/forks/#create-a-fork",
		"create-hook":                                          "Create a hook - https://developer.github.com/v3/repos/hooks/#create-a-hook",
		"create-in-org":                                        "Create an organization repository - https://developer.github.com/v3/repos/#create-an-organization-repository",
		"create-or-update-file":                                "Create or update a file - https://developer.github.com/v3/repos/contents/#create-or-update-a-file",
		"create-release":                                       "Create a release - https://developer.github.com/v3/repos/releases/#create-a-release",
		"create-status":                                        "Create a status - https://developer.github.com/v3/repos/statuses/#create-a-status",
		"create-using-template":                                "Create a repository using a template - https://developer.github.com/v3/repos/#create-a-repository-using-a-template",
		"decline-invitation":                                   "Decline a repository invitation - https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation",
		"delete":                                               "Delete a repository - https://developer.github.com/v3/repos/#delete-a-repository",
		"delete-commit-comment":                                "Delete a commit comment - https://developer.github.com/v3/repos/comments/#delete-a-commit-comment",
		"delete-deployment":                                    "Delete a deployment - https://developer.github.com/v3/repos/deployments/#delete-a-deployment",
		"delete-download":                                      "Delete a download - https://developer.github.com/v3/repos/downloads/#delete-a-download",
		"delete-file":                                          "Delete a file - https://developer.github.com/v3/repos/contents/#delete-a-file",
		"delete-hook":                                          "Delete a hook - https://developer.github.com/v3/repos/hooks/#delete-a-hook",
		"delete-invitation":                                    "Delete a repository invitation - https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation",
		"delete-release":                                       "Delete a release - https://developer.github.com/v3/repos/releases/#delete-a-release",
		"delete-release-asset":                                 "Delete a release asset - https://developer.github.com/v3/repos/releases/#delete-a-release-asset",
		"disable-automated-security-fixes":                     "Disable automated security fixes - https://developer.github.com/v3/repos/#disable-automated-security-fixes",
		"disable-pages-site":                                   "Disable a Pages site - https://developer.github.com/v3/repos/pages/#disable-a-pages-site",
		"disable-vulnerability-alerts":                         "Disable vulnerability alerts - https://developer.github.com/v3/repos/#disable-vulnerability-alerts",
		"enable-automated-security-fixes":                      "Enable automated security fixes - https://developer.github.com/v3/repos/#enable-automated-security-fixes",
		"enable-pages-site":                                    "Enable a Pages site - https://developer.github.com/v3/repos/pages/#enable-a-pages-site",
		"enable-vulnerability-alerts":                          "Enable vulnerability alerts - https://developer.github.com/v3/repos/#enable-vulnerability-alerts",
		"get":                                                  "Get a repository - https://developer.github.com/v3/repos/#get-a-repository",
		"get-all-topics":                                       "Get all repository topics - https://developer.github.com/v3/repos/#get-all-repository-topics",
		"get-apps-with-access-to-protected-branch":             "Get apps with access to protected branch - https://developer.github.com/v3/repos/branches/#list-apps-with-access-to-protected-branch",
		"get-archive-link":                                     "Get archive link - https://developer.github.com/v3/repos/contents/#get-archive-link",
		"get-branch":                                           "Get branch - https://developer.github.com/v3/repos/branches/#get-branch",
		"get-branch-protection":                                "Get branch protection - https://developer.github.com/v3/repos/branches/#get-branch-protection",
		"get-clones":                                           "Clones - https://developer.github.com/v3/repos/traffic/#clones",
		"get-code-frequency-stats":                             "Get the number of additions and deletions per week - https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week",
		"get-collaborator-permission-level":                    "Review a user's permission level - https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level",
		"get-combined-status-for-ref":                          "Get the combined status for a specific ref - https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref",
		"get-commit":                                           "Get a single commit - https://developer.github.com/v3/repos/commits/#get-a-single-commit",
		"get-commit-activity-stats":                            "Get the last year of commit activity data - https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data",
		"get-commit-comment":                                   "Get a single commit comment - https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment",
		"get-contents":                                         "Get contents - https://developer.github.com/v3/repos/contents/#get-contents",
		"get-contributors-stats":                               "Get contributors list with additions, deletions, and commit counts - https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts",
		"get-deploy-key":                                       "Get a deploy key - https://developer.github.com/v3/repos/keys/#get-a-deploy-key",
		"get-deployment":                                       "Get a single deployment - https://developer.github.com/v3/repos/deployments/#get-a-single-deployment",
		"get-deployment-status":                                "Get a single deployment status - https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status",
		"get-download":                                         "Get a single download - https://developer.github.com/v3/repos/downloads/#get-a-single-download",
		"get-hook":                                             "Get single hook - https://developer.github.com/v3/repos/hooks/#get-single-hook",
		"get-latest-pages-build":                               "Get latest Pages build - https://developer.github.com/v3/repos/pages/#get-latest-pages-build",
		"get-latest-release":                                   "Get the latest release - https://developer.github.com/v3/repos/releases/#get-the-latest-release",
		"get-pages":                                            "Get information about a Pages site - https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site",
		"get-pages-build":                                      "Get a specific Pages build - https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build",
		"get-participation-stats":                              "Get the weekly commit count for the repository owner and everyone else - https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else",
		"get-protected-branch-admin-enforcement":               "Get admin enforcement of protected branch - https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch",
		"get-protected-branch-pull-request-review-enforcement": "Get pull request review enforcement of protected branch - https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch",
		"get-protected-branch-required-signatures":             "Get required signatures of protected branch - https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch",
		"get-protected-branch-required-status-checks":          "Get required status checks of protected branch - https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch",
		"get-protected-branch-restrictions":                    "Get restrictions of protected branch - https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch",
		"get-punch-card-stats":                                 "Get the number of commits per hour in each day - https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day",
		"get-readme":                                           "Get the README - https://developer.github.com/v3/repos/contents/#get-the-readme",
		"get-release":                                          "Get a single release - https://developer.github.com/v3/repos/releases/#get-a-single-release",
		"get-release-asset":                                    "Get a single release asset - https://developer.github.com/v3/repos/releases/#get-a-single-release-asset",
		"get-release-by-tag":                                   "Get a release by tag name - https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name",
		"get-teams-with-access-to-protected-branch":            "Get teams with access to protected branch - https://developer.github.com/v3/repos/branches/#list-teams-with-access-to-protected-branch",
		"get-top-paths":                                        "List paths - https://developer.github.com/v3/repos/traffic/#list-paths",
		"get-top-referrers":                                    "List referrers - https://developer.github.com/v3/repos/traffic/#list-referrers",
		"get-users-with-access-to-protected-branch":            "Get users with access to protected branch - https://developer.github.com/v3/repos/branches/#list-users-with-access-to-protected-branch",
		"get-views":                                            "Views - https://developer.github.com/v3/repos/traffic/#views",
		"list-assets-for-release":                              "List assets for a release - https://developer.github.com/v3/repos/releases/#list-assets-for-a-release",
		"list-branches":                                        "List branches - https://developer.github.com/v3/repos/branches/#list-branches",
		"list-branches-for-head-commit":                        "List branches for HEAD commit - https://developer.github.com/v3/repos/commits/#list-branches-for-head-commit",
		"list-collaborators":                                   "List collaborators - https://developer.github.com/v3/repos/collaborators/#list-collaborators",
		"list-comments-for-commit":                             "List comments for a single commit - https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit",
		"list-commit-comments":                                 "List commit comments for a repository - https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository",
		"list-commits":                                         "List commits on a repository - https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository",
		"list-contributors":                                    "List contributors - https://developer.github.com/v3/repos/#list-contributors",
		"list-deploy-keys":                                     "List deploy keys - https://developer.github.com/v3/repos/keys/#list-deploy-keys",
		"list-deployment-statuses":                             "List deployment statuses - https://developer.github.com/v3/repos/deployments/#list-deployment-statuses",
		"list-deployments":                                     "List deployments - https://developer.github.com/v3/repos/deployments/#list-deployments",
		"list-downloads":                                       "List downloads for a repository - https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository",
		"list-for-authenticated-user":                          "List repositories for the authenticated user - https://developer.github.com/v3/repos/#list-repositories-for-the-authenticated-user",
		"list-for-org":                                         "List organization repositories - https://developer.github.com/v3/repos/#list-organization-repositories",
		"list-for-user":                                        "List repositories for a user - https://developer.github.com/v3/repos/#list-repositories-for-a-user",
		"list-forks":                                           "List forks - https://developer.github.com/v3/repos/forks/#list-forks",
		"list-hooks":                                           "List hooks - https://developer.github.com/v3/repos/hooks/#list-hooks",
		"list-invitations":                                     "List invitations for a repository - https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository",
		"list-invitations-for-authenticated-user":              "List a user's repository invitations - https://developer.github.com/v3/repos/invitations/#list-a-users-repository-invitations",
		"list-languages":                                       "List languages - https://developer.github.com/v3/repos/#list-languages",
		"list-pages-builds":                                    "List Pages builds - https://developer.github.com/v3/repos/pages/#list-pages-builds",
		"list-protected-branch-required-status-checks-contexts": "List required status checks contexts of protected branch - https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch",
		"list-public": "List public repositories - https://developer.github.com/v3/repos/#list-public-repositories",
		"list-pull-requests-associated-with-commit": "List pull requests associated with commit - https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit",
		"list-releases":            "List releases for a repository - https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository",
		"list-statuses-for-ref":    "List statuses for a specific ref - https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref",
		"list-tags":                "List tags - https://developer.github.com/v3/repos/#list-tags",
		"list-teams":               "List teams - https://developer.github.com/v3/repos/#list-teams",
		"merge":                    "Perform a merge - https://developer.github.com/v3/repos/merging/#perform-a-merge",
		"ping-hook":                "Ping a hook - https://developer.github.com/v3/repos/hooks/#ping-a-hook",
		"remove-branch-protection": "Remove branch protection - https://developer.github.com/v3/repos/branches/#remove-branch-protection",
		"remove-collaborator":      "Remove user as a collaborator - https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator",
		"remove-deploy-key":        "Remove a deploy key - https://developer.github.com/v3/repos/keys/#remove-a-deploy-key",
		"remove-protected-branch-admin-enforcement":                "Remove admin enforcement of protected branch - https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch",
		"remove-protected-branch-app-restrictions":                 "Remove app restrictions of protected branch - https://developer.github.com/v3/repos/branches/#remove-app-restrictions-of-protected-branch",
		"remove-protected-branch-pull-request-review-enforcement":  "Remove pull request review enforcement of protected branch - https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch",
		"remove-protected-branch-required-signatures":              "Remove required signatures of protected branch - https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch",
		"remove-protected-branch-required-status-checks":           "Remove required status checks of protected branch - https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch",
		"remove-protected-branch-required-status-checks-contexts":  "Remove required status checks contexts of protected branch - https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch",
		"remove-protected-branch-restrictions":                     "Remove restrictions of protected branch - https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch",
		"remove-protected-branch-team-restrictions":                "Remove team restrictions of protected branch - https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch",
		"remove-protected-branch-user-restrictions":                "Remove user restrictions of protected branch - https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch",
		"replace-all-topics":                                       "Replace all repository topics - https://developer.github.com/v3/repos/#replace-all-repository-topics",
		"replace-protected-branch-app-restrictions":                "Replace app restrictions of protected branch - https://developer.github.com/v3/repos/branches/#replace-app-restrictions-of-protected-branch",
		"replace-protected-branch-required-status-checks-contexts": "Replace required status checks contexts of protected branch - https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch",
		"replace-protected-branch-team-restrictions":               "Replace team restrictions of protected branch - https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch",
		"replace-protected-branch-user-restrictions":               "Replace user restrictions of protected branch - https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch",
		"request-page-build":                                       "Request a page build - https://developer.github.com/v3/repos/pages/#request-a-page-build",
		"retrieve-community-profile-metrics":                       "Retrieve community profile metrics - https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics",
		"test-push-hook":                                           "Test a push hook - https://developer.github.com/v3/repos/hooks/#test-a-push-hook",
		"transfer":                                                 "Transfer a repository - https://developer.github.com/v3/repos/#transfer-a-repository",
		"update":                                                   "Update a repository - https://developer.github.com/v3/repos/#update-a-repository",
		"update-commit-comment":                                    "Update a commit comment - https://developer.github.com/v3/repos/comments/#update-a-commit-comment",
		"update-hook":                                              "Edit a hook - https://developer.github.com/v3/repos/hooks/#edit-a-hook",
		"update-information-about-pages-site":                      "Update information about a Pages site - https://developer.github.com/v3/repos/pages/#update-information-about-a-pages-site",
		"update-invitation":                                        "Update a repository invitation - https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation",
		"update-protected-branch-pull-request-review-enforcement":  "Update pull request review enforcement of protected branch - https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch",
		"update-protected-branch-required-status-checks":           "Update required status checks of protected branch - https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch",
		"update-release":                                           "Edit a release - https://developer.github.com/v3/repos/releases/#edit-a-release",
		"update-release-asset":                                     "Edit a release asset - https://developer.github.com/v3/repos/releases/#edit-a-release-asset",
	},
	"scim": {
		"get-provisioning-details-for-user":    "Get provisioning details for a single user - https://developer.github.com/v3/scim/#get-provisioning-details-for-a-single-user",
		"list-provisioned-identities":          "Get a list of provisioned identities - https://developer.github.com/v3/scim/#get-a-list-of-provisioned-identities",
		"provision-and-invite-users":           "Provision and invite users - https://developer.github.com/v3/scim/#provision-and-invite-users",
		"remove-user-from-org":                 "Remove a user from the organization - https://developer.github.com/v3/scim/#remove-a-user-from-the-organization",
		"replace-provisioned-user-information": "Replace a provisioned user's information - https://developer.github.com/v3/scim/#replace-a-provisioned-users-information",
		"update-user-attribute":                "Update a user attribute - https://developer.github.com/v3/scim/#update-a-user-attribute",
	},
	"search": {
		"code":                     "Search code - https://developer.github.com/v3/search/#search-code",
		"commits":                  "Search commits - https://developer.github.com/v3/search/#search-commits",
		"email-legacy":             "Email search - https://developer.github.com/v3/search/legacy/#email-search",
		"issues-and-pull-requests": "Search issues and pull requests - https://developer.github.com/v3/search/#search-issues-and-pull-requests",
		"issues-legacy":            "Search issues - https://developer.github.com/v3/search/legacy/#search-issues",
		"labels":                   "Search labels - https://developer.github.com/v3/search/#search-labels",
		"repos":                    "Search repositories - https://developer.github.com/v3/search/#search-repositories",
		"repos-legacy":             "Search repositories - https://developer.github.com/v3/search/legacy/#search-repositories",
		"topics":                   "Search topics - https://developer.github.com/v3/search/#search-topics",
		"users":                    "Search users - https://developer.github.com/v3/search/#search-users",
		"users-legacy":             "Search users - https://developer.github.com/v3/search/legacy/#search-users",
	},
	"teams": {
		"add-member-legacy":                "Add team member (Legacy) - https://developer.github.com/v3/teams/members/#add-team-member-legacy",
		"add-or-update-membership-in-org":  "Add or update team membership - https://developer.github.com/v3/teams/members/#add-or-update-team-membership",
		"add-or-update-membership-legacy":  "Add or update team membership (Legacy) - https://developer.github.com/v3/teams/members/#add-or-update-team-membership-legacy",
		"add-or-update-project-in-org":     "Add or update team project - https://developer.github.com/v3/teams/#add-or-update-team-project",
		"add-or-update-project-legacy":     "Add or update team project (Legacy) - https://developer.github.com/v3/teams/#add-or-update-team-project-legacy",
		"add-or-update-repo-in-org":        "Add or update team repository - https://developer.github.com/v3/teams/#add-or-update-team-repository",
		"add-or-update-repo-legacy":        "Add or update team repository (Legacy) - https://developer.github.com/v3/teams/#add-or-update-team-repository-legacy",
		"check-manages-repo-in-org":        "Check if a team manages a repository - https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository",
		"check-manages-repo-legacy":        "Check if a team manages a repository (Legacy) - https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository-legacy",
		"create":                           "Create team - https://developer.github.com/v3/teams/#create-team",
		"create-discussion-comment-in-org": "Create a comment - https://developer.github.com/v3/teams/discussion_comments/#create-a-comment",
		"create-discussion-comment-legacy": "Create a comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#create-a-comment-legacy",
		"create-discussion-in-org":         "Create a discussion - https://developer.github.com/v3/teams/discussions/#create-a-discussion",
		"create-discussion-legacy":         "Create a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy",
		"delete-discussion-comment-in-org": "Delete a comment - https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment",
		"delete-discussion-comment-legacy": "Delete a comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment-legacy",
		"delete-discussion-in-org":         "Delete a discussion - https://developer.github.com/v3/teams/discussions/#delete-a-discussion",
		"delete-discussion-legacy":         "Delete a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy",
		"delete-in-org":                    "Delete team - https://developer.github.com/v3/teams/#delete-team",
		"delete-legacy":                    "Delete team (Legacy) - https://developer.github.com/v3/teams/#delete-team-legacy",
		"get-by-name":                      "Get team by name - https://developer.github.com/v3/teams/#get-team-by-name",
		"get-discussion-comment-in-org":    "Get a single comment - https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment",
		"get-discussion-comment-legacy":    "Get a single comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment-legacy",
		"get-discussion-in-org":            "Get a single discussion - https://developer.github.com/v3/teams/discussions/#get-a-single-discussion",
		"get-discussion-legacy":            "Get a single discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#get-a-single-discussion-legacy",
		"get-legacy":                       "Get team (Legacy) - https://developer.github.com/v3/teams/#get-team-legacy",
		"get-member-legacy":                "Get team member (Legacy) - https://developer.github.com/v3/teams/members/#get-team-member-legacy",
		"get-membership-in-org":            "Get team membership - https://developer.github.com/v3/teams/members/#get-team-membership",
		"get-membership-legacy":            "Get team membership (Legacy) - https://developer.github.com/v3/teams/members/#get-team-membership-legacy",
		"list":                             "List teams - https://developer.github.com/v3/teams/#list-teams",
		"list-child-in-org":                "List child teams - https://developer.github.com/v3/teams/#list-child-teams",
		"list-child-legacy":                "List child teams (Legacy) - https://developer.github.com/v3/teams/#list-child-teams-legacy",
		"list-discussion-comments-in-org":  "List comments - https://developer.github.com/v3/teams/discussion_comments/#list-comments",
		"list-discussion-comments-legacy":  "List comments (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#list-comments-legacy",
		"list-discussions-in-org":          "List discussions - https://developer.github.com/v3/teams/discussions/#list-discussions",
		"list-discussions-legacy":          "List discussions (Legacy) - https://developer.github.com/v3/teams/discussions/#list-discussions-legacy",
		"list-for-authenticated-user":      "List user teams - https://developer.github.com/v3/teams/#list-user-teams",
		"list-id-p-groups-for-legacy":      "List IdP groups for a team (Legacy) - https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team-legacy",
		"list-id-p-groups-for-org":         "List IdP groups in an organization - https://developer.github.com/v3/teams/team_sync/#list-idp-groups-in-an-organization",
		"list-id-p-groups-in-org":          "List IdP groups for a team - https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team",
		"list-members-in-org":              "List team members - https://developer.github.com/v3/teams/members/#list-team-members",
		"list-members-legacy":              "List team members (Legacy) - https://developer.github.com/v3/teams/members/#list-team-members-legacy",
		"list-pending-invitations-in-org":  "List pending team invitations - https://developer.github.com/v3/teams/members/#list-pending-team-invitations",
		"list-pending-invitations-legacy":  "List pending team invitations (Legacy) - https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy",
		"list-projects-in-org":             "List team projects - https://developer.github.com/v3/teams/#list-team-projects",
		"list-projects-legacy":             "List team projects (Legacy) - https://developer.github.com/v3/teams/#list-team-projects-legacy",
		"list-repos-in-org":                "List team repos - https://developer.github.com/v3/teams/#list-team-repos",
		"list-repos-legacy":                "List team repos (Legacy) - https://developer.github.com/v3/teams/#list-team-repos-legacy",
		"remove-member-legacy":             "Remove team member (Legacy) - https://developer.github.com/v3/teams/members/#remove-team-member-legacy",
		"remove-membership-in-org":         "Remove team membership - https://developer.github.com/v3/teams/members/#remove-team-membership",
		"remove-membership-legacy":         "Remove team membership (Legacy) - https://developer.github.com/v3/teams/members/#remove-team-membership-legacy",
		"remove-project-in-org":            "Remove team project - https://developer.github.com/v3/teams/#remove-team-project",
		"remove-project-legacy":            "Remove team project (Legacy) - https://developer.github.com/v3/teams/#remove-team-project-legacy",
		"remove-repo-in-org":               "Remove team repository - https://developer.github.com/v3/teams/#remove-team-repository",
		"remove-repo-legacy":               "Remove team repository (Legacy) - https://developer.github.com/v3/teams/#remove-team-repository-legacy",
		"review-project-in-org":            "Review a team project - https://developer.github.com/v3/teams/#review-a-team-project",
		"review-project-legacy":            "Review a team project (Legacy) - https://developer.github.com/v3/teams/#review-a-team-project-legacy",
		"update-discussion-comment-in-org": "Edit a comment - https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment",
		"update-discussion-comment-legacy": "Edit a comment (Legacy) - https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment-legacy",
		"update-discussion-in-org":         "Edit a discussion - https://developer.github.com/v3/teams/discussions/#edit-a-discussion",
		"update-discussion-legacy":         "Edit a discussion (Legacy) - https://developer.github.com/v3/teams/discussions/#edit-a-discussion-legacy",
		"update-in-org":                    "Edit team - https://developer.github.com/v3/teams/#edit-team",
		"update-legacy":                    "Edit team (Legacy) - https://developer.github.com/v3/teams/#edit-team-legacy",
	},
	"users": {
		"add-emails":                            "Add email address(es) - https://developer.github.com/v3/users/emails/#add-email-addresses",
		"block":                                 "Block a user - https://developer.github.com/v3/users/blocking/#block-a-user",
		"check-blocked":                         "Check whether you've blocked a user - https://developer.github.com/v3/users/blocking/#check-whether-youve-blocked-a-user",
		"check-following":                       "Check if you are following a user - https://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user",
		"check-following-for-user":              "Check if one user follows another - https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another",
		"create-gpg-key":                        "Create a GPG key - https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key",
		"create-public-key":                     "Create a public key - https://developer.github.com/v3/users/keys/#create-a-public-key",
		"delete-emails":                         "Delete email address(es) - https://developer.github.com/v3/users/emails/#delete-email-addresses",
		"delete-gpg-key":                        "Delete a GPG key - https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key",
		"delete-public-key":                     "Delete a public key - https://developer.github.com/v3/users/keys/#delete-a-public-key",
		"follow":                                "Follow a user - https://developer.github.com/v3/users/followers/#follow-a-user",
		"get-authenticated":                     "Get the authenticated user - https://developer.github.com/v3/users/#get-the-authenticated-user",
		"get-by-username":                       "Get a single user - https://developer.github.com/v3/users/#get-a-single-user",
		"get-context-for-user":                  "Get contextual information about a user - https://developer.github.com/v3/users/#get-contextual-information-about-a-user",
		"get-gpg-key":                           "Get a single GPG key - https://developer.github.com/v3/users/gpg_keys/#get-a-single-gpg-key",
		"get-public-key":                        "Get a single public key - https://developer.github.com/v3/users/keys/#get-a-single-public-key",
		"list":                                  "Get all users - https://developer.github.com/v3/users/#get-all-users",
		"list-blocked":                          "List blocked users - https://developer.github.com/v3/users/blocking/#list-blocked-users",
		"list-emails":                           "List email addresses for a user - https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user",
		"list-followed-by-authenticated":        "List users followed by the authenticated user - https://developer.github.com/v3/users/followers/#list-users-followed-by-the-authenticated-user",
		"list-followers-for-authenticated-user": "List followers of the authenticated user - https://developer.github.com/v3/users/followers/#list-followers-of-the-authenticated-user",
		"list-followers-for-user":               "List followers of a user - https://developer.github.com/v3/users/followers/#list-followers-of-a-user",
		"list-following-for-user":               "List users followed by another user - https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user",
		"list-gpg-keys":                         "List your GPG keys - https://developer.github.com/v3/users/gpg_keys/#list-your-gpg-keys",
		"list-gpg-keys-for-user":                "List GPG keys for a user - https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user",
		"list-public-emails":                    "List public email addresses for a user - https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-a-user",
		"list-public-keys":                      "List your public keys - https://developer.github.com/v3/users/keys/#list-your-public-keys",
		"list-public-keys-for-user":             "List public keys for a user - https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user",
		"toggle-primary-email-visibility":       "Toggle primary email visibility - https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility",
		"unblock":                               "Unblock a user - https://developer.github.com/v3/users/blocking/#unblock-a-user",
		"unfollow":                              "Unfollow a user - https://developer.github.com/v3/users/followers/#unfollow-a-user",
		"update-authenticated":                  "Update the authenticated user - https://developer.github.com/v3/users/#update-the-authenticated-user",
	},
}

var FlagHelps = map[string]map[string]map[string]string{
	"actions": {
		"cancel-workflow-run": {
			"owner":  "owner parameter",
			"repo":   "repo parameter",
			"run_id": "run_id parameter",
		},
		"create-or-update-secret-for-repo": {
			"encrypted_value": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get your public key](https://developer.github.com/v3/actions/secrets/#get-your-public-key) endpoint.",
			"key_id":          "ID of the key you used to encrypt the secret.",
			"name":            "name parameter",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"create-registration-token-for-org": {
			"org": "org parameter",
		},
		"create-registration-token-for-repo": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"create-remove-token-for-org": {
			"org": "org parameter",
		},
		"create-remove-token-for-repo": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-artifact": {
			"artifact_id": "artifact_id parameter",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
		},
		"delete-secret-from-repo": {
			"name":  "name parameter",
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-self-hosted-runner-from-org": {
			"org":       "org parameter",
			"runner_id": "runner_id parameter",
		},
		"delete-self-hosted-runner-from-repo": {
			"owner":     "owner parameter",
			"repo":      "repo parameter",
			"runner_id": "runner_id parameter",
		},
		"delete-workflow-run-logs": {
			"owner":  "owner parameter",
			"repo":   "repo parameter",
			"run_id": "run_id parameter",
		},
		"download-artifact": {
			"archive_format": "archive_format parameter",
			"artifact_id":    "artifact_id parameter",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"download-workflow-job-logs": {
			"job_id": "job_id parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"download-workflow-run-logs": {
			"owner":  "owner parameter",
			"repo":   "repo parameter",
			"run_id": "run_id parameter",
		},
		"get-artifact": {
			"artifact_id": "artifact_id parameter",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
		},
		"get-public-key": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-secret": {
			"name":  "name parameter",
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-self-hosted-runner-for-org": {
			"org":       "org parameter",
			"runner_id": "runner_id parameter",
		},
		"get-self-hosted-runner-for-repo": {
			"owner":     "owner parameter",
			"repo":      "repo parameter",
			"runner_id": "runner_id parameter",
		},
		"get-workflow": {
			"owner":       "owner parameter",
			"repo":        "repo parameter",
			"workflow_id": "workflow_id parameter",
		},
		"get-workflow-job": {
			"job_id": "job_id parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-workflow-run": {
			"owner":  "owner parameter",
			"repo":   "repo parameter",
			"run_id": "run_id parameter",
		},
		"list-artifacts-for-repo": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-jobs-for-workflow-run": {
			"filter":   "Filters jobs by their `completed_at` timestamp. Can be one of:  \n\\* `latest`: Returns jobs from the most recent execution of the workflow run.  \n\\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.",
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
			"run_id":   "run_id parameter",
		},
		"list-repo-workflow-runs": {
			"actor":    "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
			"branch":   "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
			"event":    "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)\" in the GitHub Help documentation.",
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
			"status":   "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
		},
		"list-repo-workflows": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-runner-applications-for-org": {
			"org": "org parameter",
		},
		"list-runner-applications-for-repo": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"list-secrets-for-repo": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-self-hosted-runners-for-org": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-self-hosted-runners-for-repo": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-workflow-run-artifacts": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
			"run_id":   "run_id parameter",
		},
		"list-workflow-runs": {
			"actor":       "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
			"branch":      "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
			"event":       "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)\" in the GitHub Help documentation.",
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"repo":        "repo parameter",
			"status":      "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
			"workflow_id": "workflow_id parameter",
		},
		"re-run-workflow": {
			"owner":  "owner parameter",
			"repo":   "repo parameter",
			"run_id": "run_id parameter",
		},
	},
	"activity": {
		"check-repo-is-starred-by-authenticated-user": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"check-watching-repo-legacy": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-repo-subscription": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-thread-subscription": {
			"thread_id": "thread_id parameter",
		},
		"get-feeds": {},
		"get-repo-subscription": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-thread": {
			"thread_id": "thread_id parameter",
		},
		"get-thread-subscription-for-authenticated-user": {
			"thread_id": "thread_id parameter",
		},
		"list-events-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-notifications-for-authenticated-user": {
			"all":           "If `true`, show notifications marked as read.",
			"before":        "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"page":          "Page number of the results to fetch.",
			"participating": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
			"per_page":      "Results per page (max 100)",
			"since":         "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
		},
		"list-org-events-for-authenticated-user": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-public-events": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-events-for-repo-network": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-public-events-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-public-org-events": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-received-events-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-received-public-events-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-repo-events": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-repo-notifications-for-authenticated-user": {
			"all":           "If `true`, show notifications marked as read.",
			"before":        "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"owner":         "owner parameter",
			"page":          "Page number of the results to fetch.",
			"participating": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
			"per_page":      "Results per page (max 100)",
			"repo":          "repo parameter",
			"since":         "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
		},
		"list-repos-starred-by-authenticated-user": {
			"direction": "One of `asc` (ascending) or `desc` (descending).",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"sort":      "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
		},
		"list-repos-starred-by-user": {
			"direction": "One of `asc` (ascending) or `desc` (descending).",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"sort":      "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
			"username":  "username parameter",
		},
		"list-repos-watched-by-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-stargazers-for-repo": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-watched-repos-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-watchers-for-repo": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"mark-notifications-as-read": {
			"last_read_at": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
		},
		"mark-repo-notifications-as-read": {
			"last_read_at": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"mark-thread-as-read": {
			"thread_id": "thread_id parameter",
		},
		"set-repo-subscription": {
			"ignored":    "Determines if all notifications should be blocked from this repository.",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
			"subscribed": "Determines if notifications should be received from this repository.",
		},
		"set-thread-subscription": {
			"ignored":   "Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to block all notifications from this thread.",
			"thread_id": "thread_id parameter",
		},
		"star-repo-for-authenticated-user": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"stop-watching-repo-legacy": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"unstar-repo-for-authenticated-user": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"watch-repo-legacy": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
	},
	"apps": {
		"add-repo-to-installation": {
			"installation_id":     "installation_id parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"repository_id":       "repository_id parameter",
		},
		"check-authorization": {
			"access_token": "access_token parameter",
			"client_id":    "client_id parameter",
		},
		"check-token": {
			"access_token": "The OAuth access token used to authenticate to the GitHub API.",
			"client_id":    "client_id parameter",
		},
		"create-content-attachment": {
			"body":                 "The body text of the content attachment displayed in the body or comment of an issue or pull request. This parameter supports markdown.",
			"content_reference_id": "content_reference_id parameter",
			"corsair-preview":      "To access the Content Attachments API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.corsair-preview+json\n```",
			"title":                "The title of the content attachment displayed in the body or comment of an issue or pull request.",
		},
		"create-from-manifest": {
			"code": "code parameter",
		},
		"create-installation-token": {
			"installation_id":     "installation_id parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"repository_ids":      "The `id`s of the repositories that the installation token can access. Providing repository `id`s restricts the access of an installation token to specific repositories. You can use the \"[List repositories](https://developer.github.com/v3/apps/installations/#list-repositories)\" endpoint to get the `id` of all repositories that an installation can access. For example, you can select specific repositories when creating an installation token to restrict the number of repositories that can be cloned using the token.",
		},
		"delete-authorization": {
			"access_token": "The OAuth access token used to authenticate to the GitHub API.",
			"client_id":    "client_id parameter",
		},
		"delete-installation": {
			"installation_id":     "installation_id parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
		},
		"delete-token": {
			"access_token": "The OAuth access token used to authenticate to the GitHub API.",
			"client_id":    "client_id parameter",
		},
		"get-authenticated": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
		},
		"get-by-slug": {
			"app_slug":            "app_slug parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
		},
		"get-installation": {
			"installation_id":     "installation_id parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
		},
		"get-org-installation": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"org":                 "org parameter",
		},
		"get-repo-installation": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"owner":               "owner parameter",
			"repo":                "repo parameter",
		},
		"get-subscription-plan-for-account": {
			"account_id": "account_id parameter",
		},
		"get-subscription-plan-for-account-stubbed": {
			"account_id": "account_id parameter",
		},
		"get-user-installation": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"username":            "username parameter",
		},
		"list-accounts-for-plan": {
			"direction": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"plan_id":   "plan_id parameter",
			"sort":      "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
		},
		"list-accounts-for-plan-stubbed": {
			"direction": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"plan_id":   "plan_id parameter",
			"sort":      "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
		},
		"list-installation-repos-for-authenticated-user": {
			"installation_id":     "installation_id parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"mercy-preview":       "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-installations": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-installations-for-authenticated-user": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-plans": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-plans-stubbed": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-repos": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"mercy-preview":       "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-subscriptions-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-subscriptions-for-authenticated-user-stubbed": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"remove-repo-from-installation": {
			"installation_id":     "installation_id parameter",
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"repository_id":       "repository_id parameter",
		},
		"reset-authorization": {
			"access_token": "access_token parameter",
			"client_id":    "client_id parameter",
		},
		"reset-token": {
			"access_token": "The OAuth access token used to authenticate to the GitHub API.",
			"client_id":    "client_id parameter",
		},
		"revoke-authorization-for-application": {
			"access_token": "access_token parameter",
			"client_id":    "client_id parameter",
		},
		"revoke-grant-for-application": {
			"access_token": "access_token parameter",
			"client_id":    "client_id parameter",
		},
		"revoke-installation-token": {},
		"suspend-installation": {
			"installation_id": "installation_id parameter",
		},
		"unsuspend-installation": {
			"installation_id": "installation_id parameter",
		},
	},
	"checks": {
		"create": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"completed_at":    "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"conclusion":      "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
			"details_url":     "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
			"external_id":     "A reference for the run on the integrator's system.",
			"head_sha":        "The SHA of the commit.",
			"name":            "The name of the check. For example, \"code-coverage\".",
			"output.summary":  "The summary of the check run. This parameter supports Markdown.",
			"output.text":     "The details of the check run. This parameter supports Markdown.",
			"output.title":    "The title of the check run.",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
			"started_at":      "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"status":          "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
		},
		"create-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"head_sha":        "The sha of the head commit.",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"get": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_run_id":    "check_run_id parameter",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"get-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_suite_id":  "check_suite_id parameter",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"list-annotations": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_run_id":    "check_run_id parameter",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repo parameter",
		},
		"list-for-ref": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_name":      "Returns check runs with the specified `name`.",
			"filter":          "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"ref":             "ref parameter",
			"repo":            "repo parameter",
			"status":          "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
		},
		"list-for-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_name":      "Returns check runs with the specified `name`.",
			"check_suite_id":  "check_suite_id parameter",
			"filter":          "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repo parameter",
			"status":          "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
		},
		"list-suites-for-ref": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"app_id":          "Filters check suites by GitHub App `id`.",
			"check_name":      "Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/).",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"ref":             "ref parameter",
			"repo":            "repo parameter",
		},
		"rerequest-suite": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_suite_id":  "check_suite_id parameter",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"set-suites-preferences": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"update": {
			"antiope-preview": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```",
			"check_run_id":    "check_run_id parameter",
			"completed_at":    "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"conclusion":      "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, or `action_required`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
			"details_url":     "The URL of the integrator's site that has the full details of the check.",
			"external_id":     "A reference for the run on the integrator's system.",
			"name":            "The name of the check. For example, \"code-coverage\".",
			"output.summary":  "Can contain Markdown.",
			"output.text":     "Can contain Markdown.",
			"output.title":    "**Required**.",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
			"started_at":      "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"status":          "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
		},
	},
	"code-scanning": {
		"get-alert": {
			"alert_id": "alert_id parameter",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"list-alerts-for-repo": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
			"state": "Set to `closed` to list only closed code scanning alerts.",
		},
	},
	"codes-of-conduct": {
		"get-all-codes-of-conduct": {
			"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
		},
		"get-conduct-code": {
			"key":                   "key parameter",
			"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
		},
		"get-for-repo": {
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"scarlet-witch-preview": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
		},
	},
	"emojis": {
		"get": {},
	},
	"gists": {
		"check-is-starred": {
			"gist_id": "gist_id parameter",
		},
		"create": {
			"description":   "A descriptive name for this gist.",
			"files.content": "The content of the file.",
			"public":        "When `true`, the gist will be public and available for anyone to see.",
		},
		"create-comment": {
			"body":    "The comment text.",
			"gist_id": "gist_id parameter",
		},
		"delete": {
			"gist_id": "gist_id parameter",
		},
		"delete-comment": {
			"comment_id": "comment_id parameter",
			"gist_id":    "gist_id parameter",
		},
		"fork": {
			"gist_id": "gist_id parameter",
		},
		"get": {
			"gist_id": "gist_id parameter",
		},
		"get-comment": {
			"comment_id": "comment_id parameter",
			"gist_id":    "gist_id parameter",
		},
		"get-revision": {
			"gist_id": "gist_id parameter",
			"sha":     "sha parameter",
		},
		"list": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"list-comments": {
			"gist_id":  "gist_id parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-commits": {
			"gist_id":  "gist_id parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
			"username": "username parameter",
		},
		"list-forks": {
			"gist_id":  "gist_id parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"list-starred": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"since":    "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
		},
		"star": {
			"gist_id": "gist_id parameter",
		},
		"unstar": {
			"gist_id": "gist_id parameter",
		},
		"update": {
			"description":    "A descriptive name for this gist.",
			"files.content":  "The updated content of the file.",
			"files.filename": "The new name for this file. To delete a file, set the value of the filename to `null`.",
			"gist_id":        "gist_id parameter",
		},
		"update-comment": {
			"body":       "The comment text.",
			"comment_id": "comment_id parameter",
			"gist_id":    "gist_id parameter",
		},
	},
	"git": {
		"create-blob": {
			"content":  "The new blob's content.",
			"encoding": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"create-commit": {
			"author.date":     "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"author.email":    "The email of the author (or committer) of the commit",
			"author.name":     "The name of the author (or committer) of the commit",
			"committer.date":  "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"committer.email": "The email of the author (or committer) of the commit",
			"committer.name":  "The name of the author (or committer) of the commit",
			"message":         "The commit message",
			"owner":           "owner parameter",
			"parents":         "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
			"repo":            "repo parameter",
			"signature":       "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
			"tree":            "The SHA of the tree object this commit points to",
		},
		"create-ref": {
			"owner": "owner parameter",
			"ref":   "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
			"repo":  "repo parameter",
			"sha":   "The SHA1 value for this reference.",
		},
		"create-tag": {
			"message":      "The tag message.",
			"object":       "The SHA of the git object this is tagging.",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
			"tag":          "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
			"tagger.date":  "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"tagger.email": "The email of the author of the tag",
			"tagger.name":  "The name of the author of the tag",
			"type":         "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
		},
		"delete-ref": {
			"owner": "owner parameter",
			"ref":   "ref parameter",
			"repo":  "repo parameter",
		},
		"get-blob": {
			"file_sha": "file_sha parameter",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"get-commit": {
			"commit_sha": "commit_sha parameter",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"get-ref": {
			"owner": "owner parameter",
			"ref":   "ref parameter",
			"repo":  "repo parameter",
		},
		"get-tag": {
			"owner":   "owner parameter",
			"repo":    "repo parameter",
			"tag_sha": "tag_sha parameter",
		},
		"get-tree": {
			"owner":     "owner parameter",
			"recursive": "recursive parameter",
			"repo":      "repo parameter",
			"tree_sha":  "tree_sha parameter",
		},
		"list-matching-refs": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"ref":      "ref parameter",
			"repo":     "repo parameter",
		},
		"update-ref": {
			"force": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
			"owner": "owner parameter",
			"ref":   "ref parameter",
			"repo":  "repo parameter",
			"sha":   "The SHA1 value to set this reference to",
		},
	},
	"gitignore": {
		"get-template": {
			"name": "name parameter",
		},
		"list-templates": {},
	},
	"interactions": {
		"add-or-update-restrictions-for-org": {
			"limit":          "Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
			"org":            "org parameter",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
		},
		"add-or-update-restrictions-for-repo": {
			"limit":          "Specifies the group of GitHub users who can comment, open issues, or create pull requests for the given repository. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
		},
		"get-restrictions-for-org": {
			"org":            "org parameter",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
		},
		"get-restrictions-for-repo": {
			"owner":          "owner parameter",
			"repo":           "repo parameter",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
		},
		"remove-restrictions-for-org": {
			"org":            "org parameter",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
		},
		"remove-restrictions-for-repo": {
			"owner":          "owner parameter",
			"repo":           "repo parameter",
			"sombra-preview": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```",
		},
	},
	"issues": {
		"add-assignees": {
			"assignees":    "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
			"issue_number": "issue_number parameter",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"add-labels": {
			"issue_number": "issue_number parameter",
			"labels":       "The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"check-assignee": {
			"assignee": "assignee parameter",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"create": {
			"assignee":  "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
			"assignees": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
			"body":      "The contents of the issue.",
			"labels":    "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
			"milestone": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._",
			"owner":     "owner parameter",
			"repo":      "repo parameter",
			"title":     "The title of the issue.",
		},
		"create-comment": {
			"body":         "The contents of the comment.",
			"issue_number": "issue_number parameter",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"create-label": {
			"color":       "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
			"description": "A short description of the label.",
			"name":        "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
		},
		"create-milestone": {
			"description": "A description of the milestone.",
			"due_on":      "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
			"state":       "The state of the milestone. Either `open` or `closed`.",
			"title":       "The title of the milestone.",
		},
		"delete-comment": {
			"comment_id": "comment_id parameter",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"delete-label": {
			"name":  "name parameter",
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-milestone": {
			"milestone_number": "milestone_number parameter",
			"owner":            "owner parameter",
			"repo":             "repo parameter",
		},
		"get": {
			"issue_number":          "issue_number parameter",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "An additional `reactions` object in the issue payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"get-comment": {
			"comment_id":            "comment_id parameter",
			"machine-man-preview":   "If an issue comment is created via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"get-event": {
			"event_id":            "event_id parameter",
			"machine-man-preview": "If an issue event is created via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"owner":               "owner parameter",
			"repo":                "repo parameter",
			"sailor-v-preview":    "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
			"starfox-preview":     "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
		},
		"get-label": {
			"name":  "name parameter",
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-milestone": {
			"milestone_number": "milestone_number parameter",
			"owner":            "owner parameter",
			"repo":             "repo parameter",
		},
		"list": {
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"filter":                "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "If an issue is opened via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-assignees": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-comments": {
			"issue_number":          "issue_number parameter",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"since":                 "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"list-comments-for-repo": {
			"direction":             "Either `asc` or `desc`. Ignored without the `sort` parameter.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"since":                 "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "Either `created` or `updated`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"list-events": {
			"issue_number":     "issue_number parameter",
			"owner":            "owner parameter",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repo parameter",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
			"starfox-preview":  "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
		},
		"list-events-for-repo": {
			"owner":            "owner parameter",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repo parameter",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
			"starfox-preview":  "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
		},
		"list-events-for-timeline": {
			"issue_number":        "issue_number parameter",
			"mockingbird-preview": "The API to get issue timeline events is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details. To access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mockingbird-preview\n```",
			"owner":               "owner parameter",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
			"repo":                "repo parameter",
			"starfox-preview":     "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```",
		},
		"list-for-authenticated-user": {
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"filter":                "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "If an issue is opened via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-org": {
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"filter":                "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "If an issue is opened via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"org":                   "org parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-repo": {
			"assignee":              "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
			"creator":               "The user that created the issue.",
			"direction":             "The direction of the sort. Can be either `asc` or `desc`.",
			"labels":                "A list of comma separated label names. Example: `bug,ui,@high`",
			"machine-man-preview":   "If an issue is opened via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"mentioned":             "A user that's mentioned in the issue.",
			"milestone":             "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"since":                 "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"sort":                  "What to sort results by. Can be either `created`, `updated`, `comments`.",
			"squirrel-girl-preview": "An additional `reactions` object in the issue payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
			"state":                 "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-labels-for-milestone": {
			"milestone_number": "milestone_number parameter",
			"owner":            "owner parameter",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repo parameter",
		},
		"list-labels-for-repo": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-labels-on-issue": {
			"issue_number": "issue_number parameter",
			"owner":        "owner parameter",
			"page":         "Page number of the results to fetch.",
			"per_page":     "Results per page (max 100)",
			"repo":         "repo parameter",
		},
		"list-milestones-for-repo": {
			"direction": "The direction of the sort. Either `asc` or `desc`.",
			"owner":     "owner parameter",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"repo":      "repo parameter",
			"sort":      "What to sort results by. Either `due_on` or `completeness`.",
			"state":     "The state of the milestone. Either `open`, `closed`, or `all`.",
		},
		"lock": {
			"issue_number":     "issue_number parameter",
			"lock_reason":      "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
			"owner":            "owner parameter",
			"repo":             "repo parameter",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
		},
		"remove-all-labels": {
			"issue_number": "issue_number parameter",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"remove-assignees": {
			"assignees":    "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
			"issue_number": "issue_number parameter",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"remove-label": {
			"issue_number": "issue_number parameter",
			"name":         "name parameter",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"replace-all-labels": {
			"issue_number": "issue_number parameter",
			"labels":       "The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"unlock": {
			"issue_number": "issue_number parameter",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"update": {
			"assignee":     "Login for the user that this issue should be assigned to. **This field is deprecated.**",
			"assignees":    "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
			"body":         "The contents of the issue.",
			"issue_number": "issue_number parameter",
			"labels":       "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
			"milestone":    "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
			"state":        "State of the issue. Either `open` or `closed`.",
			"title":        "The title of the issue.",
		},
		"update-comment": {
			"body":       "The contents of the comment.",
			"comment_id": "comment_id parameter",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"update-label": {
			"color":       "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
			"description": "A short description of the label.",
			"name":        "name parameter",
			"new_name":    "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
		},
		"update-milestone": {
			"description":      "A description of the milestone.",
			"due_on":           "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"milestone_number": "milestone_number parameter",
			"owner":            "owner parameter",
			"repo":             "repo parameter",
			"state":            "The state of the milestone. Either `open` or `closed`.",
			"title":            "The title of the milestone.",
		},
	},
	"licenses": {
		"get": {
			"license": "license parameter",
		},
		"get-for-repo": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"list-commonly-used": {},
	},
	"markdown": {
		"render": {
			"context": "The repository context to use when creating references in `gfm` mode. Omit this parameter when using `markdown` mode.",
			"mode":    "The rendering mode. Can be either:  \n\\* `markdown` to render a document in plain Markdown, just like README.md files are rendered.  \n\\* `gfm` to render a document in [GitHub Flavored Markdown](https://github.github.com/gfm/), which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests.",
			"text":    "The Markdown text to render in HTML. Markdown content must be 400 KB or less.",
		},
	},
	"meta": {
		"get": {},
	},
	"migrations": {
		"cancel-import": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-archive-for-authenticated-user": {
			"migration_id":      "migration_id parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"delete-archive-for-org": {
			"migration_id":      "migration_id parameter",
			"org":               "org parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"download-archive-for-org": {
			"migration_id":      "migration_id parameter",
			"org":               "org parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"get-archive-for-authenticated-user": {
			"migration_id":      "migration_id parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"get-commit-authors": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
			"since": "Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.",
		},
		"get-import-progress": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-large-files": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-status-for-authenticated-user": {
			"migration_id":      "migration_id parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"get-status-for-org": {
			"migration_id":      "migration_id parameter",
			"org":               "org parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"list-for-authenticated-user": {
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"list-for-org": {
			"org":               "org parameter",
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"list-repos-for-org": {
			"migration_id":      "migration_id parameter",
			"org":               "org parameter",
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"list-repos-for-user": {
			"migration_id":      "migration_id parameter",
			"page":              "Page number of the results to fetch.",
			"per_page":          "Results per page (max 100)",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"map-commit-author": {
			"author_id": "author_id parameter",
			"email":     "The new Git author email.",
			"name":      "The new Git author name.",
			"owner":     "owner parameter",
			"repo":      "repo parameter",
		},
		"set-lfs-preference": {
			"owner":   "owner parameter",
			"repo":    "repo parameter",
			"use_lfs": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).",
		},
		"start-for-authenticated-user": {
			"exclude_attachments": "Does not include attachments uploaded to GitHub.com in the migration data when set to `true`. Excluding attachments will reduce the migration archive file size.",
			"lock_repositories":   "Locks the `repositories` to prevent changes during the migration when set to `true`.",
			"repositories":        "An array of repositories to include in the migration.",
		},
		"start-for-org": {
			"exclude_attachments": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
			"lock_repositories":   "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
			"org":                 "org parameter",
			"repositories":        "A list of arrays indicating which repositories should be migrated.",
		},
		"start-import": {
			"owner":        "owner parameter",
			"repo":         "repo parameter",
			"tfvc_project": "For a tfvc import, the name of the project that is being imported.",
			"vcs":          "The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
			"vcs_password": "If authentication is required, the password to provide to `vcs_url`.",
			"vcs_url":      "The URL of the originating repository.",
			"vcs_username": "If authentication is required, the username to provide to `vcs_url`.",
		},
		"unlock-repo-for-authenticated-user": {
			"migration_id":      "migration_id parameter",
			"repo_name":         "repo_name parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"unlock-repo-for-org": {
			"migration_id":      "migration_id parameter",
			"org":               "org parameter",
			"repo_name":         "repo_name parameter",
			"wyandotte-preview": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```",
		},
		"update-import": {
			"owner":        "owner parameter",
			"repo":         "repo parameter",
			"vcs_password": "The password to provide to the originating repository.",
			"vcs_username": "The username to provide to the originating repository.",
		},
	},
	"oauth-authorizations": {
		"create-authorization": {
			"client_id":     "The 20 character OAuth app client key for which to create the token.",
			"client_secret": "The 40 character OAuth app client secret for which to create the token.",
			"fingerprint":   "A unique string to distinguish an authorization from others created for the same client ID and user.",
			"note":          "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"scopes":        "A list of scopes that this authorization is in.",
		},
		"delete-authorization": {
			"authorization_id": "authorization_id parameter",
		},
		"delete-grant": {
			"grant_id": "grant_id parameter",
		},
		"get-authorization": {
			"authorization_id": "authorization_id parameter",
		},
		"get-grant": {
			"grant_id": "grant_id parameter",
		},
		"get-or-create-authorization-for-app": {
			"client_id":     "client_id parameter",
			"client_secret": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
			"fingerprint":   "A unique string to distinguish an authorization from others created for the same client and user. If provided, this API is functionally equivalent to [Get-or-create an authorization for a specific app and fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint).",
			"note":          "A note to remind you what the OAuth token is for.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"scopes":        "A list of scopes that this authorization is in.",
		},
		"get-or-create-authorization-for-app-and-fingerprint": {
			"client_id":     "client_id parameter",
			"client_secret": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
			"fingerprint":   "fingerprint parameter",
			"note":          "A note to remind you what the OAuth token is for.",
			"note_url":      "A URL to remind you what app the OAuth token is for.",
			"scopes":        "A list of scopes that this authorization is in.",
		},
		"list-authorizations": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-grants": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"update-authorization": {
			"add_scopes":       "A list of scopes to add to this authorization.",
			"authorization_id": "authorization_id parameter",
			"fingerprint":      "A unique string to distinguish an authorization from others created for the same client ID and user.",
			"note":             "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
			"note_url":         "A URL to remind you what app the OAuth token is for.",
			"remove_scopes":    "A list of scopes to remove from this authorization.",
			"scopes":           "Replaces the authorization scopes with these.",
		},
	},
	"orgs": {
		"add-or-update-membership": {
			"org":      "org parameter",
			"role":     "The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.",
			"username": "username parameter",
		},
		"block-user": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"check-blocked-user": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"check-membership": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"check-public-membership": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"conceal-membership": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"convert-member-to-outside-collaborator": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"create-hook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
			"name":                "Must be passed as \"web\".",
			"org":                 "org parameter",
		},
		"create-invitation": {
			"email":      "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
			"invitee_id": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
			"org":        "org parameter",
			"role":       "Specify role for new member. Can be one of:  \n\\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.",
			"team_ids":   "Specify IDs for the teams you want to invite new members to.",
		},
		"delete-hook": {
			"hook_id": "hook_id parameter",
			"org":     "org parameter",
		},
		"get": {
			"org":            "org parameter",
			"surtur-preview": "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.surtur-preview+json\n```",
		},
		"get-hook": {
			"hook_id": "hook_id parameter",
			"org":     "org parameter",
		},
		"get-membership": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"get-membership-for-authenticated-user": {
			"org": "org parameter",
		},
		"list": {
			"since": "The integer ID of the last organization that you've seen.",
		},
		"list-blocked-users": {
			"org": "org parameter",
		},
		"list-credential-authorizations": {
			"org": "org parameter",
		},
		"list-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-hooks": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-installations": {
			"machine-man-preview": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```",
			"org":                 "org parameter",
			"page":                "Page number of the results to fetch.",
			"per_page":            "Results per page (max 100)",
		},
		"list-invitation-teams": {
			"invitation_id": "invitation_id parameter",
			"org":           "org parameter",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
		},
		"list-members": {
			"filter":   "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` - All members the authenticated user can see.",
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"role":     "Filter members returned by their role. Can be one of:  \n\\* `all` - All members of the organization, regardless of role.  \n\\* `admin` - Organization owners.  \n\\* `member` - Non-owner organization members.",
		},
		"list-memberships": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"state":    "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
		},
		"list-outside-collaborators": {
			"filter":   "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-pending-invitations": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-members": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"ping-hook": {
			"hook_id": "hook_id parameter",
			"org":     "org parameter",
		},
		"publicize-membership": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"remove-credential-authorization": {
			"credential_id": "credential_id parameter",
			"org":           "org parameter",
		},
		"remove-member": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"remove-membership": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"remove-outside-collaborator": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"unblock-user": {
			"org":      "org parameter",
			"username": "username parameter",
		},
		"update": {
			"billing_email":                 "Billing email address. This address is not publicized.",
			"company":                       "The company name.",
			"default_repository_permission": "Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.",
			"description":                   "The description of the company.",
			"email":                         "The publicly visible email address.",
			"has_organization_projects":     "Toggles whether an organization can use organization projects.",
			"has_repository_projects":       "Toggles whether repositories that belong to the organization can use repository projects.",
			"location":                      "The location.",
			"members_allowed_repository_creation_type": "Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  \n\\* `none` - only admin members can create repositories.  \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.",
			"members_can_create_internal_repositories": "Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  \n\\* `true` - all organization members can create internal repositories.  \n\\* `false` - only organization owners can create internal repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
			"members_can_create_private_repositories":  "Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  \n\\* `true` - all organization members can create private repositories.  \n\\* `false` - only organization owners can create private repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
			"members_can_create_public_repositories":   "Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  \n\\* `true` - all organization members can create public repositories.  \n\\* `false` - only organization owners can create public repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
			"members_can_create_repositories":          "Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only organization owners can create repositories.  \nDefault: `true`  \n**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
			"name":                                     "The shorthand name of the company.",
			"org":                                      "org parameter",
			"surtur-preview":                           "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.surtur-preview+json\n```",
		},
		"update-hook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
			"hook_id":             "hook_id parameter",
			"org":                 "org parameter",
		},
		"update-membership": {
			"org":   "org parameter",
			"state": "The state that the membership should be in. Only `\"active\"` will be accepted.",
		},
	},
	"projects": {
		"add-collaborator": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"permission":      "The permission to grant the collaborator. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\" Can be one of:  \n\\* `read` - can read, but not write to or administer this project.  \n\\* `write` - can read and write, but not administer this project.  \n\\* `admin` - can read, write and administer this project.",
			"project_id":      "project_id parameter",
			"username":        "username parameter",
		},
		"create-card": {
			"column_id":       "column_id parameter",
			"content_id":      "The issue or pull request id you want to associate with this card. You can use the [List repository issues](https://developer.github.com/v3/issues/#list-repository-issues) and [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoints to find this id.  \n**Note:** Depending on whether you use the issue id or pull request id, you will need to specify `Issue` or `PullRequest` as the `content_type`.",
			"content_type":    "**Required if you provide\u00a0`content_id`**. The type of content you want to associate with this card. Use `Issue` when `content_id` is an issue id and use `PullRequest` when `content_id` is a pull request id.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"note":            "The card's note content. Only valid for cards without another type of content, so you must omit when\u00a0specifying `content_id`\u00a0and\u00a0`content_type`.",
		},
		"create-column": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"name":            "The name of the column.",
			"project_id":      "project_id parameter",
		},
		"create-for-authenticated-user": {
			"body":            "The description of the project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"name":            "The name of the project.",
		},
		"create-for-org": {
			"body":            "The description of the project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"name":            "The name of the project.",
			"org":             "org parameter",
		},
		"create-for-repo": {
			"body":            "The description of the project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"name":            "The name of the project.",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
		},
		"delete": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"project_id":      "project_id parameter",
		},
		"delete-card": {
			"card_id":         "card_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
		},
		"delete-column": {
			"column_id":       "column_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
		},
		"get": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"project_id":      "project_id parameter",
		},
		"get-card": {
			"card_id":         "card_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
		},
		"get-column": {
			"column_id":       "column_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
		},
		"list-cards": {
			"archived_state":  "Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.",
			"column_id":       "column_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
		},
		"list-collaborators": {
			"affiliation":     "Filters the collaborators by their affiliation. Can be one of:  \n\\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  \n\\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"project_id":      "project_id parameter",
		},
		"list-columns": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"project_id":      "project_id parameter",
		},
		"list-for-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"org":             "org parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"state":           "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-repo": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repo parameter",
			"state":           "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
		},
		"list-for-user": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"state":           "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
			"username":        "username parameter",
		},
		"move-card": {
			"card_id":         "card_id parameter",
			"column_id":       "The `id` value of a column in the same project.",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"position":        "Can be one of `top`, `bottom`, or `after:<card_id>`, where `<card_id>` is the `id` value of a card in the same column, or in the new column specified by `column_id`.",
		},
		"move-column": {
			"column_id":       "column_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"position":        "Can be one of `first`, `last`, or `after:<column_id>`, where `<column_id>` is the `id` value of a column in the same project.",
		},
		"remove-collaborator": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"project_id":      "project_id parameter",
			"username":        "username parameter",
		},
		"review-user-permission-level": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"project_id":      "project_id parameter",
			"username":        "username parameter",
		},
		"update": {
			"body":                    "The description of the project.",
			"inertia-preview":         "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"name":                    "The name of the project.",
			"organization_permission": "The permission level that determines whether all members of the project's organization can see and/or make changes to the project. Setting `organization_permission` is only available for organization projects. If an organization member belongs to a team with a higher level of access or is a collaborator with a higher level of access, their permission level is not lowered by `organization_permission`. For information on changing access for a team or collaborator, see [Add or update team project](https://developer.github.com/v3/teams/#add-or-update-team-project) or [Add user as a collaborator](https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator).  \n  \n**Note:** Updating a project's `organization_permission` requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `read` - Organization members can read, but not write to or administer this project.  \n\\* `write` - Organization members can read and write, but not administer this project.  \n\\* `admin` - Organization members can read, write and administer this project.  \n\\* `none` - Organization members can only see this project if it is public.",
			"private":                 "Sets the visibility of a project board. Setting `private` is only available for organization and user projects. **Note:** Updating a project's visibility requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `false` - Anyone can see the project.  \n\\* `true` - Only the user can view a project board created on a user account. Organization members with the appropriate `organization_permission` can see project boards in an organization account.",
			"project_id":              "project_id parameter",
			"state":                   "State of the project. Either `open` or `closed`.",
		},
		"update-card": {
			"archived":        "Use `true` to archive a project card. Specify `false` if you need to restore a previously archived project card.",
			"card_id":         "card_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"note":            "The card's note content. Only valid for cards without another type of content, so this cannot be specified if the card already has a `content_id` and `content_type`.",
		},
		"update-column": {
			"column_id":       "column_id parameter",
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"name":            "The new name of the column.",
		},
	},
	"pulls": {
		"check-if-merged": {
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"create": {
			"base":                  "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
			"body":                  "The contents of the pull request.",
			"draft":                 "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.",
			"head":                  "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
			"maintainer_can_modify": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"sailor-v-preview":      "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
			"title":                 "The title of the new pull request.",
		},
		"create-comment": {
			"body":                 "The text of the review comment.",
			"comfort-fade-preview": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
			"commit_id":            "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
			"line":                 "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
			"owner":                "owner parameter",
			"path":                 "The relative path to the file that necessitates a comment.",
			"position":             "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
			"pull_number":          "pull_number parameter",
			"repo":                 "repo parameter",
			"side":                 "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
			"start_line":           "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.",
			"start_side":           "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
		},
		"create-review": {
			"body":        "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
			"commit_id":   "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
			"event":       "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review) when you are ready.",
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"create-review-comment-reply": {
			"body":        "The text of the review comment.",
			"comment_id":  "comment_id parameter",
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"create-review-request": {
			"owner":          "owner parameter",
			"pull_number":    "pull_number parameter",
			"repo":           "repo parameter",
			"reviewers":      "An array of user `login`s that will be requested.",
			"team_reviewers": "An array of team `slug`s that will be requested.",
		},
		"delete-comment": {
			"comment_id": "comment_id parameter",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"delete-pending-review": {
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
			"review_id":   "review_id parameter",
		},
		"delete-review-request": {
			"owner":          "owner parameter",
			"pull_number":    "pull_number parameter",
			"repo":           "repo parameter",
			"reviewers":      "An array of user `login`s that will be removed.",
			"team_reviewers": "An array of team `slug`s that will be removed.",
		},
		"dismiss-review": {
			"message":     "The message for the pull request review dismissal",
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
			"review_id":   "review_id parameter",
		},
		"get": {
			"owner":            "owner parameter",
			"pull_number":      "pull_number parameter",
			"repo":             "repo parameter",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
		},
		"get-comment": {
			"comfort-fade-preview":  "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
			"comment_id":            "comment_id parameter",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "An additional `reactions` object in the review comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
		},
		"get-comments-for-review": {
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
			"review_id":   "review_id parameter",
		},
		"get-review": {
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
			"review_id":   "review_id parameter",
		},
		"list": {
			"base":             "Filter pulls by base branch name. Example: `gh-pages`.",
			"direction":        "The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
			"head":             "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
			"owner":            "owner parameter",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"repo":             "repo parameter",
			"sailor-v-preview": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
			"sort":             "What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).",
			"state":            "Either `open`, `closed`, or `all` to filter by state.",
		},
		"list-comments": {
			"comfort-fade-preview":  "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
			"direction":             "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"pull_number":           "pull_number parameter",
			"repo":                  "repo parameter",
			"since":                 "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
			"sort":                  "Can be either `created` or `updated` comments.",
			"squirrel-girl-preview": "An additional `reactions` object in the review comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
		},
		"list-comments-for-repo": {
			"comfort-fade-preview":  "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
			"direction":             "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"since":                 "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
			"sort":                  "Can be either `created` or `updated` comments.",
			"squirrel-girl-preview": "An additional `reactions` object in the review comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
		},
		"list-commits": {
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"list-files": {
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"list-review-requests": {
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"list-reviews": {
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
		},
		"merge": {
			"commit_message": "Extra detail to append to automatic commit message.",
			"commit_title":   "Title for the automatic commit message.",
			"merge_method":   "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
			"owner":          "owner parameter",
			"pull_number":    "pull_number parameter",
			"repo":           "repo parameter",
			"sha":            "SHA that pull request head must match to allow merge.",
		},
		"submit-review": {
			"body":        "The body text of the pull request review",
			"event":       "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
			"review_id":   "review_id parameter",
		},
		"update": {
			"base":                  "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
			"body":                  "The contents of the pull request.",
			"maintainer_can_modify": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
			"owner":                 "owner parameter",
			"pull_number":           "pull_number parameter",
			"repo":                  "repo parameter",
			"sailor-v-preview":      "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```",
			"state":                 "State of this Pull Request. Either `open` or `closed`.",
			"title":                 "The title of the pull request.",
		},
		"update-branch": {
			"expected_head_sha": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits on a repository](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
			"lydian-preview":    "Updating the pull request branch with latest upstream changes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.lydian-preview+json\n```",
			"owner":             "owner parameter",
			"pull_number":       "pull_number parameter",
			"repo":              "repo parameter",
		},
		"update-comment": {
			"body":                 "The text of the reply to the review comment.",
			"comfort-fade-preview": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```",
			"comment_id":           "comment_id parameter",
			"owner":                "owner parameter",
			"repo":                 "repo parameter",
		},
		"update-review": {
			"body":        "The body text of the pull request review.",
			"owner":       "owner parameter",
			"pull_number": "pull_number parameter",
			"repo":        "repo parameter",
			"review_id":   "review_id parameter",
		},
	},
	"rate-limit": {
		"get": {},
	},
	"reactions": {
		"create-for-commit-comment": {
			"comment_id":            "comment_id parameter",
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"create-for-issue": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.",
			"issue_number":          "issue_number parameter",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"create-for-issue-comment": {
			"comment_id":            "comment_id parameter",
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"create-for-pull-request-review-comment": {
			"comment_id":            "comment_id parameter",
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"create-for-team-discussion-comment-in-org": {
			"comment_number":        "comment_number parameter",
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_slug":             "team_slug parameter",
		},
		"create-for-team-discussion-comment-legacy": {
			"comment_number":        "comment_number parameter",
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_id":               "team_id parameter",
		},
		"create-for-team-discussion-in-org": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_slug":             "team_slug parameter",
		},
		"create-for-team-discussion-legacy": {
			"content":               "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_id":               "team_id parameter",
		},
		"delete-for-commit-comment": {
			"comment_id":            "comment_id parameter",
			"owner":                 "owner parameter",
			"reaction_id":           "reaction_id parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"delete-for-issue": {
			"issue_number":          "issue_number parameter",
			"owner":                 "owner parameter",
			"reaction_id":           "reaction_id parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"delete-for-issue-comment": {
			"comment_id":            "comment_id parameter",
			"owner":                 "owner parameter",
			"reaction_id":           "reaction_id parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"delete-for-pull-request-comment": {
			"comment_id":            "comment_id parameter",
			"owner":                 "owner parameter",
			"reaction_id":           "reaction_id parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"delete-for-team-discussion": {
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"reaction_id":           "reaction_id parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_slug":             "team_slug parameter",
		},
		"delete-for-team-discussion-comment": {
			"comment_number":        "comment_number parameter",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"reaction_id":           "reaction_id parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_slug":             "team_slug parameter",
		},
		"delete-legacy": {
			"reaction_id":           "reaction_id parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"list-for-commit-comment": {
			"comment_id":            "comment_id parameter",
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"list-for-issue": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.",
			"issue_number":          "issue_number parameter",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"list-for-issue-comment": {
			"comment_id":            "comment_id parameter",
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"list-for-pull-request-review-comment": {
			"comment_id":            "comment_id parameter",
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
		},
		"list-for-team-discussion-comment-in-org": {
			"comment_number":        "comment_number parameter",
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_slug":             "team_slug parameter",
		},
		"list-for-team-discussion-comment-legacy": {
			"comment_number":        "comment_number parameter",
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
			"discussion_number":     "discussion_number parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_id":               "team_id parameter",
		},
		"list-for-team-discussion-in-org": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_slug":             "team_slug parameter",
		},
		"list-for-team-discussion-legacy": {
			"content":               "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
			"discussion_number":     "discussion_number parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview+json\n```",
			"team_id":               "team_id parameter",
		},
	},
	"repos": {
		"accept-invitation": {
			"invitation_id": "invitation_id parameter",
		},
		"add-collaborator": {
			"owner":      "owner parameter",
			"permission": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.  \n\\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  \n\\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.",
			"repo":       "repo parameter",
			"username":   "username parameter",
		},
		"add-deploy-key": {
			"key":       "The contents of the key.",
			"owner":     "owner parameter",
			"read_only": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/).\"",
			"repo":      "repo parameter",
			"title":     "A name for the key.",
		},
		"add-protected-branch-admin-enforcement": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"add-protected-branch-app-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"add-protected-branch-required-signatures": {
			"branch":        "branch parameter",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
			"zzzax-preview": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```",
		},
		"add-protected-branch-required-status-checks-contexts": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"add-protected-branch-team-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"add-protected-branch-user-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"check-collaborator": {
			"owner":    "owner parameter",
			"repo":     "repo parameter",
			"username": "username parameter",
		},
		"check-vulnerability-alerts": {
			"dorian-preview": "Enabling and disabling vulnerability alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"compare-commits": {
			"base":  "base parameter",
			"head":  "head parameter",
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"create-commit-comment": {
			"body":       "The contents of the comment.",
			"commit_sha": "commit_sha parameter",
			"line":       "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
			"owner":      "owner parameter",
			"path":       "Relative path of the file to comment on.",
			"position":   "Line index in the diff to comment on.",
			"repo":       "repo parameter",
		},
		"create-deployment": {
			"ant-man-preview":        "The `transient_environment` and `production_environment` parameters are currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
			"auto_merge":             "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
			"description":            "Short description of the deployment.",
			"environment":            "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
			"owner":                  "owner parameter",
			"payload":                "JSON payload with extra information about the deployment.",
			"production_environment": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"ref":                    "The ref to deploy. This can be a branch, tag, or SHA.",
			"repo":                   "repo parameter",
			"required_contexts":      "The [status](https://developer.github.com/v3/repos/statuses/) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
			"task":                   "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
			"transient_environment":  "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
		},
		"create-deployment-status": {
			"ant-man-preview": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
			"auto_inactive":   "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  \n**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"deployment_id":   "deployment_id parameter",
			"description":     "A short description of the status. The maximum description length is 140 characters.",
			"environment":     "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
			"environment_url": "Sets the URL for accessing your environment. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"flash-preview":   "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```",
			"log_url":         "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
			"owner":           "owner parameter",
			"repo":            "repo parameter",
			"state":           "The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
			"target_url":      "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
		},
		"create-dispatch-event": {
			"event_type": "**Required:** A custom webhook event name.",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"create-for-authenticated-user": {
			"allow_merge_commit":     "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
			"allow_rebase_merge":     "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
			"allow_squash_merge":     "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
			"auto_init":              "Pass `true` to create an initial commit with empty README.",
			"baptiste-preview":       "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
			"delete_branch_on_merge": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
			"description":            "A short description of the repository.",
			"gitignore_template":     "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
			"has_issues":             "Either `true` to enable issues for this repository or `false` to disable them.",
			"has_projects":           "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
			"has_wiki":               "Either `true` to enable the wiki for this repository or `false` to disable it.",
			"homepage":               "A URL with more information about the repository.",
			"is_template":            "Either `true` to make this repo available as a template repository or `false` to prevent it.",
			"license_template":       "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
			"name":                   "The name of the repository.",
			"nebula-preview":         "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
			"private":                "Either `true` to create a private repository or `false` to create a public one.",
			"team_id":                "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
			"visibility":             "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/github/creating-cloning-and-archiving-repositories/creating-an-internal-repository)\" in the GitHub Help documentation.  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
		},
		"create-fork": {
			"organization": "Optional parameter to specify the organization name if forking into an organization.",
			"owner":        "owner parameter",
			"repo":         "repo parameter",
		},
		"create-hook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
			"name":                "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
			"owner":               "owner parameter",
			"repo":                "repo parameter",
		},
		"create-in-org": {
			"allow_merge_commit":     "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
			"allow_rebase_merge":     "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
			"allow_squash_merge":     "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
			"auto_init":              "Pass `true` to create an initial commit with empty README.",
			"baptiste-preview":       "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
			"delete_branch_on_merge": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
			"description":            "A short description of the repository.",
			"gitignore_template":     "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
			"has_issues":             "Either `true` to enable issues for this repository or `false` to disable them.",
			"has_projects":           "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
			"has_wiki":               "Either `true` to enable the wiki for this repository or `false` to disable it.",
			"homepage":               "A URL with more information about the repository.",
			"is_template":            "Either `true` to make this repo available as a template repository or `false` to prevent it.",
			"license_template":       "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
			"name":                   "The name of the repository.",
			"nebula-preview":         "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
			"org":                    "org parameter",
			"private":                "Either `true` to create a private repository or `false` to create a public one.",
			"team_id":                "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
			"visibility":             "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
		},
		"create-or-update-file": {
			"author.email":    "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
			"author.name":     "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
			"branch":          "The branch name. Default: the repository’s default branch (usually `master`)",
			"committer.email": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
			"committer.name":  "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
			"content":         "The new file content, using Base64 encoding.",
			"message":         "The commit message.",
			"owner":           "owner parameter",
			"path":            "path parameter",
			"repo":            "repo parameter",
			"sha":             "**Required if you are updating a file**. The blob SHA of the file being replaced.",
		},
		"create-release": {
			"body":             "Text describing the contents of the tag.",
			"draft":            "`true` to create a draft (unpublished) release, `false` to create a published one.",
			"name":             "The name of the release.",
			"owner":            "owner parameter",
			"prerelease":       "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
			"repo":             "repo parameter",
			"tag_name":         "The name of the tag.",
			"target_commitish": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
		},
		"create-status": {
			"context":     "A string label to differentiate this status from the status of other systems.",
			"description": "A short description of the status.",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
			"sha":         "sha parameter",
			"state":       "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
			"target_url":  "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
		},
		"create-using-template": {
			"baptiste-preview": "Creating and using repository templates is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
			"description":      "A short description of the new repository.",
			"name":             "The name of the new repository.",
			"owner":            "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
			"private":          "Either `true` to create a new private repository or `false` to create a new public one.",
			"template_owner":   "template_owner parameter",
			"template_repo":    "template_repo parameter",
		},
		"decline-invitation": {
			"invitation_id": "invitation_id parameter",
		},
		"delete": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"delete-commit-comment": {
			"comment_id": "comment_id parameter",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"delete-deployment": {
			"deployment_id": "deployment_id parameter",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
		},
		"delete-download": {
			"download_id": "download_id parameter",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
		},
		"delete-file": {
			"author.email":    "The email of the author (or committer) of the commit",
			"author.name":     "The name of the author (or committer) of the commit",
			"branch":          "The branch name. Default: the repository’s default branch (usually `master`)",
			"committer.email": "The email of the author (or committer) of the commit",
			"committer.name":  "The name of the author (or committer) of the commit",
			"message":         "The commit message.",
			"owner":           "owner parameter",
			"path":            "path parameter",
			"repo":            "repo parameter",
			"sha":             "The blob SHA of the file being replaced.",
		},
		"delete-hook": {
			"hook_id": "hook_id parameter",
			"owner":   "owner parameter",
			"repo":    "repo parameter",
		},
		"delete-invitation": {
			"invitation_id": "invitation_id parameter",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
		},
		"delete-release": {
			"owner":      "owner parameter",
			"release_id": "release_id parameter",
			"repo":       "repo parameter",
		},
		"delete-release-asset": {
			"asset_id": "asset_id parameter",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"disable-automated-security-fixes": {
			"london-preview": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"disable-pages-site": {
			"owner":              "owner parameter",
			"repo":               "repo parameter",
			"switcheroo-preview": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```",
		},
		"disable-vulnerability-alerts": {
			"dorian-preview": "Enabling and disabling vulnerability alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"enable-automated-security-fixes": {
			"london-preview": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"enable-pages-site": {
			"owner":              "owner parameter",
			"repo":               "repo parameter",
			"source.branch":      "The repository branch used to publish your [site's source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/). Can be either `master` or `gh-pages`.",
			"source.path":        "The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`.",
			"switcheroo-preview": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```",
		},
		"enable-vulnerability-alerts": {
			"dorian-preview": "Enabling and disabling vulnerability alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"get": {
			"nebula-preview":        "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"scarlet-witch-preview": "Developers can preview a new `code_of_conduct` key in responses. For more information, see [Codes of Conduct API](https://developer.github.com/v3/codes_of_conduct/).\n\nTo access this new response key during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```",
		},
		"get-all-topics": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
		},
		"get-apps-with-access-to-protected-branch": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-archive-link": {
			"archive_format": "archive_format parameter",
			"owner":          "owner parameter",
			"ref":            "ref parameter",
			"repo":           "repo parameter",
		},
		"get-branch": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-branch-protection": {
			"branch":            "branch parameter",
			"luke-cage-preview": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
			"owner":             "owner parameter",
			"repo":              "repo parameter",
		},
		"get-clones": {
			"owner": "owner parameter",
			"per":   "Must be one of: `day`, `week`.",
			"repo":  "repo parameter",
		},
		"get-code-frequency-stats": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-collaborator-permission-level": {
			"owner":    "owner parameter",
			"repo":     "repo parameter",
			"username": "username parameter",
		},
		"get-combined-status-for-ref": {
			"owner": "owner parameter",
			"ref":   "ref parameter",
			"repo":  "repo parameter",
		},
		"get-commit": {
			"owner": "owner parameter",
			"ref":   "ref parameter",
			"repo":  "repo parameter",
		},
		"get-commit-activity-stats": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-commit-comment": {
			"comment_id":            "comment_id parameter",
			"owner":                 "owner parameter",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "An additional `reactions` object in the commit comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"get-contents": {
			"owner": "owner parameter",
			"path":  "path parameter",
			"ref":   "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
			"repo":  "repo parameter",
		},
		"get-contributors-stats": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-deploy-key": {
			"key_id": "key_id parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-deployment": {
			"ant-man-preview":     "The `transient_environment` and `production_environment` parameters are currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
			"deployment_id":       "deployment_id parameter",
			"machine-man-preview": "If a deployment is created via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"owner":               "owner parameter",
			"repo":                "repo parameter",
		},
		"get-deployment-status": {
			"ant-man-preview":     "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
			"deployment_id":       "deployment_id parameter",
			"flash-preview":       "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```",
			"machine-man-preview": "If a deployment is created via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```",
			"owner":               "owner parameter",
			"repo":                "repo parameter",
			"status_id":           "status_id parameter",
		},
		"get-download": {
			"download_id": "download_id parameter",
			"owner":       "owner parameter",
			"repo":        "repo parameter",
		},
		"get-hook": {
			"hook_id": "hook_id parameter",
			"owner":   "owner parameter",
			"repo":    "repo parameter",
		},
		"get-latest-pages-build": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-latest-release": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-pages": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-pages-build": {
			"build_id": "build_id parameter",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"get-participation-stats": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-protected-branch-admin-enforcement": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-protected-branch-pull-request-review-enforcement": {
			"branch":            "branch parameter",
			"luke-cage-preview": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
			"owner":             "owner parameter",
			"repo":              "repo parameter",
		},
		"get-protected-branch-required-signatures": {
			"branch":        "branch parameter",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
			"zzzax-preview": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```",
		},
		"get-protected-branch-required-status-checks": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-protected-branch-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-punch-card-stats": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-readme": {
			"owner": "owner parameter",
			"ref":   "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
			"repo":  "repo parameter",
		},
		"get-release": {
			"owner":      "owner parameter",
			"release_id": "release_id parameter",
			"repo":       "repo parameter",
		},
		"get-release-asset": {
			"asset_id": "asset_id parameter",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
		"get-release-by-tag": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
			"tag":   "tag parameter",
		},
		"get-teams-with-access-to-protected-branch": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-top-paths": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-top-referrers": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"get-users-with-access-to-protected-branch": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"get-views": {
			"owner": "owner parameter",
			"per":   "Must be one of: `day`, `week`.",
			"repo":  "repo parameter",
		},
		"list-assets-for-release": {
			"owner":      "owner parameter",
			"page":       "Page number of the results to fetch.",
			"per_page":   "Results per page (max 100)",
			"release_id": "release_id parameter",
			"repo":       "repo parameter",
		},
		"list-branches": {
			"owner":     "owner parameter",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"protected": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
			"repo":      "repo parameter",
		},
		"list-branches-for-head-commit": {
			"commit_sha":    "commit_sha parameter",
			"groot-preview": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
		},
		"list-collaborators": {
			"affiliation": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
			"owner":       "owner parameter",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"repo":        "repo parameter",
		},
		"list-comments-for-commit": {
			"commit_sha":            "commit_sha parameter",
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "An additional `reactions` object in the commit comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"list-commit-comments": {
			"owner":                 "owner parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"repo":                  "repo parameter",
			"squirrel-girl-preview": "An additional `reactions` object in the commit comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
		},
		"list-commits": {
			"author":   "GitHub login or email address by which to filter by commit author.",
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"path":     "Only commits containing this file path will be returned.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
			"sha":      "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).",
			"since":    "Only commits after this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
			"until":    "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
		},
		"list-contributors": {
			"anon":     "Set to `1` or `true` to include anonymous contributors in results.",
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-deploy-keys": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-deployment-statuses": {
			"ant-man-preview": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
			"deployment_id":   "deployment_id parameter",
			"flash-preview":   "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"repo":            "repo parameter",
		},
		"list-deployments": {
			"ant-man-preview": "The `transient_environment` and `production_environment` parameters are currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```",
			"environment":     "The name of the environment that was deployed to (e.g., `staging` or `production`).",
			"owner":           "owner parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"ref":             "The name of the ref. This can be a branch, tag, or SHA.",
			"repo":            "repo parameter",
			"sha":             "The SHA recorded at creation time.",
			"task":            "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
		},
		"list-downloads": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-for-authenticated-user": {
			"affiliation": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
			"direction":   "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
			"page":        "Page number of the results to fetch.",
			"per_page":    "Results per page (max 100)",
			"sort":        "Can be one of `created`, `updated`, `pushed`, `full_name`.",
			"type":        "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
			"visibility":  "Can be one of `all`, `public`, or `private`.",
		},
		"list-for-org": {
			"baptiste-preview": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
			"direction":        "Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`",
			"nebula-preview":   "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
			"org":              "org parameter",
			"page":             "Page number of the results to fetch.",
			"per_page":         "Results per page (max 100)",
			"sort":             "Can be one of `created`, `updated`, `pushed`, `full_name`.",
			"type":             "Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.",
		},
		"list-for-user": {
			"direction":      "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
			"nebula-preview": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
			"page":           "Page number of the results to fetch.",
			"per_page":       "Results per page (max 100)",
			"sort":           "Can be one of `created`, `updated`, `pushed`, `full_name`.",
			"type":           "Can be one of `all`, `owner`, `member`.",
			"username":       "username parameter",
		},
		"list-forks": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
			"sort":     "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
		},
		"list-hooks": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-invitations": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-invitations-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-languages": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"list-pages-builds": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-protected-branch-required-status-checks-contexts": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"list-public": {
			"since": "The integer ID of the last repository that you've seen.",
		},
		"list-pull-requests-associated-with-commit": {
			"commit_sha":    "commit_sha parameter",
			"groot-preview": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```",
			"owner":         "owner parameter",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
			"repo":          "repo parameter",
		},
		"list-releases": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-statuses-for-ref": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"ref":      "ref parameter",
			"repo":     "repo parameter",
		},
		"list-tags": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"list-teams": {
			"owner":    "owner parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"repo":     "repo parameter",
		},
		"merge": {
			"base":           "The name of the base branch that the head will be merged into.",
			"commit_message": "Commit message to use for the merge commit. If omitted, a default message will be used.",
			"head":           "The head to merge. This can be a branch name or a commit SHA1.",
			"owner":          "owner parameter",
			"repo":           "repo parameter",
		},
		"ping-hook": {
			"hook_id": "hook_id parameter",
			"owner":   "owner parameter",
			"repo":    "repo parameter",
		},
		"remove-branch-protection": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-collaborator": {
			"owner":    "owner parameter",
			"repo":     "repo parameter",
			"username": "username parameter",
		},
		"remove-deploy-key": {
			"key_id": "key_id parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-admin-enforcement": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-app-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-pull-request-review-enforcement": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-required-signatures": {
			"branch":        "branch parameter",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
			"zzzax-preview": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```",
		},
		"remove-protected-branch-required-status-checks": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-required-status-checks-contexts": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-team-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"remove-protected-branch-user-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"replace-all-topics": {
			"mercy-preview": "Repository topics on GitHub are currently available for developers to preview. To use this endpoint, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
			"names":         "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.",
			"owner":         "owner parameter",
			"repo":          "repo parameter",
		},
		"replace-protected-branch-app-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"replace-protected-branch-required-status-checks-contexts": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"replace-protected-branch-team-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"replace-protected-branch-user-restrictions": {
			"branch": "branch parameter",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
		},
		"request-page-build": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"retrieve-community-profile-metrics": {
			"owner": "owner parameter",
			"repo":  "repo parameter",
		},
		"test-push-hook": {
			"hook_id": "hook_id parameter",
			"owner":   "owner parameter",
			"repo":    "repo parameter",
		},
		"transfer": {
			"new_owner": "**Required:** The username or organization name the repository will be transferred to.",
			"owner":     "owner parameter",
			"repo":      "repo parameter",
			"team_ids":  "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
		},
		"update": {
			"allow_merge_commit":     "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
			"allow_rebase_merge":     "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
			"allow_squash_merge":     "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
			"archived":               "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
			"baptiste-preview":       "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```",
			"default_branch":         "Updates the default branch for this repository.",
			"delete_branch_on_merge": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
			"description":            "A short description of the repository.",
			"has_issues":             "Either `true` to enable issues for this repository or `false` to disable them.",
			"has_projects":           "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
			"has_wiki":               "Either `true` to enable the wiki for this repository or `false` to disable it.",
			"homepage":               "A URL with more information about the repository.",
			"is_template":            "Either `true` to make this repo available as a template repository or `false` to prevent it.",
			"name":                   "The name of the repository.",
			"nebula-preview":         "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```",
			"owner":                  "owner parameter",
			"private":                "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
			"repo":                   "repo parameter",
			"visibility":             "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.",
		},
		"update-commit-comment": {
			"body":       "The contents of the comment",
			"comment_id": "comment_id parameter",
			"owner":      "owner parameter",
			"repo":       "repo parameter",
		},
		"update-hook": {
			"active":              "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
			"add_events":          "Determines a list of events to be added to the list of events that the Hook triggers for.",
			"config.content_type": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
			"config.insecure_ssl": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
			"config.secret":       "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
			"config.url":          "The URL to which the payloads will be delivered.",
			"events":              "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for. This replaces the entire array of events.",
			"hook_id":             "hook_id parameter",
			"owner":               "owner parameter",
			"remove_events":       "Determines a list of events to be removed from the list of events that the Hook triggers for.",
			"repo":                "repo parameter",
		},
		"update-information-about-pages-site": {
			"cname":  "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).\"",
			"owner":  "owner parameter",
			"repo":   "repo parameter",
			"source": "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`.",
		},
		"update-invitation": {
			"invitation_id": "invitation_id parameter",
			"owner":         "owner parameter",
			"permissions":   "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
			"repo":          "repo parameter",
		},
		"update-protected-branch-pull-request-review-enforcement": {
			"branch":                          "branch parameter",
			"dismiss_stale_reviews":           "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
			"dismissal_restrictions.teams":    "The list of team `slug`s with dismissal access",
			"dismissal_restrictions.users":    "The list of user `login`s with dismissal access",
			"luke-cage-preview":               "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```",
			"owner":                           "owner parameter",
			"repo":                            "repo parameter",
			"require_code_owner_reviews":      "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.",
			"required_approving_review_count": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
		},
		"update-protected-branch-required-status-checks": {
			"branch":   "branch parameter",
			"contexts": "The list of status checks to require in order to merge into this branch",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
			"strict":   "Require branches to be up to date before merging.",
		},
		"update-release": {
			"body":             "Text describing the contents of the tag.",
			"draft":            "`true` makes the release a draft, and `false` publishes the release.",
			"name":             "The name of the release.",
			"owner":            "owner parameter",
			"prerelease":       "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
			"release_id":       "release_id parameter",
			"repo":             "repo parameter",
			"tag_name":         "The name of the tag.",
			"target_commitish": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
		},
		"update-release-asset": {
			"asset_id": "asset_id parameter",
			"label":    "An alternate short description of the asset. Used in place of the filename.",
			"name":     "The file name of the asset.",
			"owner":    "owner parameter",
			"repo":     "repo parameter",
		},
	},
	"scim": {
		"get-provisioning-details-for-user": {
			"org":          "org parameter",
			"scim_user_id": "scim_user_id parameter",
		},
		"list-provisioned-identities": {
			"count":      "Used for pagination: the number of results to return.",
			"filter":     "Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query: `?filter=userName%20eq%20\\\"Octocat\\\"`.",
			"org":        "org parameter",
			"startIndex": "Used for pagination: the index of the first result to return.",
		},
		"provision-and-invite-users": {
			"org": "org parameter",
		},
		"remove-user-from-org": {
			"org":          "org parameter",
			"scim_user_id": "scim_user_id parameter",
		},
		"replace-provisioned-user-information": {
			"org":          "org parameter",
			"scim_user_id": "scim_user_id parameter",
		},
		"update-user-attribute": {
			"org":          "org parameter",
			"scim_user_id": "scim_user_id parameter",
		},
	},
	"search": {
		"code": {
			"order":    "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"q":        "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers.",
			"sort":     "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"commits": {
			"cloak-preview": "The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2017-01-05-commit-search-api/) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.cloak-preview\n```",
			"order":         "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
			"q":             "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers.",
			"sort":          "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"email-legacy": {
			"email": "The email address.",
		},
		"issues-and-pull-requests": {
			"order":    "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"q":        "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
			"sort":     "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"issues-legacy": {
			"keyword":    "The search term.",
			"owner":      "owner parameter",
			"repository": "repository parameter",
			"state":      "Indicates the state of the issues to return. Can be either `open` or `closed`.",
		},
		"labels": {
			"order":         "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"q":             "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
			"repository_id": "The id of the repository.",
			"sort":          "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"repos": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
			"order":         "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":          "Page number of the results to fetch.",
			"per_page":      "Results per page (max 100)",
			"q":             "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
			"sort":          "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"repos-legacy": {
			"keyword":    "The search term.",
			"language":   "Filter results by language.",
			"order":      "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
			"sort":       "The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.",
			"start_page": "The page number to fetch.",
		},
		"topics": {
			"mercy-preview": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```",
			"q":             "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
		},
		"users": {
			"order":    "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"q":        "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers.",
			"sort":     "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
		},
		"users-legacy": {
			"keyword":    "The search term.",
			"order":      "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
			"sort":       "The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.",
			"start_page": "The page number to fetch.",
		},
	},
	"teams": {
		"add-member-legacy": {
			"team_id":  "team_id parameter",
			"username": "username parameter",
		},
		"add-or-update-membership-in-org": {
			"org":       "org parameter",
			"role":      "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
			"team_slug": "team_slug parameter",
			"username":  "username parameter",
		},
		"add-or-update-membership-legacy": {
			"role":     "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
			"team_id":  "team_id parameter",
			"username": "username parameter",
		},
		"add-or-update-project-in-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"org":             "org parameter",
			"permission":      "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
			"project_id":      "project_id parameter",
			"team_slug":       "team_slug parameter",
		},
		"add-or-update-project-legacy": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"permission":      "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
			"project_id":      "project_id parameter",
			"team_id":         "team_id parameter",
		},
		"add-or-update-repo-in-org": {
			"org":        "org parameter",
			"owner":      "owner parameter",
			"permission": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n\\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  \n\\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
			"repo":       "repo parameter",
			"team_slug":  "team_slug parameter",
		},
		"add-or-update-repo-legacy": {
			"owner":      "owner parameter",
			"permission": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
			"repo":       "repo parameter",
			"team_id":    "team_id parameter",
		},
		"check-manages-repo-in-org": {
			"org":       "org parameter",
			"owner":     "owner parameter",
			"repo":      "repo parameter",
			"team_slug": "team_slug parameter",
		},
		"check-manages-repo-legacy": {
			"owner":   "owner parameter",
			"repo":    "repo parameter",
			"team_id": "team_id parameter",
		},
		"create": {
			"description":    "The description of the team.",
			"maintainers":    "List GitHub IDs for organization members who will become team maintainers.",
			"name":           "The name of the team.",
			"org":            "org parameter",
			"parent_team_id": "The ID of a team to set as the parent team.",
			"permission":     "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
			"privacy":        "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
			"repo_names":     "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
		},
		"create-discussion-comment-in-org": {
			"body":                  "The discussion comment's body text.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
		},
		"create-discussion-comment-legacy": {
			"body":                  "The discussion comment's body text.",
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
		},
		"create-discussion-in-org": {
			"body":                  "The discussion post's body text.",
			"org":                   "org parameter",
			"private":               "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
			"title":                 "The discussion post's title.",
		},
		"create-discussion-legacy": {
			"body":                  "The discussion post's body text.",
			"private":               "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
			"title":                 "The discussion post's title.",
		},
		"delete-discussion-comment-in-org": {
			"comment_number":    "comment_number parameter",
			"discussion_number": "discussion_number parameter",
			"org":               "org parameter",
			"team_slug":         "team_slug parameter",
		},
		"delete-discussion-comment-legacy": {
			"comment_number":    "comment_number parameter",
			"discussion_number": "discussion_number parameter",
			"team_id":           "team_id parameter",
		},
		"delete-discussion-in-org": {
			"discussion_number": "discussion_number parameter",
			"org":               "org parameter",
			"team_slug":         "team_slug parameter",
		},
		"delete-discussion-legacy": {
			"discussion_number": "discussion_number parameter",
			"team_id":           "team_id parameter",
		},
		"delete-in-org": {
			"org":       "org parameter",
			"team_slug": "team_slug parameter",
		},
		"delete-legacy": {
			"team_id": "team_id parameter",
		},
		"get-by-name": {
			"org":       "org parameter",
			"team_slug": "team_slug parameter",
		},
		"get-discussion-comment-in-org": {
			"comment_number":        "comment_number parameter",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
		},
		"get-discussion-comment-legacy": {
			"comment_number":        "comment_number parameter",
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
		},
		"get-discussion-in-org": {
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
		},
		"get-discussion-legacy": {
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
		},
		"get-legacy": {
			"team_id": "team_id parameter",
		},
		"get-member-legacy": {
			"team_id":  "team_id parameter",
			"username": "username parameter",
		},
		"get-membership-in-org": {
			"org":       "org parameter",
			"team_slug": "team_slug parameter",
			"username":  "username parameter",
		},
		"get-membership-legacy": {
			"team_id":  "team_id parameter",
			"username": "username parameter",
		},
		"list": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-child-in-org": {
			"org":       "org parameter",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"team_slug": "team_slug parameter",
		},
		"list-child-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"team_id":  "team_id parameter",
		},
		"list-discussion-comments-in-org": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
		},
		"list-discussion-comments-legacy": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"discussion_number":     "discussion_number parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
		},
		"list-discussions-in-org": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"org":                   "org parameter",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
		},
		"list-discussions-legacy": {
			"direction":             "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
			"page":                  "Page number of the results to fetch.",
			"per_page":              "Results per page (max 100)",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
		},
		"list-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-id-p-groups-for-legacy": {
			"team_id": "team_id parameter",
		},
		"list-id-p-groups-for-org": {
			"org":      "org parameter",
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-id-p-groups-in-org": {
			"org":       "org parameter",
			"team_slug": "team_slug parameter",
		},
		"list-members-in-org": {
			"org":       "org parameter",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"role":      "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
			"team_slug": "team_slug parameter",
		},
		"list-members-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"role":     "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
			"team_id":  "team_id parameter",
		},
		"list-pending-invitations-in-org": {
			"org":       "org parameter",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"team_slug": "team_slug parameter",
		},
		"list-pending-invitations-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"team_id":  "team_id parameter",
		},
		"list-projects-in-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"org":             "org parameter",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"team_slug":       "team_slug parameter",
		},
		"list-projects-legacy": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"page":            "Page number of the results to fetch.",
			"per_page":        "Results per page (max 100)",
			"team_id":         "team_id parameter",
		},
		"list-repos-in-org": {
			"org":       "org parameter",
			"page":      "Page number of the results to fetch.",
			"per_page":  "Results per page (max 100)",
			"team_slug": "team_slug parameter",
		},
		"list-repos-legacy": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"team_id":  "team_id parameter",
		},
		"remove-member-legacy": {
			"team_id":  "team_id parameter",
			"username": "username parameter",
		},
		"remove-membership-in-org": {
			"org":       "org parameter",
			"team_slug": "team_slug parameter",
			"username":  "username parameter",
		},
		"remove-membership-legacy": {
			"team_id":  "team_id parameter",
			"username": "username parameter",
		},
		"remove-project-in-org": {
			"org":        "org parameter",
			"project_id": "project_id parameter",
			"team_slug":  "team_slug parameter",
		},
		"remove-project-legacy": {
			"project_id": "project_id parameter",
			"team_id":    "team_id parameter",
		},
		"remove-repo-in-org": {
			"org":       "org parameter",
			"owner":     "owner parameter",
			"repo":      "repo parameter",
			"team_slug": "team_slug parameter",
		},
		"remove-repo-legacy": {
			"owner":   "owner parameter",
			"repo":    "repo parameter",
			"team_id": "team_id parameter",
		},
		"review-project-in-org": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"org":             "org parameter",
			"project_id":      "project_id parameter",
			"team_slug":       "team_slug parameter",
		},
		"review-project-legacy": {
			"inertia-preview": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```",
			"project_id":      "project_id parameter",
			"team_id":         "team_id parameter",
		},
		"update-discussion-comment-in-org": {
			"body":                  "The discussion comment's body text.",
			"comment_number":        "comment_number parameter",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
		},
		"update-discussion-comment-legacy": {
			"body":                  "The discussion comment's body text.",
			"comment_number":        "comment_number parameter",
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
		},
		"update-discussion-in-org": {
			"body":                  "The discussion post's body text.",
			"discussion_number":     "discussion_number parameter",
			"org":                   "org parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_slug":             "team_slug parameter",
			"title":                 "The discussion post's title.",
		},
		"update-discussion-legacy": {
			"body":                  "The discussion post's body text.",
			"discussion_number":     "discussion_number parameter",
			"squirrel-girl-preview": "The [reactions API](https://developer.github.com/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```",
			"team_id":               "team_id parameter",
			"title":                 "The discussion post's title.",
		},
		"update-in-org": {
			"description":    "The description of the team.",
			"name":           "The name of the team.",
			"org":            "org parameter",
			"parent_team_id": "The ID of a team to set as the parent team.",
			"permission":     "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
			"privacy":        "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
			"team_slug":      "team_slug parameter",
		},
		"update-legacy": {
			"description":    "The description of the team.",
			"name":           "The name of the team.",
			"parent_team_id": "The ID of a team to set as the parent team.",
			"permission":     "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
			"privacy":        "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
			"team_id":        "team_id parameter",
		},
	},
	"users": {
		"add-emails": {
			"emails": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
		},
		"block": {
			"username": "username parameter",
		},
		"check-blocked": {
			"username": "username parameter",
		},
		"check-following": {
			"username": "username parameter",
		},
		"check-following-for-user": {
			"target_user": "target_user parameter",
			"username":    "username parameter",
		},
		"create-gpg-key": {
			"armored_public_key": "Your GPG key, generated in ASCII-armored format. See \"[Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/)\" for help creating a GPG key.",
		},
		"create-public-key": {
			"key":   "The public SSH key to add to your GitHub account. See \"[Generating a new SSH key](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\" for guidance on how to create a public SSH key.",
			"title": "A descriptive name for the new key. Use a name that will help you recognize this key in your GitHub account. For example, if you're using a personal Mac, you might call this key \"Personal MacBook Air\".",
		},
		"delete-emails": {
			"emails": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
		},
		"delete-gpg-key": {
			"gpg_key_id": "gpg_key_id parameter",
		},
		"delete-public-key": {
			"key_id": "key_id parameter",
		},
		"follow": {
			"username": "username parameter",
		},
		"get-authenticated": {},
		"get-by-username": {
			"username": "username parameter",
		},
		"get-context-for-user": {
			"subject_id":   "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
			"subject_type": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
			"username":     "username parameter",
		},
		"get-gpg-key": {
			"gpg_key_id": "gpg_key_id parameter",
		},
		"get-public-key": {
			"key_id": "key_id parameter",
		},
		"list": {
			"since": "The integer ID of the last User that you've seen.",
		},
		"list-blocked": {},
		"list-emails": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-followed-by-authenticated": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-followers-for-authenticated-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-followers-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-following-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-gpg-keys": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-gpg-keys-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"list-public-emails": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-keys": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
		},
		"list-public-keys-for-user": {
			"page":     "Page number of the results to fetch.",
			"per_page": "Results per page (max 100)",
			"username": "username parameter",
		},
		"toggle-primary-email-visibility": {
			"email":      "Specify the _primary_ email address that needs a visibility change.",
			"visibility": "Use `public` to enable an authenticated user to view the specified email address, or use `private` so this primary email address cannot be seen publicly.",
		},
		"unblock": {
			"username": "username parameter",
		},
		"unfollow": {
			"username": "username parameter",
		},
		"update-authenticated": {
			"bio":      "The new short biography of the user.",
			"blog":     "The new blog URL of the user.",
			"company":  "The new company of the user.",
			"email":    "The publicly visible email address of the user.",
			"hireable": "The new hiring availability of the user.",
			"location": "The new location of the user.",
			"name":     "The new name of the user.",
		},
	},
}
