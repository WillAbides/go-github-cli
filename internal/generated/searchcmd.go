// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type SearchCmd struct {
	Code                  SearchCodeCmd                  `cmd:""`
	Commits               SearchCommitsCmd               `cmd:""`
	EmailLegacy           SearchEmailLegacyCmd           `cmd:""`
	IssuesAndPullRequests SearchIssuesAndPullRequestsCmd `cmd:""`
	IssuesLegacy          SearchIssuesLegacyCmd          `cmd:""`
	Labels                SearchLabelsCmd                `cmd:""`
	Repos                 SearchReposCmd                 `cmd:""`
	ReposLegacy           SearchReposLegacyCmd           `cmd:""`
	Topics                SearchTopicsCmd                `cmd:""`
	Users                 SearchUsersCmd                 `cmd:""`
	UsersLegacy           SearchUsersLegacyCmd           `cmd:""`
}

type SearchCodeCmd struct {
	Order   string `name:"order"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Sort    string `name:"sort"`
	Q       string `name:"q" required:"true"`
	internal.BaseCmd
}

func (c *SearchCodeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/code")
	c.UpdateURLQuery("q", c.Q)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type SearchCommitsCmd struct {
	Cloak   bool   `name:"cloak-preview" required:"true"`
	Order   string `name:"order"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Sort    string `name:"sort"`
	Q       string `name:"q" required:"true"`
	internal.BaseCmd
}

func (c *SearchCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/commits")
	c.UpdateURLQuery("q", c.Q)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("cloak", c.Cloak)
	return c.DoRequest("GET")
}

type SearchEmailLegacyCmd struct {
	Email string `name:"email" required:"true"`
	internal.BaseCmd
}

func (c *SearchEmailLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/legacy/user/email/{email}")
	c.UpdateURLPath("email", c.Email)
	return c.DoRequest("GET")
}

type SearchIssuesAndPullRequestsCmd struct {
	Order   string `name:"order"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Sort    string `name:"sort"`
	Q       string `name:"q" required:"true"`
	internal.BaseCmd
}

func (c *SearchIssuesAndPullRequestsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/issues")
	c.UpdateURLQuery("q", c.Q)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type SearchIssuesLegacyCmd struct {
	Owner      string `name:"owner" required:"true"`
	Repository string `name:"repository" required:"true"`
	State      string `name:"state" required:"true"`
	Keyword    string `name:"keyword" required:"true"`
	internal.BaseCmd
}

func (c *SearchIssuesLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/legacy/issues/search/{owner}/{repository}/{state}/{keyword}")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repository", c.Repository)
	c.UpdateURLPath("state", c.State)
	c.UpdateURLPath("keyword", c.Keyword)
	return c.DoRequest("GET")
}

type SearchLabelsCmd struct {
	Order        string `name:"order"`
	Sort         string `name:"sort"`
	Q            string `name:"q" required:"true"`
	RepositoryId int64  `name:"repository_id" required:"true"`
	internal.BaseCmd
}

func (c *SearchLabelsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/labels")
	c.UpdateURLQuery("repository_id", c.RepositoryId)
	c.UpdateURLQuery("q", c.Q)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	return c.DoRequest("GET")
}

type SearchReposCmd struct {
	Mercy   bool   `name:"mercy-preview"`
	Order   string `name:"order"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Sort    string `name:"sort"`
	Q       string `name:"q" required:"true"`
	internal.BaseCmd
}

func (c *SearchReposCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/repositories")
	c.UpdateURLQuery("q", c.Q)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("mercy", c.Mercy)
	return c.DoRequest("GET")
}

type SearchReposLegacyCmd struct {
	Keyword   string `name:"keyword" required:"true"`
	Language  string `name:"language"`
	Order     string `name:"order"`
	Sort      string `name:"sort"`
	StartPage string `name:"start_page"`
	internal.BaseCmd
}

func (c *SearchReposLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/legacy/repos/search/{keyword}")
	c.UpdateURLPath("keyword", c.Keyword)
	c.UpdateURLQuery("language", c.Language)
	c.UpdateURLQuery("start_page", c.StartPage)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	return c.DoRequest("GET")
}

type SearchTopicsCmd struct {
	Mercy bool   `name:"mercy-preview"`
	Q     string `name:"q" required:"true"`
	internal.BaseCmd
}

func (c *SearchTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/topics")
	c.UpdateURLQuery("q", c.Q)
	c.UpdatePreview("mercy", c.Mercy)
	return c.DoRequest("GET")
}

type SearchUsersCmd struct {
	Order   string `name:"order"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Sort    string `name:"sort"`
	Q       string `name:"q" required:"true"`
	internal.BaseCmd
}

func (c *SearchUsersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/search/users")
	c.UpdateURLQuery("q", c.Q)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type SearchUsersLegacyCmd struct {
	Keyword   string `name:"keyword" required:"true"`
	Order     string `name:"order"`
	Sort      string `name:"sort"`
	StartPage string `name:"start_page"`
	internal.BaseCmd
}

func (c *SearchUsersLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/legacy/user/search/{keyword}")
	c.UpdateURLPath("keyword", c.Keyword)
	c.UpdateURLQuery("start_page", c.StartPage)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("order", c.Order)
	return c.DoRequest("GET")
}
