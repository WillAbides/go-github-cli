// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import internal "github.com/octo-cli/octo-cli/internal"

type ScimCmd struct {
	DeleteUserFromOrg                 ScimDeleteUserFromOrgCmd                 `cmd:""`
	GetProvisioningInformationForUser ScimGetProvisioningInformationForUserCmd `cmd:""`
	ListProvisionedIdentities         ScimListProvisionedIdentitiesCmd         `cmd:""`
	ProvisionAndInviteUser            ScimProvisionAndInviteUserCmd            `cmd:""`
	SetInformationForProvisionedUser  ScimSetInformationForProvisionedUserCmd  `cmd:""`
	UpdateAttributeForUser            ScimUpdateAttributeForUserCmd            `cmd:""`
}

type ScimDeleteUserFromOrgCmd struct {
	Org        string `name:"org" required:"true"`
	ScimUserId string `name:"scim_user_id" required:"true"`
	internal.BaseCmd
}

func (c *ScimDeleteUserFromOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/organizations/{org}/Users/{scim_user_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	return c.DoRequest("DELETE")
}

type ScimGetProvisioningInformationForUserCmd struct {
	Org        string `name:"org" required:"true"`
	ScimUserId string `name:"scim_user_id" required:"true"`
	internal.BaseCmd
}

func (c *ScimGetProvisioningInformationForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/organizations/{org}/Users/{scim_user_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	return c.DoRequest("GET")
}

type ScimListProvisionedIdentitiesCmd struct {
	Org        string `name:"org" required:"true"`
	Count      int64  `name:"count"`
	Filter     string `name:"filter"`
	StartIndex int64  `name:"startIndex"`
	internal.BaseCmd
}

func (c *ScimListProvisionedIdentitiesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/organizations/{org}/Users")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("startIndex", c.StartIndex)
	c.UpdateURLQuery("count", c.Count)
	c.UpdateURLQuery("filter", c.Filter)
	return c.DoRequest("GET")
}

type ScimProvisionAndInviteUserCmd struct {
	Org            string                `name:"org" required:"true"`
	Active         bool                  `name:"active"`
	DisplayName    string                `name:"displayName"`
	ExternalId     string                `name:"externalId"`
	Groups         []string              `name:"groups"`
	Schemas        []string              `name:"schemas"`
	Emails         []internal.JSONObject `name:"emails" required:"true"`
	NameFamilyName string                `name:"name.familyName" required:"true"`
	NameGivenName  string                `name:"name.givenName" required:"true"`
	UserName       string                `name:"userName" required:"true"`
	internal.BaseCmd
}

func (c *ScimProvisionAndInviteUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/organizations/{org}/Users")
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("displayName", c.DisplayName)
	c.UpdateBody("emails", c.Emails)
	c.UpdateBody("externalId", c.ExternalId)
	c.UpdateBody("groups", c.Groups)
	c.UpdateBody("name.familyName", c.NameFamilyName)
	c.UpdateBody("name.givenName", c.NameGivenName)
	c.UpdateBody("schemas", c.Schemas)
	c.UpdateBody("userName", c.UserName)
	return c.DoRequest("POST")
}

type ScimSetInformationForProvisionedUserCmd struct {
	Org            string                `name:"org" required:"true"`
	ScimUserId     string                `name:"scim_user_id" required:"true"`
	Active         bool                  `name:"active"`
	DisplayName    string                `name:"displayName"`
	ExternalId     string                `name:"externalId"`
	Groups         []string              `name:"groups"`
	Schemas        []string              `name:"schemas"`
	Emails         []internal.JSONObject `name:"emails" required:"true"`
	NameFamilyName string                `name:"name.familyName" required:"true"`
	NameGivenName  string                `name:"name.givenName" required:"true"`
	UserName       string                `name:"userName" required:"true"`
	internal.BaseCmd
}

func (c *ScimSetInformationForProvisionedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/organizations/{org}/Users/{scim_user_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	c.UpdateBody("active", c.Active)
	c.UpdateBody("displayName", c.DisplayName)
	c.UpdateBody("emails", c.Emails)
	c.UpdateBody("externalId", c.ExternalId)
	c.UpdateBody("groups", c.Groups)
	c.UpdateBody("name.familyName", c.NameFamilyName)
	c.UpdateBody("name.givenName", c.NameGivenName)
	c.UpdateBody("schemas", c.Schemas)
	c.UpdateBody("userName", c.UserName)
	return c.DoRequest("PUT")
}

type ScimUpdateAttributeForUserCmd struct {
	Org        string                `name:"org" required:"true"`
	ScimUserId string                `name:"scim_user_id" required:"true"`
	Schemas    []string              `name:"schemas"`
	Operations []internal.JSONObject `name:"Operations" required:"true"`
	internal.BaseCmd
}

func (c *ScimUpdateAttributeForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/scim/v2/organizations/{org}/Users/{scim_user_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("scim_user_id", c.ScimUserId)
	c.UpdateBody("Operations", c.Operations)
	c.UpdateBody("schemas", c.Schemas)
	return c.DoRequest("PATCH")
}
