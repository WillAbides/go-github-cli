// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import (
	"github.com/octo-cli/octo-cli/internal"
)

type ReactionsCmd struct {
	CreateForCommitComment               ReactionsCreateForCommitCommentCmd               `cmd:""`
	CreateForIssue                       ReactionsCreateForIssueCmd                       `cmd:""`
	CreateForIssueComment                ReactionsCreateForIssueCommentCmd                `cmd:""`
	CreateForPullRequestReviewComment    ReactionsCreateForPullRequestReviewCommentCmd    `cmd:""`
	CreateForTeamDiscussionCommentInOrg  ReactionsCreateForTeamDiscussionCommentInOrgCmd  `cmd:""`
	CreateForTeamDiscussionCommentLegacy ReactionsCreateForTeamDiscussionCommentLegacyCmd `cmd:""`
	CreateForTeamDiscussionInOrg         ReactionsCreateForTeamDiscussionInOrgCmd         `cmd:""`
	CreateForTeamDiscussionLegacy        ReactionsCreateForTeamDiscussionLegacyCmd        `cmd:""`
	DeleteForCommitComment               ReactionsDeleteForCommitCommentCmd               `cmd:""`
	DeleteForIssue                       ReactionsDeleteForIssueCmd                       `cmd:""`
	DeleteForIssueComment                ReactionsDeleteForIssueCommentCmd                `cmd:""`
	DeleteForPullRequestComment          ReactionsDeleteForPullRequestCommentCmd          `cmd:""`
	DeleteForTeamDiscussion              ReactionsDeleteForTeamDiscussionCmd              `cmd:""`
	DeleteForTeamDiscussionComment       ReactionsDeleteForTeamDiscussionCommentCmd       `cmd:""`
	DeleteLegacy                         ReactionsDeleteLegacyCmd                         `cmd:""`
	ListForCommitComment                 ReactionsListForCommitCommentCmd                 `cmd:""`
	ListForIssue                         ReactionsListForIssueCmd                         `cmd:""`
	ListForIssueComment                  ReactionsListForIssueCommentCmd                  `cmd:""`
	ListForPullRequestReviewComment      ReactionsListForPullRequestReviewCommentCmd      `cmd:""`
	ListForTeamDiscussionCommentInOrg    ReactionsListForTeamDiscussionCommentInOrgCmd    `cmd:""`
	ListForTeamDiscussionCommentLegacy   ReactionsListForTeamDiscussionCommentLegacyCmd   `cmd:""`
	ListForTeamDiscussionInOrg           ReactionsListForTeamDiscussionInOrgCmd           `cmd:""`
	ListForTeamDiscussionLegacy          ReactionsListForTeamDiscussionLegacyCmd          `cmd:""`
}

type ReactionsCreateForCommitCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Content      string `required:"" name:"content"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsCreateForCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForIssueCmd struct {
	Content      string `required:"" name:"content"`
	IssueNumber  int64  `required:"" name:"issue_number"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsCreateForIssueCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/issues/{issue_number}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("issue_number", c.IssueNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForIssueCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Content      string `required:"" name:"content"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsCreateForIssueCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/issues/comments/{comment_id}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForPullRequestReviewCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Content      string `required:"" name:"content"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsCreateForPullRequestReviewCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pulls/comments/{comment_id}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForTeamDiscussionCommentInOrgCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	Content          string `required:"" name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *ReactionsCreateForTeamDiscussionCommentInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForTeamDiscussionCommentLegacyCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	Content          string `required:"" name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *ReactionsCreateForTeamDiscussionCommentLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForTeamDiscussionInOrgCmd struct {
	Content          string `required:"" name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *ReactionsCreateForTeamDiscussionInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsCreateForTeamDiscussionLegacyCmd struct {
	Content          string `required:"" name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *ReactionsCreateForTeamDiscussionLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/reactions")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateBody("content", c.Content)
	return c.DoRequest("POST")
}

type ReactionsDeleteForCommitCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	ReactionId   int64  `required:"" name:"reaction_id"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsDeleteForCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}/reactions/{reaction_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsDeleteForIssueCmd struct {
	IssueNumber  int64  `required:"" name:"issue_number"`
	ReactionId   int64  `required:"" name:"reaction_id"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsDeleteForIssueCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/issues/{issue_number}/reactions/{reaction_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("issue_number", c.IssueNumber)
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsDeleteForIssueCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	ReactionId   int64  `required:"" name:"reaction_id"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsDeleteForIssueCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsDeleteForPullRequestCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	ReactionId   int64  `required:"" name:"reaction_id"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsDeleteForPullRequestCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsDeleteForTeamDiscussionCmd struct {
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	ReactionId       int64  `required:"" name:"reaction_id"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *ReactionsDeleteForTeamDiscussionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsDeleteForTeamDiscussionCommentCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	ReactionId       int64  `required:"" name:"reaction_id"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *ReactionsDeleteForTeamDiscussionCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsDeleteLegacyCmd struct {
	ReactionId   int64 `required:"" name:"reaction_id"`
	SquirrelGirl bool  `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsDeleteLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/reactions/{reaction_id}")
	c.UpdateURLPath("reaction_id", c.ReactionId)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("DELETE")
}

type ReactionsListForCommitCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Content      string `name:"content"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsListForCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/comments/{comment_id}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForIssueCmd struct {
	Content      string `name:"content"`
	IssueNumber  int64  `required:"" name:"issue_number"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsListForIssueCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/issues/{issue_number}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("issue_number", c.IssueNumber)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForIssueCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Content      string `name:"content"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsListForIssueCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/issues/comments/{comment_id}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForPullRequestReviewCommentCmd struct {
	CommentId    int64  `required:"" name:"comment_id"`
	Content      string `name:"content"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   `required:"" name:"squirrel-girl-preview"`
	internal.BaseCmd
}

func (c *ReactionsListForPullRequestReviewCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{repo}/pulls/comments/{comment_id}/reactions")
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForTeamDiscussionCommentInOrgCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	Content          string `name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	Page             int64  `name:"page"`
	PerPage          int64  `name:"per_page"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *ReactionsListForTeamDiscussionCommentInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForTeamDiscussionCommentLegacyCmd struct {
	CommentNumber    int64  `required:"" name:"comment_number"`
	Content          string `name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Page             int64  `name:"page"`
	PerPage          int64  `name:"per_page"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *ReactionsListForTeamDiscussionCommentLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForTeamDiscussionInOrgCmd struct {
	Content          string `name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Org              string `required:"" name:"org"`
	Page             int64  `name:"page"`
	PerPage          int64  `name:"per_page"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamSlug         string `required:"" name:"team_slug"`
	internal.BaseCmd
}

func (c *ReactionsListForTeamDiscussionInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("team_slug", c.TeamSlug)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReactionsListForTeamDiscussionLegacyCmd struct {
	Content          string `name:"content"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Page             int64  `name:"page"`
	PerPage          int64  `name:"per_page"`
	SquirrelGirl     bool   `required:"" name:"squirrel-girl-preview"`
	TeamId           int64  `required:"" name:"team_id"`
	internal.BaseCmd
}

func (c *ReactionsListForTeamDiscussionLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/{team_id}/discussions/{discussion_number}/reactions")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLQuery("content", c.Content)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}
